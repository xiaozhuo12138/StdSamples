/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t swig_types[0]
#define SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t swig_types[1]
#define SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t swig_types[2]
#define SWIGTYPE_p_DSP__BesselFilterT_SampleType_t swig_types[3]
#define SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t swig_types[4]
#define SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t swig_types[5]
#define SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t swig_types[6]
#define SWIGTYPE_p_DSP__BiquadT_SampleType_t swig_types[7]
#define SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t swig_types[8]
#define SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t swig_types[9]
#define SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t swig_types[10]
#define SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t swig_types[11]
#define SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t swig_types[12]
#define SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t swig_types[13]
#define SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t swig_types[14]
#define SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t swig_types[15]
#define SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t swig_types[16]
#define SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t swig_types[17]
#define SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t swig_types[18]
#define SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t swig_types[19]
#define SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t swig_types[20]
#define SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t swig_types[21]
#define SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t swig_types[22]
#define SWIGTYPE_p_DSP__DCTPlanT_SampleType_t swig_types[23]
#define SWIGTYPE_p_DSP__DFTPlanT_SampleType_t swig_types[24]
#define SWIGTYPE_p_DSP__DFTRealPlanT_SampleType_t swig_types[25]
#define SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t swig_types[26]
#define SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t swig_types[27]
#define SWIGTYPE_p_DSP__FIRFilterT_SampleType_t swig_types[28]
#define SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t swig_types[29]
#define SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t swig_types[30]
#define SWIGTYPE_p_DSP__FlacReaderT_SampleType_t swig_types[31]
#define SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t swig_types[32]
#define SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t swig_types[33]
#define SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t swig_types[34]
#define SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t swig_types[35]
#define SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t swig_types[36]
#define SWIGTYPE_p_DSP__NotchFilterT_SampleType_t swig_types[37]
#define SWIGTYPE_p_DSP__PeakFilterT_SampleType_t swig_types[38]
#define SWIGTYPE_p_DSP__WavReaderT_SampleType_t swig_types[39]
#define SWIGTYPE_p_DSP__WavWriterT_SampleType_t swig_types[40]
#define SWIGTYPE_p_Filters__BesselBandPassFilter swig_types[41]
#define SWIGTYPE_p_Filters__BesselBandStopFilter swig_types[42]
#define SWIGTYPE_p_Filters__BesselHighPassFilter swig_types[43]
#define SWIGTYPE_p_Filters__BesselLowPassFilter swig_types[44]
#define SWIGTYPE_p_Filters__BiquadAllpassFilter swig_types[45]
#define SWIGTYPE_p_Filters__BiquadBandpassFilter swig_types[46]
#define SWIGTYPE_p_Filters__BiquadFilterBase swig_types[47]
#define SWIGTYPE_p_Filters__BiquadHighpassFilter swig_types[48]
#define SWIGTYPE_p_Filters__BiquadHighshelfFilter swig_types[49]
#define SWIGTYPE_p_Filters__BiquadLowpassFilter swig_types[50]
#define SWIGTYPE_p_Filters__BiquadLowshelfFilter swig_types[51]
#define SWIGTYPE_p_Filters__BiquadNotchFilter swig_types[52]
#define SWIGTYPE_p_Filters__BiquadPeakFilter swig_types[53]
#define SWIGTYPE_p_Filters__BiquadSection swig_types[54]
#define SWIGTYPE_p_Filters__BiquadTransposedTypeII swig_types[55]
#define SWIGTYPE_p_Filters__ButterworthBandPassFilter swig_types[56]
#define SWIGTYPE_p_Filters__ButterworthBandStopFilter swig_types[57]
#define SWIGTYPE_p_Filters__ButterworthHighPassFilter swig_types[58]
#define SWIGTYPE_p_Filters__ButterworthLowPassFilter swig_types[59]
#define SWIGTYPE_p_Filters__ChebyshevIBandPassFilter swig_types[60]
#define SWIGTYPE_p_Filters__ChebyshevIBandStopFilter swig_types[61]
#define SWIGTYPE_p_Filters__ChebyshevIHighPassFilter swig_types[62]
#define SWIGTYPE_p_Filters__ChebyshevIIBandPassFilter swig_types[63]
#define SWIGTYPE_p_Filters__ChebyshevIIBandStopFilter swig_types[64]
#define SWIGTYPE_p_Filters__ChebyshevIIHighPassFilter swig_types[65]
#define SWIGTYPE_p_Filters__ChebyshevIILowPassFilter swig_types[66]
#define SWIGTYPE_p_Filters__ChebyshevILowPassFilter swig_types[67]
#define SWIGTYPE_p_Filters__FilterCoefficients swig_types[68]
#define SWIGTYPE_p_KfrDSP1__BesselFilter swig_types[69]
#define SWIGTYPE_p_KfrDSP1__Biquad12DB swig_types[70]
#define SWIGTYPE_p_KfrDSP1__Biquad6DB swig_types[71]
#define SWIGTYPE_p_KfrDSP1__BiquadCascade swig_types[72]
#define SWIGTYPE_p_KfrDSP1__BrowningFilter swig_types[73]
#define SWIGTYPE_p_KfrDSP1__ButterworthFilter swig_types[74]
#define SWIGTYPE_p_KfrDSP1__Chebyshev1Filter swig_types[75]
#define SWIGTYPE_p_KfrDSP1__Chebyshev2Filter swig_types[76]
#define SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t swig_types[77]
#define SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t swig_types[78]
#define SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t swig_types[79]
#define SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t swig_types[80]
#define SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t swig_types[81]
#define SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t swig_types[82]
#define SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t swig_types[83]
#define SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t swig_types[84]
#define SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t swig_types[85]
#define SWIGTYPE_p_KfrDSP1__FilterBase swig_types[86]
#define SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t swig_types[87]
#define SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t swig_types[88]
#define SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t swig_types[89]
#define SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t swig_types[90]
#define SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t swig_types[91]
#define SWIGTYPE_p_KfrDSP1__PinkNoise swig_types[92]
#define SWIGTYPE_p_KfrDSP1__PinkingFilter swig_types[93]
#define SWIGTYPE_p_KfrDSP1__RbjFilter swig_types[94]
#define SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t swig_types[95]
#define SWIGTYPE_p_KfrDSP1__ZolzerBiquad swig_types[96]
#define SWIGTYPE_p_SampleType swig_types[97]
#define SWIGTYPE_p_Std__RandomMersenne swig_types[98]
#define SWIGTYPE_p_bool swig_types[99]
#define SWIGTYPE_p_double swig_types[100]
#define SWIGTYPE_p_f_float__float swig_types[101]
#define SWIGTYPE_p_f_r_q_const__float__float swig_types[102]
#define SWIGTYPE_p_fenv_t swig_types[103]
#define SWIGTYPE_p_fexcept_t swig_types[104]
#define SWIGTYPE_p_float swig_types[105]
#define SWIGTYPE_p_ftype swig_types[106]
#define SWIGTYPE_p_int swig_types[107]
#define SWIGTYPE_p_itype swig_types[108]
#define SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t swig_types[109]
#define SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t swig_types[110]
#define SWIGTYPE_p_kfr__audio_format swig_types[111]
#define SWIGTYPE_p_kfr__audio_format_and_length swig_types[112]
#define SWIGTYPE_p_kfr__audio_reader_flacT_SampleType_t swig_types[113]
#define SWIGTYPE_p_kfr__audio_reader_mp3T_SampleType_t swig_types[114]
#define SWIGTYPE_p_kfr__audio_writer_wavT_SampleType_t swig_types[115]
#define SWIGTYPE_p_kfr__biquad_filterT_SampleType_t swig_types[116]
#define SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t swig_types[117]
#define SWIGTYPE_p_kfr__biquad_paramsT_double_t swig_types[118]
#define SWIGTYPE_p_kfr__complexT_SampleType_t swig_types[119]
#define SWIGTYPE_p_kfr__complexT_double_t swig_types[120]
#define SWIGTYPE_p_kfr__complexT_float_t swig_types[121]
#define SWIGTYPE_p_kfr__convolve_filterT_SampleType_t swig_types[122]
#define SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t swig_types[123]
#define SWIGTYPE_p_kfr__dct_planT_SampleType_t swig_types[124]
#define SWIGTYPE_p_kfr__dft_order swig_types[125]
#define SWIGTYPE_p_kfr__dft_planT_SampleType_t swig_types[126]
#define SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t swig_types[127]
#define SWIGTYPE_p_kfr__expression_pointerT_SampleType_t swig_types[128]
#define SWIGTYPE_p_kfr__filterT_SampleType_t swig_types[129]
#define SWIGTYPE_p_kfr__fraction swig_types[130]
#define SWIGTYPE_p_kfr__sample_rate_conversion_quality swig_types[131]
#define SWIGTYPE_p_kfr__seek_origin swig_types[132]
#define SWIGTYPE_p_kfr__univector2dT_SampleType_t swig_types[133]
#define SWIGTYPE_p_kfr__univectorT_SampleType_t swig_types[134]
#define SWIGTYPE_p_kfr__univectorT_float_t swig_types[135]
#define SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t swig_types[136]
#define SWIGTYPE_p_kfr__univectorT_kfr__complexT_float_t_t swig_types[137]
#define SWIGTYPE_p_kfr__univectorT_unsigned_char_t swig_types[138]
#define SWIGTYPE_p_kfr__window_symmetry swig_types[139]
#define SWIGTYPE_p_kfr__zpkT_SampleType_t swig_types[140]
#define SWIGTYPE_p_long swig_types[141]
#define SWIGTYPE_p_long_double swig_types[142]
#define SWIGTYPE_p_long_long swig_types[143]
#define SWIGTYPE_p_p_KfrDSP1__ConvolutionFilterT_SampleType_t swig_types[144]
#define SWIGTYPE_p_p_SampleType swig_types[145]
#define SWIGTYPE_p_short swig_types[146]
#define SWIGTYPE_p_signed_char swig_types[147]
#define SWIGTYPE_p_size_t swig_types[148]
#define SWIGTYPE_p_std__complexT_double_t swig_types[149]
#define SWIGTYPE_p_std__complexT_float_t swig_types[150]
#define SWIGTYPE_p_std__gslice swig_types[151]
#define SWIGTYPE_p_std__gslice_arrayT_float_t swig_types[152]
#define SWIGTYPE_p_std__indirect_arrayT_float_t swig_types[153]
#define SWIGTYPE_p_std__mask_arrayT_float_t swig_types[154]
#define SWIGTYPE_p_std__numeric_limitsT_double_t swig_types[155]
#define SWIGTYPE_p_std__numeric_limitsT_float_t swig_types[156]
#define SWIGTYPE_p_std__numeric_limitsT_int_t swig_types[157]
#define SWIGTYPE_p_std__numeric_limitsT_long_long_t swig_types[158]
#define SWIGTYPE_p_std__numeric_limitsT_long_t swig_types[159]
#define SWIGTYPE_p_std__numeric_limitsT_short_t swig_types[160]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t swig_types[161]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t swig_types[162]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t swig_types[163]
#define SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t swig_types[164]
#define SWIGTYPE_p_std__slice swig_types[165]
#define SWIGTYPE_p_std__slice_arrayT_float_t swig_types[166]
#define SWIGTYPE_p_std__string swig_types[167]
#define SWIGTYPE_p_std__valarrayT_float_t swig_types[168]
#define SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t swig_types[169]
#define SWIGTYPE_p_std__vectorT_Filters__BiquadTransposedTypeII_t swig_types[170]
#define SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t swig_types[171]
#define SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_t swig_types[172]
#define SWIGTYPE_p_std__vectorT_SampleType_t swig_types[173]
#define SWIGTYPE_p_std__vectorT_double_t swig_types[174]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[175]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[176]
#define SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t swig_types[177]
#define SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t swig_types[178]
#define SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t swig_types[179]
#define SWIGTYPE_p_std__vectorT_long_long_t swig_types[180]
#define SWIGTYPE_p_std__vectorT_short_t swig_types[181]
#define SWIGTYPE_p_std__vectorT_signed_char_t swig_types[182]
#define SWIGTYPE_p_std__vectorT_size_t_t swig_types[183]
#define SWIGTYPE_p_std__vectorT_unsigned_char_t swig_types[184]
#define SWIGTYPE_p_std__vectorT_unsigned_int_t swig_types[185]
#define SWIGTYPE_p_std__vectorT_unsigned_long_long_t swig_types[186]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[187]
#define SWIGTYPE_p_std__vector_iteratorT_double_t swig_types[188]
#define SWIGTYPE_p_std__vector_iteratorT_float_t swig_types[189]
#define SWIGTYPE_p_std__vector_iteratorT_int_t swig_types[190]
#define SWIGTYPE_p_std__vector_iteratorT_kfr__biquad_paramsT_SampleType_t_t swig_types[191]
#define SWIGTYPE_p_std__vector_iteratorT_kfr__complexT_double_t_t swig_types[192]
#define SWIGTYPE_p_std__vector_iteratorT_kfr__complexT_float_t_t swig_types[193]
#define SWIGTYPE_p_std__vector_iteratorT_long_long_t swig_types[194]
#define SWIGTYPE_p_std__vector_iteratorT_short_t swig_types[195]
#define SWIGTYPE_p_std__vector_iteratorT_signed_char_t swig_types[196]
#define SWIGTYPE_p_std__vector_iteratorT_unsigned_char_t swig_types[197]
#define SWIGTYPE_p_std__vector_iteratorT_unsigned_int_t swig_types[198]
#define SWIGTYPE_p_std__vector_iteratorT_unsigned_long_long_t swig_types[199]
#define SWIGTYPE_p_std__vector_iteratorT_unsigned_short_t swig_types[200]
#define SWIGTYPE_p_subtypeT_SampleType_t swig_types[201]
#define SWIGTYPE_p_unsigned_char swig_types[202]
#define SWIGTYPE_p_unsigned_int swig_types[203]
#define SWIGTYPE_p_unsigned_long swig_types[204]
#define SWIGTYPE_p_unsigned_long_long swig_types[205]
#define SWIGTYPE_p_unsigned_short swig_types[206]
static swig_type_info *swig_types[208];
static swig_module_info swig_module = {swig_types, 207, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "kfr2d"
#define SWIG_init      luaopen_kfr2d
#define SWIG_init_user luaopen_kfr2d_user

#define SWIG_LUACODE   luaopen_kfr2d_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}



typedef double SampleType;

#include <cmath>
#include <vector>
#include <complex>
#include <iostream>
#include <random> 

#include <kfr/kfr.h>
#include <kfr/dft.hpp>
#include <kfr/io.hpp>
#include <kfr/math.hpp>
#include "kfrcore.hpp"

#include "KfrDSP/KfrDsp.hpp"
#include "IIRFilters.hpp"

using namespace KfrDSP1;
using namespace Filters;


#include <stdint.h>		// Use the C99 official header


#include <complex>


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include <complex>
#include <valarray>
#include <fenv.h>


#include <valarray>
#include <algorithm>

SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____add____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self + b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____sub____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self - b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____div____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self / b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____mul____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self * b; }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_0(std::complex< float > *self,std::complex< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< float > std_complex_Sl_float_Sg____pow____SWIG_1(std::complex< float > *self,float const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_float_Sg____eq____SWIG(std::complex< float > *self,std::complex< float > const &b){ return *self == b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____add____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self + b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____sub____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self - b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____div____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self / b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____mul____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self * b; }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_0(std::complex< double > *self,std::complex< double > const &b){ return std::pow(*self,b); }
SWIGINTERN std::complex< double > std_complex_Sl_double_Sg____pow____SWIG_1(std::complex< double > *self,double const &b){ return std::pow(*self,b); }
SWIGINTERN bool std_complex_Sl_double_Sg____eq____SWIG(std::complex< double > *self,std::complex< double > const &b){ return *self == b; }
SWIGINTERN float std_valarray_Sl_float_Sg____getitem____SWIG_0(std::valarray< float > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_0(std::valarray< float > *self,size_t i,float const &v){ (*self)[i-1] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____getitem____SWIG_1(std::valarray< float > *self,std::gslice const &i){ return (*self)[i]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_1(std::valarray< float > *self,std::gslice const &i,float const &v){ (*self)[i] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____getitem____SWIG_2(std::valarray< float > *self,std::slice const &i){ return (*self)[i]; }
SWIGINTERN void std_valarray_Sl_float_Sg____setitem____SWIG_2(std::valarray< float > *self,std::slice const &i,float const &v){ (*self)[i] = v; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____add____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self + b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____sub____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self - b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____mul____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self * b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____div____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return *self / b; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____unm____SWIG(std::valarray< float > *self,std::valarray< float > const &b){ return -*self; }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____pow____SWIG_0(std::valarray< float > *self,std::valarray< float > const &b){ return std::pow(*self,b); }
SWIGINTERN std::valarray< float > std_valarray_Sl_float_Sg____pow____SWIG_1(std::valarray< float > *self,float const &b){ return std::pow(*self,b); }

#include <limits>



    typedef float f32;
    typedef double f64;
    typedef signed char i8;
    typedef unsigned char u8;
    typedef signed short i16;
    typedef unsigned short u16;
    typedef signed int i32;
    typedef unsigned int u32;
    typedef signed long ilong;
    typedef unsigned long ulong;
    typedef signed long long i64;
    typedef unsigned long long u64;
    
    
    
    
    template<typename T> T abs(const T& x) { return std::abs(x); }
    template<typename T> T fabs(const T& x) { return std::fabs(x); }
    template<typename T> T acos(const T& x) { return std::acos(x); }
    template<typename T> T acosh(const T& x) { return std::acosh(x); }
    template<typename T> T asinh(const T& x) { return std::asinh(x); }
    template<typename T> T asin(const T& x) { return std::asinh(x); }
    template<typename T> T atan(const T& x) { return std::atan(x); }
    template<typename T> T atan2(const T& x,const T& y) { return std::atan2(x,y); }
    template<typename T> T atanh(const T& x) { return std::atanh(x); }
    template<typename T> T cbrt(const T& x) { return std::cbrt(x); }
    template<typename T> T ceil(const T& x) { return std::ceil(x); }    
    template<typename T> T copysign(const T& x, const T& y) { return std::copysign(x,y); }
    template<typename T> T cos(const T& x) { return std::cos(x); }
    template<typename T> T cosh(const T& x) { return std::cosh(x); }
    template<typename T> T erf(const T& x) { return std::erf(x); }
    template<typename T> T erfc(const T& x) { return std::erfc(x); }
    template<typename T> T exp(const T& x) { return std::exp(x); }
    template<typename T> T exp2(const T& x) { return std::exp2(x); }
    template<typename T> T expm1(const T& x) { return std::expm1(x); }
    template<typename T> T fdim(const T & x, const T & y) { return std::fdim(x,y); }
    template<typename T> T floor(const T & x) { return std::floor(x); }
    template<typename T> T fma(const T & x, const T & y, const T& z) { return std::fma(x,y,z); }
    template<typename T> T fmax(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmin(const T & x, const T & y) { return std::fmax(x,y); }
    template<typename T> T fmod(const T & x, const T & y) { return std::fmod(x,y); }
    template<typename T> int fpclassify(const T & x) { return std::fpclassify(x); }
    template<typename T> T hypot(const T & x, const T & y) { return std::hypot(x,y); }
    template<typename T> int ilogb(const T & x) { return std::ilogb(x); }
    template<typename T> bool isfinite(const T & x) { return std::isfinite(x); }
    template<typename T> bool isgreater(const T & x, const T & y) { return std::isgreater(x,y); }
    template<typename T> bool isgreaterequal(const T & x, const T & y) { return std::isgreaterequal(x,y); }
    template<typename T> bool isinf(const T & x) { return std::isinf(x); }
    template<typename T> bool isless(const T & x, const T & y) { return std::isless(x,y); }
    template<typename T> bool islessequal(const T & x, const T & y) { return std::islessequal(x,y); }
    template<typename T> bool islessgreater(const T & x, const T & y) { return std::islessgreater(x,y); }
    template<typename T> bool isnan(const T & x) { return std::isnan(x); }
    template<typename T> bool isnormal(const T & x) { return std::isnormal(x); }
    template<typename T> bool isunordered(const T & x, const T& y) { return std::isunordered(x,y); }
    template<typename T> T ldexp(const T & x, int exp) { return std::ldexp(x,exp); }
    template<typename T> T lgamma(const T & x) { return std::lgamma(x); }
    template<typename T> T llrint(const T & x) { return std::llrint(x); }
    template<typename T> T llround(const T & x) { return std::llround(x); }
    template<typename T> T log(const T & x) { return std::log(x); }
    template<typename T> T log10(const T & x) { return std::log10(x); }
    template<typename T> T log1p(const T & x) { return std::log1p(x); }
    template<typename T> T log2(const T & x) { return std::log2(x); }
    template<typename T> T logb(const T & x) { return std::logb(x); }
    template<typename T> T lrint(const T & x) { return std::lrint(x); }
    template<typename T> T lround(const T & x) { return std::lround(x); }
    template<typename T> T nan(const char *tagp) { return std::nan(tagp);}
    template<typename T> T nanf(const char *tagp) { return std::nanf(tagp);}
    template<typename T> T nanl(const char *tagp) { return std::nanl(tagp);}
    template<typename T> T nearbyint(const T &x) { return std::nearbyint(x); }
    template<typename T> T nextafter(const T & x, const T & y) { return std::nextafter(x,y); }
    template<typename T> T nexttoward(const T & x, const T & y) { return std::nexttoward(x,y); }
    template<typename T> T pow(const T & b, const T & e) { return std::pow(b,e); }
    template<typename T> T remainder(const T & n, const T & d) { return std::remainder(n,d); }
    template<typename T> T rint(const T& x) { return std::rint(x); }
    template<typename T> T round(const T& x) { return std::round(x); }
    template<typename T> T scalbln(const T& x, long int n) { return std::scalbln(x,n);}
    template<typename T> T scalbn(const T& x, int n) { return std::scalbln(x,n);}
    template<typename T> bool signbit(const T & x) { return signbit(x); }
    template<typename T> T sin(const T& x) { return std::sin(x); }
    template<typename T> T sinh(const T& x) { return std::sinh(x); }    
    template<typename T> T sqrt(const T& x) { return std::sqrt(x); }
    template<typename T> T square(const T& x) { return x*x; }
    template<typename T> T cube(const T& x) { return x*x*x; }
    template<typename T> T tan(const T& x) { return std::tan(x); }
    template<typename T> T tanh(const T& x) { return std::tanh(x); }        
    template<typename T> T tgamma(const T& x) { return std::tgamma(x); }    
    template<typename T> T trunc(const T& x) { return std::trunc(x); }
    double Huge() { return HUGE_VAL; }
    float Hugef() { return HUGE_VALF; }
    double Infinity() { return INFINITY; }
    double NaN() { return NAN; }

    


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <list>


  namespace std {
    template<typename T>
        struct list_iterator 
        {
            typename std::list<T>::iterator _iter;
            std::list<T> _list;;

            list_iterator(const std::list<T> & l, const typename std::list<T>::iterator & i) {
                _list = l;
                _iter = i;
            }

            void next() { if(_iter != _list.end()) _iter++; }
            void prev() { if(_iter != _list.begin()) _iter--; }
            T& get() { return *_iter;}

            //void insert(const Data& value) { _map.insert(_iter,value); }
            //bool find(const Key& key) { return _map.find(key) != _map.end(); }   
            
        };
    }


#include <map>


  namespace std {
    template<typename Key,  typename Data>
        struct map_iterator 
        {
            typename std::map<Key,Data>::iterator _iter;
            std::map<Key,Data> _map;

            map_iterator(const std::map<Key,Data> & m, const typename std::map<Key,Data>::iterator & i) {
                _map = m;
                _iter = i;
            }

            void next() { if(_iter != _map.end()) _iter++; }
            void prev() { if(_iter != _map.begin()) _iter--; }
            Data& get() { return *_iter;}

            void insert(const Data& value) { _map.insert(_iter,value); }
            bool find(const Key& key) { return _map.find(key) != _map.end(); }   
            
        };
    }


    namespace Ops 
    {
        /*
        template<typename T> kfr::univector<T> csin(const kfr::univector<kfr::complex<T>> & v) { return kfr::csin(v); }
        template<typename T> kfr::univector<T> ccos(const kfr::univector<kfr::complex<T>> & v) { return kfr::ccos(v); }
        //template<typename T> kfr::univector<T> ctan(const kfr::univector<kfr::complex<T>> & v) { return kfr::ctan(v); }

        template<typename T> kfr::univector<T> csinh(const kfr::univector<kfr::complex<T>> & v) { return kfr::csinh(v); }
        template<typename T> kfr::univector<T> ccosh(const kfr::univector<kfr::complex<T>> & v) { return kfr::ccosh(v); }
        //template<typename T> kfr::univector<T> ctanh(const kfr::univector<kfr::complex<T>> & v) { return kfr::ctanh(v); }

        template<typename T> kfr::univector<T> cabssqr(const kfr::univector<kfr::complex<T>> & v) { return kfr::cabssqr(v); }
        template<typename T> kfr::univector<T> cabs(const kfr::univector<kfr::complex<T>> & v) { return kfr::cabs(v); }
        template<typename T> kfr::univector<T> carg(const kfr::univector<kfr::complex<T>> & v) { return kfr::carg(v); }
        
        template<typename T> kfr::univector<T> clog(const kfr::univector<kfr::complex<T>> & v) { return kfr::clog(v); }
        template<typename T> kfr::univector<T> clog2(const kfr::univector<kfr::complex<T>> & v) { return kfr::clog2(v); }
        template<typename T> kfr::univector<T> clog10(const kfr::univector<kfr::complex<T>> & v) { return kfr::clog10(v); }

        template<typename T> kfr::univector<T> cexp(const kfr::univector<kfr::complex<T>> & v) { return kfr::cexp(v); }
        template<typename T> kfr::univector<T> cexp2(const kfr::univector<kfr::complex<T>> & v) { return kfr::cexp2(v); }
        template<typename T> kfr::univector<T> cexp10(const kfr::univector<kfr::complex<T>> & v) { return kfr::cexp10(v); }

        template<typename T> kfr::univector<T> polar(const kfr::univector<kfr::complex<T>> & v) { return kfr::polar(v); }
        template<typename T> kfr::univector<T> cartesian(const kfr::univector<kfr::complex<T>> & v) { return kfr::cartesian(v); }
        //template<typename T> kfr::univector<T> cabsdup(const kfr::univector<kfr::complex<T>> & v) { return kfr::cabsdup(v); }

        template<typename T> kfr::univector<T> csqrt(const kfr::univector<kfr::complex<T>> & v) { return kfr::csqrt(v); }
        template<typename T> kfr::univector<T> csqr(const kfr::univector<kfr::complex<T>> & v) { return kfr::csqr(v); }
        */
        template<typename T> kfr::complex<T> csin(const kfr::complex<T> & v) { return kfr::csin(v); }
        template<typename T> kfr::complex<T> ccos(const kfr::complex<T> & v) { return kfr::ccos(v); }
        //template<typename T> kfr::univector<T> ctan(const kfr::univector<kfr::complex<T>> & v) { return kfr::ctan(v); }

        template<typename T> kfr::complex<T> csinh(const kfr::complex<T> & v) { return kfr::csinh(v); }
        template<typename T> kfr::complex<T> ccosh(const kfr::complex<T> & v) { return kfr::ccosh(v); }
        //template<typename T> kfr::univector<T> ctanh(const kfr::univector<kfr::complex<T>> & v) { return kfr::ctanh(v); }

        template<typename T> kfr::complex<T> cabssqr(const kfr::complex<T> & v) { return kfr::cabssqr(v); }
        template<typename T> kfr::complex<T> cabs(const kfr::complex<T> & v) { return kfr::cabs(v); }
        template<typename T> kfr::complex<T> carg(const kfr::complex<T> & v) { return kfr::carg(v); }
        
        template<typename T> kfr::complex<T> clog(const kfr::complex<T> & v) { return kfr::clog(v); }
        template<typename T> kfr::complex<T> clog2(const kfr::complex<T> & v) { return kfr::clog2(v); }
        template<typename T> kfr::complex<T> clog10(const kfr::complex<T> & v) { return kfr::clog10(v); }

        template<typename T> kfr::complex<T> cexp(const kfr::complex<T> & v) { return kfr::cexp(v); }
        template<typename T> kfr::complex<T> cexp2(const kfr::complex<T> & v) { return kfr::cexp2(v); }
        template<typename T> kfr::complex<T> cexp10(const kfr::complex<T> & v) { return kfr::cexp10(v); }

        template<typename T> kfr::complex<T> polar(const kfr::complex<T> & v) { return kfr::polar(v); }
        template<typename T> kfr::complex<T> cartesian(const kfr::complex<T> & v) { return kfr::cartesian(v); }
        //template<typename T> kfr::univector<T> cabsdup(const kfr::univector<kfr::complex<T>> & v) { return kfr::cabsdup(v); }

        template<typename T> kfr::complex<T> csqrt(const kfr::complex<T> & v) { return kfr::csqrt(v); }
        template<typename T> kfr::complex<T> csqr(const kfr::complex<T> & v) { return kfr::csqr(v); }
    }

SWIGINTERN float std_vector_Sl_f32_Sg____getitem__SWIG(std::vector< f32 > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_f32_Sg____setitem__SWIG(std::vector< f32 > *self,size_t i,float val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_f32_Sg__begin__SWIG(std::vector< f32 > *self){
                std::vector_iterator<float> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< float > std_vector_Sl_f32_Sg__end__SWIG(std::vector< f32 > *self){
                std::vector_iterator<float> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_f32_Sg__erase__SWIG_0(std::vector< f32 > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_f32_Sg__erase__SWIG_1(std::vector< f32 > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN double std_vector_Sl_f64_Sg____getitem__SWIG(std::vector< f64 > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_f64_Sg____setitem__SWIG(std::vector< f64 > *self,size_t i,double val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_f64_Sg__begin__SWIG(std::vector< f64 > *self){
                std::vector_iterator<double> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< double > std_vector_Sl_f64_Sg__end__SWIG(std::vector< f64 > *self){
                std::vector_iterator<double> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_f64_Sg__erase__SWIG_0(std::vector< f64 > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_f64_Sg__erase__SWIG_1(std::vector< f64 > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN signed char std_vector_Sl_i8_Sg____getitem__SWIG(std::vector< i8 > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_i8_Sg____setitem__SWIG(std::vector< i8 > *self,size_t i,signed char val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< signed char > std_vector_Sl_i8_Sg__begin__SWIG(std::vector< i8 > *self){
                std::vector_iterator<signed char> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< signed char > std_vector_Sl_i8_Sg__end__SWIG(std::vector< i8 > *self){
                std::vector_iterator<signed char> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_i8_Sg__erase__SWIG_0(std::vector< i8 > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_i8_Sg__erase__SWIG_1(std::vector< i8 > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN unsigned char std_vector_Sl_u8_Sg____getitem__SWIG(std::vector< u8 > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_u8_Sg____setitem__SWIG(std::vector< u8 > *self,size_t i,unsigned char val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< unsigned char > std_vector_Sl_u8_Sg__begin__SWIG(std::vector< u8 > *self){
                std::vector_iterator<unsigned char> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< unsigned char > std_vector_Sl_u8_Sg__end__SWIG(std::vector< u8 > *self){
                std::vector_iterator<unsigned char> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_u8_Sg__erase__SWIG_0(std::vector< u8 > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_u8_Sg__erase__SWIG_1(std::vector< u8 > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN short std_vector_Sl_i16_Sg____getitem__SWIG(std::vector< i16 > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_i16_Sg____setitem__SWIG(std::vector< i16 > *self,size_t i,short val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< short > std_vector_Sl_i16_Sg__begin__SWIG(std::vector< i16 > *self){
                std::vector_iterator<short> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< short > std_vector_Sl_i16_Sg__end__SWIG(std::vector< i16 > *self){
                std::vector_iterator<short> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_i16_Sg__erase__SWIG_0(std::vector< i16 > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_i16_Sg__erase__SWIG_1(std::vector< i16 > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN unsigned short std_vector_Sl_u16_Sg____getitem__SWIG(std::vector< u16 > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_u16_Sg____setitem__SWIG(std::vector< u16 > *self,size_t i,unsigned short val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< unsigned short > std_vector_Sl_u16_Sg__begin__SWIG(std::vector< u16 > *self){
                std::vector_iterator<unsigned short> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< unsigned short > std_vector_Sl_u16_Sg__end__SWIG(std::vector< u16 > *self){
                std::vector_iterator<unsigned short> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_u16_Sg__erase__SWIG_0(std::vector< u16 > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_u16_Sg__erase__SWIG_1(std::vector< u16 > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN int std_vector_Sl_i32_Sg____getitem__SWIG(std::vector< i32 > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_i32_Sg____setitem__SWIG(std::vector< i32 > *self,size_t i,int val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< int > std_vector_Sl_i32_Sg__begin__SWIG(std::vector< i32 > *self){
                std::vector_iterator<int> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< int > std_vector_Sl_i32_Sg__end__SWIG(std::vector< i32 > *self){
                std::vector_iterator<int> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_i32_Sg__erase__SWIG_0(std::vector< i32 > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_i32_Sg__erase__SWIG_1(std::vector< i32 > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN unsigned int std_vector_Sl_u32_Sg____getitem__SWIG(std::vector< u32 > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_u32_Sg____setitem__SWIG(std::vector< u32 > *self,size_t i,unsigned int val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< unsigned int > std_vector_Sl_u32_Sg__begin__SWIG(std::vector< u32 > *self){
                std::vector_iterator<unsigned int> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< unsigned int > std_vector_Sl_u32_Sg__end__SWIG(std::vector< u32 > *self){
                std::vector_iterator<unsigned int> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_u32_Sg__erase__SWIG_0(std::vector< u32 > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_u32_Sg__erase__SWIG_1(std::vector< u32 > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN long long std_vector_Sl_i64_Sg____getitem__SWIG(std::vector< i64 > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_i64_Sg____setitem__SWIG(std::vector< i64 > *self,size_t i,long long val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< long long > std_vector_Sl_i64_Sg__begin__SWIG(std::vector< i64 > *self){
                std::vector_iterator<long long> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< long long > std_vector_Sl_i64_Sg__end__SWIG(std::vector< i64 > *self){
                std::vector_iterator<long long> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_i64_Sg__erase__SWIG_0(std::vector< i64 > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_i64_Sg__erase__SWIG_1(std::vector< i64 > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN unsigned long long std_vector_Sl_u64_Sg____getitem__SWIG(std::vector< u64 > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_u64_Sg____setitem__SWIG(std::vector< u64 > *self,size_t i,unsigned long long val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< unsigned long long > std_vector_Sl_u64_Sg__begin__SWIG(std::vector< u64 > *self){
                std::vector_iterator<unsigned long long> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< unsigned long long > std_vector_Sl_u64_Sg__end__SWIG(std::vector< u64 > *self){
                std::vector_iterator<unsigned long long> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_u64_Sg__erase__SWIG_0(std::vector< u64 > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_u64_Sg__erase__SWIG_1(std::vector< u64 > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN kfr::complex< float > std_vector_Sl_kfr_complex_Sl_float_Sg__Sg____getitem__SWIG(std::vector< kfr::complex< float > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_kfr_complex_Sl_float_Sg__Sg____setitem__SWIG(std::vector< kfr::complex< float > > *self,size_t i,kfr::complex< float > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< kfr::complex< float > > std_vector_Sl_kfr_complex_Sl_float_Sg__Sg__begin__SWIG(std::vector< kfr::complex< float > > *self){
                std::vector_iterator<kfr::complex< float >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< kfr::complex< float > > std_vector_Sl_kfr_complex_Sl_float_Sg__Sg__end__SWIG(std::vector< kfr::complex< float > > *self){
                std::vector_iterator<kfr::complex< float >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_kfr_complex_Sl_float_Sg__Sg__erase__SWIG_0(std::vector< kfr::complex< float > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_kfr_complex_Sl_float_Sg__Sg__erase__SWIG_1(std::vector< kfr::complex< float > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }
SWIGINTERN kfr::complex< double > std_vector_Sl_kfr_complex_Sl_double_Sg__Sg____getitem__SWIG(std::vector< kfr::complex< double > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_kfr_complex_Sl_double_Sg__Sg____setitem__SWIG(std::vector< kfr::complex< double > > *self,size_t i,kfr::complex< double > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< kfr::complex< double > > std_vector_Sl_kfr_complex_Sl_double_Sg__Sg__begin__SWIG(std::vector< kfr::complex< double > > *self){
                std::vector_iterator<kfr::complex< double >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< kfr::complex< double > > std_vector_Sl_kfr_complex_Sl_double_Sg__Sg__end__SWIG(std::vector< kfr::complex< double > > *self){
                std::vector_iterator<kfr::complex< double >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_kfr_complex_Sl_double_Sg__Sg__erase__SWIG_0(std::vector< kfr::complex< double > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_kfr_complex_Sl_double_Sg__Sg__erase__SWIG_1(std::vector< kfr::complex< double > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }


    namespace Ops 
    {
        kfr::univector2d<SampleType> deinterleave(const kfr::univector<SampleType> & v) {
            kfr::univector2d<SampleType> r(2);
            r[0].resize(v.size()/2);
            r[1].resize(v.size()/2);
            for(size_t i = 0; i < v.size()/2; i++)
            {
                r[0][i] = v[i*2];
                r[1][i] = v[i*2+1];
            }
            return r;
        }
        kfr::univector<SampleType> interleave(const kfr::univector2d<SampleType> & v) {
            kfr::univector<SampleType> r(v[0].size()*2);
            for(size_t i = 0; i < v[0].size(); i++)
            {
                r[2*i]   = v[0][i];
                r[2*i+1] = v[1][i];
            }
            return r;
        }
        kfr::univector<SampleType> to_univector(const std::vector<SampleType> & v) {
            kfr::univector<SampleType> r(v.size());
            std::copy(v.begin(),v.end(),r.begin());
            return r;
        }

        std::vector<SampleType> to_vector(const kfr::univector<SampleType> & v) {
            std::vector<SampleType> r(v.size());
            std::copy(v.begin(),v.end(),r.begin());
            return r;
        }

        template<typename X> X rol(X x, X y) { return kfr::rol(x,y); }
        template<typename X> X ror(X x, X y) { return kfr::ror(x,y); }
        template<typename X> X shl(X x, X y) { return kfr::shl(x,y); }
        template<typename X> X shr(X x, X y) { return kfr::rol(x,y); }

        template<typename T> kfr::univector<T> bitwiseand(const kfr::univector<T> & a, const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::bitwiseand(a,b); return r; }
        template<typename T> kfr::univector<T> bitwiseandnot(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::bitwiseandnot(a,b); return r; }
        template<typename T> kfr::univector<T> bitwisenot(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::bitwisenot(a); return r; }
        template<typename T> kfr::univector<T> bitwiseor(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::bitwiseor(a,b); return r; }
        template<typename T> kfr::univector<T> bitwisexor(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::bitwisexor(a,b); return r; }

        template<typename T>    
        kfr::univector<T> linspace(T start, T stop, size_t size, bool endpoint=false,bool trunc=false)
        {   
            kfr::univector<T> r; 
            r = kfr::linspace(start,stop,size,endpoint,trunc); 
            return r; 
        }

        template<typename T>    
        kfr::univector<T> pad(const kfr::univector<T> & in, const T & fill_value = T(0))
        { 
            kfr::univector<T> r; 
            r = kfr::padded(in,fill_value); 
            return r; 
        }

        template<typename T>    
        kfr::univector<T> slice(const kfr::univector<T> & v, size_t start, size_t end=kfr::max_size_t)
        {   
            kfr::univector<T> r;        
            r = v.slice(start,end);
            return r;
        }

        template<typename T>    
        kfr::univector<T> truncate(const kfr::univector<T> & v, size_t size)
        {   
            kfr::univector<T> r; 
            r = v.truncate();
            return r;
        }

        template<typename T>    
        kfr::univector<T> reverse(const kfr::univector<T> & v)
        {   
            kfr::univector<T> r;         
            r = kfr::reverse(v);
            return r;
        }


        template<typename T>    
        T& ringbuf_read(kfr::univector<T> &v,size_t & cursor, T& value) { v.ringbuf_read(cursor,value); return value; }

        template<typename T>    
        void ringbuf_write(kfr::univector<T> &v, size_t & cursor, T& value) { v.ringbuf_write(cursor,value); }
        
        template<typename T> kfr::univector<T> abs(const kfr::univector<T>& v) { return kfr::abs(v); }
        template<typename T> kfr::univector<T> add(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::add(a,b); return r; }
        template<typename T> kfr::univector<T> add(const kfr::univector<T> & a,const T & b) { kfr::univector<T> r; r = kfr::add(a,b); return r; }
        template<typename T> kfr::univector<T> absmax(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::absmax(a,b); return r; }
        template<typename T> kfr::univector<T> absmax(const kfr::univector<T> & a,const T & b) { kfr::univector<T> r; r = kfr::absmax(a,b); return r; }
        template<typename T> kfr::univector<T> absmin(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::absmin(a,b); return r; }
        template<typename T> kfr::univector<T> absmin(const kfr::univector<T> & a,const T & b) { kfr::univector<T> r; r = kfr::absmin(a,b); return r; }    
        template<typename T> kfr::univector<T> clamp(const kfr::univector<T> & a,const kfr::univector<T> & lo, const kfr::univector<T> &hi) { kfr::univector<T> r; r = kfr::clamp(a,lo,hi); return r; }
        template<typename T> kfr::univector<T> clamp(const kfr::univector<T> & a,const T& lo, const T &hi) { kfr::univector<T> r; r = kfr::clamp(a,lo,hi); return r; }
        template<typename T> kfr::univector<T> cube(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::cub(a); return r; }
        template<typename T> kfr::univector<T> div(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::div(a,b); return r; }    
        template<typename T> kfr::univector<T> fmadd(const kfr::univector<T> & a,const kfr::univector<T> & y, const kfr::univector<T> & z) { kfr::univector<T> r; r = kfr::fmadd(a,y,z); return r; }
        template<typename T> kfr::univector<T> fmsub(const kfr::univector<T> & a,const kfr::univector<T> & y, const kfr::univector<T> & z) { kfr::univector<T> r; r = kfr::fmsub(a,y,z); return r; }    
        template<typename T> kfr::univector<T> max(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::max(a,b); return r; }
        template<typename T> kfr::univector<T> max(const kfr::univector<T> & a, const T & b) { kfr::univector<T> r; r = kfr::max(a,b); return r; }
        template<typename T> kfr::univector<T> min(const kfr::univector<T> & a, const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::min(a,b); return r; }
        template<typename T> kfr::univector<T> min(const kfr::univector<T> & a, const T & b) { kfr::univector<T> r; r = kfr::min(a,b); return r; }
        template<typename T> kfr::univector<T> mix(const kfr::univector<T> & a, const T& c, const kfr::univector<T> & y) { kfr::univector<T> r; r = kfr::mix(c,a,y); return r; }
        template<typename T> kfr::univector<T> mixs(const kfr::univector<T> & a, const T& c, const kfr::univector<T> & y) { kfr::univector<T> r; r = kfr::mixs(c,a,y); return r; }
        template<typename T> kfr::univector<T> mul(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::mul(a,b); return r; }
        template<typename T> kfr::univector<T> mul(const kfr::univector<T> & a, const T & b) { kfr::univector<T> r; r = kfr::mul(a,b); return r; }
        template<typename T> kfr::univector<T> neg(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::neg(a); return r; }        
        template<typename T> kfr::univector<T> sqr(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::sqr(a); return r; }
        template<typename T> kfr::univector<T> sqrt(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::sqrt(a); return r; }
        template<typename T> kfr::univector<T> exp(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::exp(a); return r; }
        template<typename T> kfr::univector<T> exp10(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::exp10(a); return r; }
        template<typename T> kfr::univector<T> exp2(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::exp2(a); return r; }
        template<typename T> kfr::univector<T> exp_fmadd(const kfr::univector<T> & a,const kfr::univector<T> & y, const kfr::univector<T> & z) { kfr::univector<T> r; r = kfr::exp_fmadd(a,y,z); return r; }
        template<typename T> kfr::univector<T> log(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::log(a); return r; }
        template<typename T> kfr::univector<T> log10(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::log10(a); return r; }
        template<typename T> kfr::univector<T> log2(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::log2(a); return r; }
        template<typename T> kfr::univector<T> log_fmadd(const kfr::univector<T> & a,const kfr::univector<T> & y, const kfr::univector<T> & z) { kfr::univector<T> r; r = kfr::log_fmadd(a,y,z); return r; }
        template<typename T> kfr::univector<T> logb(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::logb(a); return r; }
        template<typename T> kfr::univector<T> logm(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::logm(a,b); return r; }
        template<typename T> kfr::univector<T> logn(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::logn(a,b); return r; }
        template<typename T> kfr::univector<T> pow(const kfr::univector<T> & a,const T & y) { kfr::univector<T> r; r = kfr::pow(a,y); return r; }
        template<typename T> kfr::univector<T> pow(const kfr::univector<T> & a,const kfr::univector<T> & y) { kfr::univector<T> r; r = kfr::pow(a,y); return r; }
        template<typename T> kfr::univector<T> root(const kfr::univector<T> & a,const kfr::univector<T> & y) { kfr::univector<T> r; r = kfr::root(a,y); return r; }
        template<typename T> kfr::univector<T> floor(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::floor(a); return r; }        
        template<typename T> kfr::univector<T> acos(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::acos(a); return r; }
        template<typename T> kfr::univector<T> asin(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::asin(a); return r; }
        template<typename T> kfr::univector<T> atan(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::atan(a); return r; }
        template<typename T> kfr::univector<T> atan2(const kfr::univector<T> & a,const T & b) { kfr::univector<T> r; r = kfr::atan2(a,b); return r; }
        template<typename T> kfr::univector<T> atan2(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::atan2(a,b); return r; }
        template<typename T> kfr::univector<T> atan2deg(const kfr::univector<T> & a,const T & b) { kfr::univector<T> r; r = kfr::atan2deg(a,b); return r; }
        template<typename T> kfr::univector<T> atan2deg(const kfr::univector<T> & a,const kfr::univector<T> & b) { kfr::univector<T> r; r = kfr::atan2deg(a,b); return r; }
        template<typename T> kfr::univector<T> atandeg(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::atandeg(a); return r; }
        template<typename T> kfr::univector<T> cos(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::cos(a); return r; }
        template<typename T> kfr::univector<T> sin(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::sin(a); return r; }    
        template<typename T> kfr::univector<T> cosdeg(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::cosdeg(a); return r; }        
        template<typename T> kfr::univector<T> sindeg(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::cosdeg(a); return r; }    
        template<typename T> kfr::univector<T> sinc(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::sinc(a); return r; }
        template<typename T> kfr::univector<T> tan(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::tan(a); return r; }        
        template<typename T> kfr::univector<T> cosh(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::cosh(a); return r; }
        template<typename T> kfr::univector<T> coth(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::coth(a); return r; }    
        template<typename T> kfr::univector<T> sinh(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::sinh(a); return r; }    
        template<typename T> kfr::univector<T> tanh(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::tanh(a); return r; }
        template<typename T> kfr::univector<T> gamma(const kfr::univector<T> & a) { kfr::univector<T> r; r = kfr::gamma(a); return r; }

        template<typename T> T absmaxof(const kfr::univector<T> & a) { return kfr::absmaxof(a); }
        template<typename T> T absminof(const kfr::univector<T> & a) { return kfr::absminof(a); }
        template<typename T> T dot(const kfr::univector<T> & a,const kfr::univector<T> & b) { return kfr::dotproduct(a,b); }
        template<typename T> T maxof(const kfr::univector<T> & a) { return kfr::maxof(a); }
        template<typename T> T minof(const kfr::univector<T> & a) { return kfr::minof(a); }
        template<typename T> T mean(const kfr::univector<T> & a) { return kfr::mean(a); }
        template<typename T> T product(const kfr::univector<T> & a) { return kfr::product(a); }
        template<typename T> T rms(const kfr::univector<T> & a) { return kfr::rms(a); }
        template<typename T> T sum(const kfr::univector<T> & a) { return kfr::sum(a); }
        template<typename T> T sumsqr(const kfr::univector<T> & a) { return kfr::sumsqr(a); }

        // doesn't compile
        //template<typename T>    
        //kfr::univector<T> div(const kfr::univector<T> & a,const T b) { kfr::univector<T> r; r = kfr::div<T>(a,b); return r; }

        template<typename T>    
        kfr::univector<T> ipow(const kfr::univector<T> & v, int base) { kfr::univector<T> r; r = kfr::ipow(v,base); return r; }

        template<typename T>    
        T kcos2x(const T s, const T c) {return kfr::cos2x<SampleType>(s,c); }

        template<typename T>    
        T kcos3x(const T & s, const T & c) {return kfr::cos3x(s,c); }

        template<typename T>    
        T ksin2x(const T & s, const T & c) {return kfr::sin2x(s,c); }

        template<typename T>    
        T ksin3x(const T & s, const T & c) {return kfr::sin3x(s,c); }

        template<typename T>    
        kfr::univector<T> cossin(const kfr::univector<T> & v) { kfr::univector<T> r; r = kfr::cossin(v); return r; }

        template<typename T>    
        kfr::univector<T> sincos(const kfr::univector<T> & v) 
        { 
            kfr::univector<T> r; 
            for(size_t i = 0; i < v.size(); i++) r[i] = kfr::sincos(v[i]);
            return r; }

        template<typename T>    
        T kreciprocal(const T & v) { return kfr::reciprocal(v); }

        template<typename T>    
        T rem(const T v,const T b) { return kfr::rem(v,b); }    

        template<typename T>    
        T satadd(const T v,const T y) { return kfr::satadd(v,y); }

        template<typename T>    
        T satsub(const T v,const T  y) { return kfr::satsub(v,y); }

        //? dont know how to make these work yet.
        template<typename T>    
        kfr::univector<T> fastcos(const kfr::univector<T> & v) { 
            kfr::univector<T> r; 
            for(size_t i = 0; i < v.size(); i++) r[i] = kfr::fastcos(v[i]);
            return r; }

        template<typename T>    
        kfr::univector<T> fastcosdeg(const kfr::univector<T> & v) { kfr::univector<T> r; r = kfr::fastcosdeg(v); return r; }

        template<typename T>    
        kfr::univector<T> fastsin(const kfr::univector<T> & v) { kfr::univector<T> r; r = kfr::fastsin(v); return r; }

        template<typename T>    
        kfr::univector<T> fastsindeg(const kfr::univector<T> & v) { kfr::univector<T> r; r = kfr::fastsindeg(v); return r; }        

        template<typename T>    
        kfr::univector<T> coshsinh(const kfr::univector<T> & v) { kfr::univector<T> r; r = kfr::coshsinh(v); return r; }

        template<typename T>    
        kfr::univector<T> sinhcosh(const kfr::univector<T> & v) { kfr::univector<T> r; r = kfr::sinhcosh(v); return r; }

        template<typename T>    
        kfr::univector<T> cossindeg(const kfr::univector<T> & v) { kfr::univector<T> r; r = kfr::cossindeg(v); return r; }    

        template<typename T>    
        kfr::univector<T> sincosdeg(const kfr::univector<T> & v) { kfr::univector<T> r; r = kfr::sincosdeg(v); return r; }    

        // I dont understand the kfr random at all yet
        template<typename T>    
        kfr::univector<T> random(size_t s) 
        {
            std::default_random_engine generator;
            std::uniform_real_distribution<T> distrib(0.0,1.0);
            kfr::univector<T> r(s);    
            for(size_t i = 0; i < s; i++)
                r[i] = distrib(generator);
            return r;
        }   

        template<typename T>    
        kfr::univector<T> random(size_t s, T min, T max) 
        {
            std::default_random_engine generator;
            std::uniform_real_distribution<T> distrib(min,max);
            kfr::univector<T> r(s);    
            for(size_t i = 0; i < s; i++)
                r[i] = distrib(generator);
            return r;
        }  

        template<typename T>
        void plot_save(const kfr::univector<T> & v, const std::string& name="", const std::string& options="") {
                kfr::plot_save(name,v,options);
            }

        template<typename T>    
        void plot_show(const kfr::univector<T> & v, const std::string& name="", const std::string&  options="") {
            kfr::plot_show(name,v,options);
        }
    
        // ?
        //template<typename T> kfr::univector<T> make_univec(const T * data, size_t s) { return kfr::univector<T>(kfr::make_univector<T>(data,s));  }    
    }



    template<typename T>
    struct SampleVector
    {
        std::vector<kfr::univector<T>> samples;
        size_t                         channels;

        SampleVector(size_t channels) {
            samples.resize(channels);
            this->channels = channels;
        }
        
        T& operator()(size_t ch, size_t i) { return samples[ch][i]; }
        
        size_t num_channels() const { return channels; }
        size_t size() const { return samples[0].size(); }
        
        kfr::univector<T> get_channel(size_t channel) { return samples[channel]; }
        void set_channel(size_t channel, kfr::univector<T> & v) { samples[channel] = v; }

        kfr::univector<T> __getitem(size_t i ) { return samples[i]; }
        void __setitem(size_t i, kfr::univector<T> & v) { samples[i] = v; }

    };

    /*
    template<typename T>
    SampleVector<T> deinterleave(size_t channels, kfr::univector<T> & v) {
        SampleVector<T> r(channels);        
        for(size_t i = 0; i < channels; i++) {
            r.samples[i].resize(v.size()/channels)
            for(size_t j = i; j < v.size(); j += channels)
                r[channels][j] = v[j];
        }
        return r;
    }
    template<typename T>
    void interleave(SampleVector<T> & samples, kfr::univector<T> & out) {
        out.resize(samples.channels * samples[0].size());        
        for(size_t i = 0; i < samples.channels; i++)            
            for(size_t j = i; j < samples[i].size(); i+=samples.channels)
                out[j*channels + i] = samples[i][j];
        }
    */
    template<typename T>
    void copy(kfr::univector<T> & dst, std::vector<T> & src) {
        std::copy(src.begin(),src.end(),dst.begin());
    }
    template<typename T>
    void copy(std::vector<T> & dst, kfr::univector<T> & src) {
        std::copy(src.begin(),src.end(),dst.begin());
    }




        template <typename T> T f_note_to_hertz(const T& input) {
            return kfr::note_to_hertz<T>(input);
        }    
        template <typename T> T f_hertz_to_note(const T& input) {
            return kfr::hertz_to_note<T>(input);
        }    
        template <typename T> T f_amp_to_dB(const T& input) {
            return kfr::amp_to_dB<T>(input);
        }    
        template <typename T> T f_dB_to_amp(const T& input) {
            return kfr::dB_to_amp<T>(input);
        }    
        template <typename T> T f_power_to_dB(const T& input) {
            return kfr::power_to_dB<T>(input);
        }    
        template <typename T> T f_dB_to_power(const T& input) {
            return kfr::dB_to_power<T>(input);
        }    
        
        /*
        template<typename T> kfr::complex<T> goertzal(kfr::complex<T> & result, T  omega) {
            kfr::complex<T> r(result);
            kfr::goertzal(r,omega);
            return r;
        }
        */
        

        template <typename T> T waveshaper_hardclip(T & input, double clip_level) 
        {            
            return kfr::waveshaper_hardclip(input,clip_level);
        }
        template <typename T> kfr::univector<T> waveshaper_hardclip(kfr::univector<T> & input, double clip_level) 
        {            
            kfr::univector r(input.size());
            for(size_t i = 0; i < input.size(); i++)
                r[i] = kfr::waveshaper_hardclip(input[i],clip_level);
            return r;
        }

        template <typename T> T waveshaper_tanh(T & input, double sat) 
        {            
            return kfr::waveshaper_tanh(input,sat);
        }
        template <typename T> kfr::univector<T> waveshaper_tanh(kfr::univector<T> & input, double sat) 
        {            
            kfr::univector r(input.size());
            for(size_t i = 0; i < input.size(); i++)
                r[i] = kfr::waveshaper_tanh(input[i],sat);
            return r;
        }

        template <typename T> T waveshaper_saturate_I(T & input, double sat) 
        {            
            return kfr::waveshaper_saturate_I(input,sat);
        }
        template <typename T> kfr::univector<T> waveshaper_saturate_I(kfr::univector<T> & input, double sat) 
        {            
            kfr::univector r(input.size());
            for(size_t i = 0; i < input.size(); i++)
                r[i] = kfr::waveshaper_saturate_I(input[i],sat);
            return r;
        }

        template <typename T> T waveshaper_saturate_II(T & input, double sat) 
        {            
            return kfr::waveshaper_saturate_II(input, sat);
        }
        template <typename T> kfr::univector<T> waveshaper_saturate_II(kfr::univector<T> & input, double sat) 
        {            
            kfr::univector r(input.size());
            for(size_t i = 0; i < input.size(); i++)
                r[i] = kfr::waveshaper_saturate_II(input[i],sat);
            return r;
        }
        /*
        template <typename T> T waveshaper_poly(T & input) 
        {            
            return kfr::waveshaper_poly(input);
        }
        template <typename T> kfr::univector<T> waveshaper_poly(kfr::univector<T> & input) 
        {            
            kfr::univector r(input.size());
            for(size_t i = 0; i < input.size(); i++)
                r[i] = kfr::waveshaper_poly(input[i]);
            return r;
        }
        */



    // needs to return channels and samplerate
    template<typename T>
    kfr::univector<T> wav_load(const char * filename, kfr::audio_format& fmt) {
        DSP::WavReader<T> r(filename);        
        kfr::univector<T> v(r.size());
        r.read(v);
        fmt = r.format();
        return v;
    }
    template<typename T>
    void wav_write(kfr::univector<T> & v, const char * filename, size_t channels, double sample_rate, bool use_w64=false) {
        DSP::WavWriter<T> w(filename,kfr::audio_format{channels,kfr::audio_sample_type::f32,sample_rate,use_w64});
        w.write(v);        
    }
    template<typename T>
    kfr::univector<T> mp3_load(const char * filename) {
        DSP::MP3Reader<T> r(filename);
        kfr::univector<T> v(r.size());
        r.read(v);
        return v;
    }
    template<typename T>
    kfr::univector<T> flac_load(const char * filename) {
        DSP::FlacReader<T> r(filename);
        kfr::univector<T> v(r.size());
        r.read(v);
        return v;
    }

SWIGINTERN kfr::biquad_params< SampleType > std_vector_Sl_kfr_biquad_params_Sl_SampleType_Sg__Sg____getitem__SWIG(std::vector< kfr::biquad_params< SampleType > > *self,size_t i){ return (*self)[i-1]; }
SWIGINTERN void std_vector_Sl_kfr_biquad_params_Sl_SampleType_Sg__Sg____setitem__SWIG(std::vector< kfr::biquad_params< SampleType > > *self,size_t i,kfr::biquad_params< SampleType > val){ (*self)[i-1] = val; }
SWIGINTERN std::vector_iterator< kfr::biquad_params< SampleType > > std_vector_Sl_kfr_biquad_params_Sl_SampleType_Sg__Sg__begin__SWIG(std::vector< kfr::biquad_params< SampleType > > *self){
                std::vector_iterator<kfr::biquad_params< SampleType >> r(*self,self->begin());                
                return r;
            }
SWIGINTERN std::vector_iterator< kfr::biquad_params< SampleType > > std_vector_Sl_kfr_biquad_params_Sl_SampleType_Sg__Sg__end__SWIG(std::vector< kfr::biquad_params< SampleType > > *self){
                std::vector_iterator<kfr::biquad_params< SampleType >> r(*self,self->end());                
                return r;
            }
SWIGINTERN void std_vector_Sl_kfr_biquad_params_Sl_SampleType_Sg__Sg__erase__SWIG_0(std::vector< kfr::biquad_params< SampleType > > *self,size_t i){ self->erase(self->begin()+i-1); }
SWIGINTERN void std_vector_Sl_kfr_biquad_params_Sl_SampleType_Sg__Sg__erase__SWIG_1(std::vector< kfr::biquad_params< SampleType > > *self,size_t i,size_t n){ self->erase(self->begin()+i-1,self->begin()+n-1); }

#include <string.h>

SWIGINTERN SampleType kfr_univector_Sl_SampleType_Sg____getitem____SWIG(kfr::univector< SampleType > *self,size_t i){ assert(i > 0) ; return (*self)[i-1]; }
SWIGINTERN void kfr_univector_Sl_SampleType_Sg____setitem____SWIG(kfr::univector< SampleType > *self,size_t i,SampleType const &val){ assert(i > 0);(*self)[i-1] = val; }
SWIGINTERN kfr::univector< SampleType > kfr_univector_Sl_SampleType_Sg____add____SWIG(kfr::univector< SampleType > *self,kfr::univector< SampleType > const &b){ return *self + b; }
SWIGINTERN kfr::univector< SampleType > kfr_univector_Sl_SampleType_Sg____sub____SWIG(kfr::univector< SampleType > *self,kfr::univector< SampleType > const &b){ return *self - b; }
SWIGINTERN kfr::univector< SampleType > kfr_univector_Sl_SampleType_Sg____mul____SWIG(kfr::univector< SampleType > *self,kfr::univector< SampleType > const &b){ return *self * b; }
SWIGINTERN kfr::univector< SampleType > kfr_univector_Sl_SampleType_Sg____div____SWIG(kfr::univector< SampleType > *self,kfr::univector< SampleType > const &b){ return *self / b; }
SWIGINTERN kfr::univector< SampleType > kfr_univector_Sl_SampleType_Sg____unm____SWIG(kfr::univector< SampleType > *self){ return -*self; }
SWIGINTERN void kfr_univector_Sl_SampleType_Sg__fill__SWIG(kfr::univector< SampleType > *self,SampleType const &val){ for(size_t i = 0; i < self->size(); i++) (*self)[i] = val; }
SWIGINTERN void kfr_univector_Sl_SampleType_Sg__print__SWIG(kfr::univector< SampleType > const *self){ kfr::println(*self); }
SWIGINTERN kfr::complex< SampleType > kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____getitem____SWIG(kfr::univector< kfr::complex< SampleType > > *self,size_t i){ assert(i > 0) ; return (*self)[i-1]; }
SWIGINTERN void kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____setitem____SWIG(kfr::univector< kfr::complex< SampleType > > *self,size_t i,kfr::complex< SampleType > const &val){ assert(i > 0);(*self)[i-1] = val; }
SWIGINTERN kfr::univector< kfr::complex< SampleType > > kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____add____SWIG(kfr::univector< kfr::complex< SampleType > > *self,kfr::univector< kfr::complex< SampleType > > const &b){ return *self + b; }
SWIGINTERN kfr::univector< kfr::complex< SampleType > > kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____sub____SWIG(kfr::univector< kfr::complex< SampleType > > *self,kfr::univector< kfr::complex< SampleType > > const &b){ return *self - b; }
SWIGINTERN kfr::univector< kfr::complex< SampleType > > kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____mul____SWIG(kfr::univector< kfr::complex< SampleType > > *self,kfr::univector< kfr::complex< SampleType > > const &b){ return *self * b; }
SWIGINTERN kfr::univector< kfr::complex< SampleType > > kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____div____SWIG(kfr::univector< kfr::complex< SampleType > > *self,kfr::univector< kfr::complex< SampleType > > const &b){ return *self / b; }
SWIGINTERN kfr::univector< kfr::complex< SampleType > > kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____unm____SWIG(kfr::univector< kfr::complex< SampleType > > *self){ return -*self; }
SWIGINTERN void kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg__fill__SWIG(kfr::univector< kfr::complex< SampleType > > *self,kfr::complex< SampleType > const &val){ for(size_t i = 0; i < self->size(); i++) (*self)[i] = val; }
SWIGINTERN void kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg__print__SWIG(kfr::univector< kfr::complex< SampleType > > const *self){ kfr::println(*self); }

float sampleRate=44100.0;
float invSampleRate=1.0/sampleRate;
Std::RandomMersenne noise;

#ifdef __cplusplus
extern "C" {
#endif
static void swig_delete_gslice(void *obj) {
std::gslice *arg1 = (std::gslice *) obj;
delete arg1;
}
static swig_lua_attribute swig_gslice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_gslice_methods[]= {
    {0,0}
};
static swig_lua_method swig_gslice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_gslice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_gslice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_gslice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_gslice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_gslice_Sf_SwigStatic = {
    "gslice",
    swig_gslice_Sf_SwigStatic_methods,
    swig_gslice_Sf_SwigStatic_attributes,
    swig_gslice_Sf_SwigStatic_constants,
    swig_gslice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_gslice_bases[] = {0};
static const char *swig_gslice_base_names[] = {0};
static swig_lua_class _wrap_class_gslice = { "gslice", "gslice", &SWIGTYPE_p_std__gslice,0, swig_delete_gslice, swig_gslice_methods, swig_gslice_attributes, &swig_gslice_Sf_SwigStatic, swig_gslice_meta, swig_gslice_bases, swig_gslice_base_names };

static void swig_delete_slice(void *obj) {
std::slice *arg1 = (std::slice *) obj;
delete arg1;
}
static swig_lua_attribute swig_slice_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_slice_methods[]= {
    {0,0}
};
static swig_lua_method swig_slice_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_slice_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_slice_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_slice_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_slice_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_slice_Sf_SwigStatic = {
    "slice",
    swig_slice_Sf_SwigStatic_methods,
    swig_slice_Sf_SwigStatic_attributes,
    swig_slice_Sf_SwigStatic_constants,
    swig_slice_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_slice_bases[] = {0};
static const char *swig_slice_base_names[] = {0};
static swig_lua_class _wrap_class_slice = { "slice", "slice", &SWIGTYPE_p_std__slice,0, swig_delete_slice, swig_slice_methods, swig_slice_attributes, &swig_slice_Sf_SwigStatic, swig_slice_meta, swig_slice_bases, swig_slice_base_names };

static int _wrap_new_float_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::complex",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< float > *)new std::complex< float >((float const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",0,0)
  result = (std::complex< float > *)new std::complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = 0 ;
  std::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::complex< float >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< float >::complex",1,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_float_complex",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (std::complex< float > *)new std::complex< float >((std::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::complex(float const &,float const &)\n"
    "    std::complex< float >::complex(float const &)\n"
    "    std::complex< float >::complex()\n"
    "    std::complex< float >::complex(std::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (float)((std::complex< float > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::real",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_real",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::real() const\n"
    "    std::complex< float >::real(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("std::complex< float >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::imag",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex_imag",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_float_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::imag() const\n"
    "    std::complex< float >::imag(float)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__add__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__add__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___add",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____add____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__sub__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__sub__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___sub",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____sub____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__div__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__div__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___div",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____div____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__mul__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__mul__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___mul",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____mul____SWIG(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = std_complex_Sl_float_Sg____pow____SWIG_0(arg1,(std::complex< float > const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::complex< float > result;
  
  SWIG_check_num_args("std::complex< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__pow__",1,"std::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___pow",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::complex< float > * resultptr = new std::complex< float >((const std::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< float >::__pow__(std::complex< float > const &)\n"
    "    std::complex< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< float > *arg1 = (std::complex< float > *) 0 ;
  std::complex< float > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< float >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< float >::__eq__",1,"std::complex< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< float >::__eq__",2,"std::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("float_complex___eq",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (bool)std_complex_Sl_float_Sg____eq____SWIG(arg1,(std::complex< float > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_complex(void *obj) {
std::complex< float > *arg1 = (std::complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_complex_methods[]= {
    { "real", _wrap_float_complex_real},
    { "imag", _wrap_float_complex_imag},
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};
static swig_lua_method swig_float_complex_meta[] = {
    { "__add", _wrap_float_complex___add},
    { "__sub", _wrap_float_complex___sub},
    { "__div", _wrap_float_complex___div},
    { "__mul", _wrap_float_complex___mul},
    { "__pow", _wrap_float_complex___pow},
    { "__eq", _wrap_float_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_float_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_complex_Sf_SwigStatic = {
    "float_complex",
    swig_float_complex_Sf_SwigStatic_methods,
    swig_float_complex_Sf_SwigStatic_attributes,
    swig_float_complex_Sf_SwigStatic_constants,
    swig_float_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_complex_bases[] = {0};
static const char *swig_float_complex_base_names[] = {0};
static swig_lua_class _wrap_class_float_complex = { "float_complex", "float_complex", &SWIGTYPE_p_std__complexT_float_t,_proxy__wrap_new_float_complex, swig_delete_float_complex, swig_float_complex_methods, swig_float_complex_attributes, &swig_float_complex_Sf_SwigStatic, swig_float_complex_meta, swig_float_complex_bases, swig_float_complex_base_names };

static int _wrap_new_double_complex__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::complex",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (std::complex< double > *)new std::complex< double >((double const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",0,0)
  result = (std::complex< double > *)new std::complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = 0 ;
  std::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::complex< double >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::complex< double >::complex",1,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_double_complex",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (std::complex< double > *)new std::complex< double >((std::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_complex(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_double_complex__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_double_complex__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_double_complex__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_double_complex'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::complex(double const &,double const &)\n"
    "    std::complex< double >::complex(double const &)\n"
    "    std::complex< double >::complex()\n"
    "    std::complex< double >::complex(std::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (double)((std::complex< double > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::real",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_real",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::real() const\n"
    "    std::complex< double >::real(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("std::complex< double >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::imag",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex_imag",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_double_complex_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::imag() const\n"
    "    std::complex< double >::imag(double)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___add(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__add__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__add__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___add",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____add____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__sub__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__sub__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___sub",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____sub____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___div(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__div__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__div__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___div",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____div____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__mul__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__mul__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___mul",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____mul____SWIG(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = std_complex_Sl_double_Sg____pow____SWIG_0(arg1,(std::complex< double > const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::complex< double > result;
  
  SWIG_check_num_args("std::complex< double >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__pow__",1,"std::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::complex< double >::__pow__",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___pow",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = std_complex_Sl_double_Sg____pow____SWIG_1(arg1,(double const &)*arg2);
  {
    std::complex< double > * resultptr = new std::complex< double >((const std::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_complex___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_double_complex___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'double_complex___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::complex< double >::__pow__(std::complex< double > const &)\n"
    "    std::complex< double >::__pow__(double const &)\n");
  lua_error(L);return 0;
}


static int _wrap_double_complex___eq(lua_State* L) {
  int SWIG_arg = 0;
  std::complex< double > *arg1 = (std::complex< double > *) 0 ;
  std::complex< double > *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("std::complex< double >::__eq__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::complex< double >::__eq__",1,"std::complex< double > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::complex< double >::__eq__",2,"std::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("double_complex___eq",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (bool)std_complex_Sl_double_Sg____eq____SWIG(arg1,(std::complex< double > const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_complex(void *obj) {
std::complex< double > *arg1 = (std::complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_complex(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_complex);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_complex_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_complex_methods[]= {
    { "real", _wrap_double_complex_real},
    { "imag", _wrap_double_complex_imag},
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};
static swig_lua_method swig_double_complex_meta[] = {
    { "__add", _wrap_double_complex___add},
    { "__sub", _wrap_double_complex___sub},
    { "__div", _wrap_double_complex___div},
    { "__mul", _wrap_double_complex___mul},
    { "__pow", _wrap_double_complex___pow},
    { "__eq", _wrap_double_complex___eq},
    {0,0}
};

static swig_lua_attribute swig_double_complex_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_complex_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_complex_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_complex_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_complex_Sf_SwigStatic = {
    "double_complex",
    swig_double_complex_Sf_SwigStatic_methods,
    swig_double_complex_Sf_SwigStatic_attributes,
    swig_double_complex_Sf_SwigStatic_constants,
    swig_double_complex_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_complex_bases[] = {0};
static const char *swig_double_complex_base_names[] = {0};
static swig_lua_class _wrap_class_double_complex = { "double_complex", "double_complex", &SWIGTYPE_p_std__complexT_double_t,_proxy__wrap_new_double_complex, swig_delete_double_complex, swig_double_complex_methods, swig_double_complex_attributes, &swig_double_complex_Sf_SwigStatic, swig_double_complex_meta, swig_double_complex_bases, swig_double_complex_base_names };

static int _wrap_new_float_valarray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",0,0)
  result = (std::valarray< float > *)new std::valarray< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::valarray< float > *)new std::valarray< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  size_t arg2 ;
  float temp1 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::valarray",2,"size_t");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::valarray< float > *)new std::valarray< float >((float const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = (float *) 0 ;
  size_t arg2 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"float const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::valarray",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_float);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (std::valarray< float > *)new std::valarray< float >((float const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::valarray< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::slice_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::slice_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__slice_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__slice_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::slice_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  std::gslice_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::gslice_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__gslice_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__gslice_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::gslice_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  std::mask_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::mask_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mask_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__mask_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::mask_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  std::indirect_array< float > *arg1 = 0 ;
  std::valarray< float > *result = 0 ;
  
  SWIG_check_num_args("std::valarray< float >::valarray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::valarray< float >::valarray",1,"std::indirect_array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__indirect_arrayT_float_t,0))){
    SWIG_fail_ptr("new_float_valarray",1,SWIGTYPE_p_std__indirect_arrayT_float_t);
  }
  
  result = (std::valarray< float > *)new std::valarray< float >((std::indirect_array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_valarray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_float_valarray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__slice_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__gslice_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mask_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__indirect_arrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_float_valarray__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_float, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_valarray__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_float_valarray__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_float_valarray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::valarray()\n"
    "    std::valarray< float >::valarray(size_t)\n"
    "    std::valarray< float >::valarray(float const &,size_t)\n"
    "    std::valarray< float >::valarray(float const *,size_t)\n"
    "    std::valarray< float >::valarray(std::valarray< float > const &)\n"
    "    std::valarray< float >::valarray(std::slice_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::gslice_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::mask_array< float > const &)\n"
    "    std::valarray< float >::valarray(std::indirect_array< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___getitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_valarray_Sl_float_Sg____getitem____SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_0(arg1,arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::gslice *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"std::gslice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__gslice,0))){
    SWIG_fail_ptr("float_valarray___getitem",2,SWIGTYPE_p_std__gslice);
  }
  
  result = std_valarray_Sl_float_Sg____getitem____SWIG_1(arg1,(std::gslice const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::gslice *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"std::gslice const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__gslice,0))){
    SWIG_fail_ptr("float_valarray___setitem",2,SWIGTYPE_p_std__gslice);
  }
  
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_1(arg1,(std::gslice const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::slice *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__getitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__getitem__",2,"std::slice const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___getitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__slice,0))){
    SWIG_fail_ptr("float_valarray___getitem",2,SWIGTYPE_p_std__slice);
  }
  
  result = std_valarray_Sl_float_Sg____getitem____SWIG_2(arg1,(std::slice const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___getitem(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__gslice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__slice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray___getitem__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___getitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__getitem__(size_t)\n"
    "    std::valarray< float >::__getitem__(std::gslice const &)\n"
    "    std::valarray< float >::__getitem__(std::slice const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___setitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::slice *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::valarray< float >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__setitem__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__setitem__",2,"std::slice const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::__setitem__",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___setitem",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__slice,0))){
    SWIG_fail_ptr("float_valarray___setitem",2,SWIGTYPE_p_std__slice);
  }
  
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  std_valarray_Sl_float_Sg____setitem____SWIG_2(arg1,(std::slice const &)*arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__gslice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__slice, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray___setitem__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__setitem__(size_t,float const &)\n"
    "    std::valarray< float >::__setitem__(std::gslice const &,float const &)\n"
    "    std::valarray< float >::__setitem__(std::slice const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray___add(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__add__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__add__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___add",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___add",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____add____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___sub(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__sub__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__sub__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___sub",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___sub",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____sub____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___mul(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__mul__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__mul__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___mul",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___mul",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____mul____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___div(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__div__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__div__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___div",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___div",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____div____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___unm__(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__unm__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__unm__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__unm__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___unm__",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___unm__",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____unm____SWIG(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  std::valarray< float > *arg2 = 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__pow__",1,"std::valarray< float > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::valarray< float >::__pow__",2,"std::valarray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",2,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = std_valarray_Sl_float_Sg____pow____SWIG_0(arg1,(std::valarray< float > const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::__pow__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::__pow__",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::__pow__",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray___pow",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = std_valarray_Sl_float_Sg____pow____SWIG_1(arg1,(float const &)*arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray___pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray___pow__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray___pow__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray___pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::__pow__(std::valarray< float > const &)\n"
    "    std::valarray< float >::__pow__(float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray_size(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::valarray< float >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::size",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_size",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = ((std::valarray< float > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::valarray< float >::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::resize",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::resize",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::valarray< float >::resize",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_resize",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::valarray< float >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::resize",1,"std::valarray< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_resize",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_float_valarray_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_float_valarray_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::resize(size_t,float)\n"
    "    std::valarray< float >::resize(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_float_valarray_sum(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::sum",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_sum",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->sum();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_min(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::min",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_min",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_max(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::valarray< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::max",1,"std::valarray< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_max",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  result = (float)((std::valarray< float > const *)arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_shift(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  int arg2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::shift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::shift",1,"std::valarray< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::shift",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_shift",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((std::valarray< float > const *)arg1)->shift(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_cshift(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  int arg2 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::cshift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::cshift",1,"std::valarray< float > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::valarray< float >::cshift",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_cshift",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((std::valarray< float > const *)arg1)->cshift(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float (*arg2)(float) = (float (*)(float)) 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::apply",1,"std::valarray< float > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::valarray< float >::apply",2,"float (*)(float)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_apply",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_float__float,0))){
    SWIG_fail_ptr("float_valarray_apply",2,SWIGTYPE_p_f_float__float);
  }
  
  result = ((std::valarray< float > const *)arg1)->apply(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::valarray< float > *arg1 = (std::valarray< float > *) 0 ;
  float (*arg2)(float const &) = (float (*)(float const &)) 0 ;
  std::valarray< float > result;
  
  SWIG_check_num_args("std::valarray< float >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::valarray< float >::apply",1,"std::valarray< float > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::valarray< float >::apply",2,"float (*)(float const &)");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__valarrayT_float_t,0))){
    SWIG_fail_ptr("float_valarray_apply",1,SWIGTYPE_p_std__valarrayT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_r_q_const__float__float,0))){
    SWIG_fail_ptr("float_valarray_apply",2,SWIGTYPE_p_f_r_q_const__float__float);
  }
  
  result = ((std::valarray< float > const *)arg1)->apply(arg2);
  {
    std::valarray< float > * resultptr = new std::valarray< float >((const std::valarray< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__valarrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_valarray_apply(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_float__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__valarrayT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_f_r_q_const__float__float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_float_valarray_apply__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'float_valarray_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::valarray< float >::apply(float (*)(float)) const\n"
    "    std::valarray< float >::apply(float (*)(float const &)) const\n");
  lua_error(L);return 0;
}


static void swig_delete_float_valarray(void *obj) {
std::valarray< float > *arg1 = (std::valarray< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_valarray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_valarray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_valarray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_valarray_methods[]= {
    { "__getitem", _wrap_float_valarray___getitem},
    { "__setitem", _wrap_float_valarray___setitem},
    { "__add", _wrap_float_valarray___add},
    { "__sub", _wrap_float_valarray___sub},
    { "__mul", _wrap_float_valarray___mul},
    { "__div", _wrap_float_valarray___div},
    { "__unm__", _wrap_float_valarray___unm__},
    { "__pow", _wrap_float_valarray___pow},
    { "size", _wrap_float_valarray_size},
    { "resize", _wrap_float_valarray_resize},
    { "sum", _wrap_float_valarray_sum},
    { "min", _wrap_float_valarray_min},
    { "max", _wrap_float_valarray_max},
    { "shift", _wrap_float_valarray_shift},
    { "cshift", _wrap_float_valarray_cshift},
    { "apply", _wrap_float_valarray_apply},
    {0,0}
};
static swig_lua_method swig_float_valarray_meta[] = {
    { "__getitem", _wrap_float_valarray___getitem},
    { "__setitem", _wrap_float_valarray___setitem},
    { "__add", _wrap_float_valarray___add},
    { "__sub", _wrap_float_valarray___sub},
    { "__mul", _wrap_float_valarray___mul},
    { "__div", _wrap_float_valarray___div},
    { "__unm__", _wrap_float_valarray___unm__},
    { "__pow", _wrap_float_valarray___pow},
    {0,0}
};

static swig_lua_attribute swig_float_valarray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_valarray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_valarray_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_valarray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_valarray_Sf_SwigStatic = {
    "float_valarray",
    swig_float_valarray_Sf_SwigStatic_methods,
    swig_float_valarray_Sf_SwigStatic_attributes,
    swig_float_valarray_Sf_SwigStatic_constants,
    swig_float_valarray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_valarray_bases[] = {0};
static const char *swig_float_valarray_base_names[] = {0};
static swig_lua_class _wrap_class_float_valarray = { "float_valarray", "float_valarray", &SWIGTYPE_p_std__valarrayT_float_t,_proxy__wrap_new_float_valarray, swig_delete_float_valarray, swig_float_valarray_methods, swig_float_valarray_attributes, &swig_float_valarray_Sf_SwigStatic, swig_float_valarray_meta, swig_float_valarray_bases, swig_float_valarray_base_names };

static int _wrap_float_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::max",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::epsilon",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::round_error",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::infinity",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::quiet_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::signaling_NaN",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) 0 ;
  float result;
  
  SWIG_check_num_args("std::numeric_limits< float >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< float >::denorm_min",1,"std::numeric_limits< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_float_t,0))){
    SWIG_fail_ptr("float_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_float_t);
  }
  
  result = (float)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< float > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< float >::numeric_limits",0,0)
  result = (std::numeric_limits< float > *)new std::numeric_limits< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_numeric_limits(void *obj) {
std::numeric_limits< float > *arg1 = (std::numeric_limits< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_numeric_limits_methods[]= {
    { "min", _wrap_float_numeric_limits_min},
    { "max", _wrap_float_numeric_limits_max},
    { "epsilon", _wrap_float_numeric_limits_epsilon},
    { "round_error", _wrap_float_numeric_limits_round_error},
    { "infinity", _wrap_float_numeric_limits_infinity},
    { "quiet_NaN", _wrap_float_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_float_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_float_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_float_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_numeric_limits_Sf_SwigStatic = {
    "float_numeric_limits",
    swig_float_numeric_limits_Sf_SwigStatic_methods,
    swig_float_numeric_limits_Sf_SwigStatic_attributes,
    swig_float_numeric_limits_Sf_SwigStatic_constants,
    swig_float_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_numeric_limits_bases[] = {0};
static const char *swig_float_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_float_numeric_limits = { "float_numeric_limits", "float_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_float_t,_proxy__wrap_new_float_numeric_limits, swig_delete_float_numeric_limits, swig_float_numeric_limits_methods, swig_float_numeric_limits_attributes, &swig_float_numeric_limits_Sf_SwigStatic, swig_float_numeric_limits_meta, swig_float_numeric_limits_bases, swig_float_numeric_limits_base_names };

static int _wrap_double_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::max",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::epsilon",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::round_error",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::infinity",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::quiet_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::signaling_NaN",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_double_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) 0 ;
  double result;
  
  SWIG_check_num_args("std::numeric_limits< double >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< double >::denorm_min",1,"std::numeric_limits< double > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_double_t,0))){
    SWIG_fail_ptr("double_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_double_t);
  }
  
  result = (double)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_double_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< double > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< double >::numeric_limits",0,0)
  result = (std::numeric_limits< double > *)new std::numeric_limits< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_double_numeric_limits(void *obj) {
std::numeric_limits< double > *arg1 = (std::numeric_limits< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_double_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_double_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_double_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_double_numeric_limits_methods[]= {
    { "min", _wrap_double_numeric_limits_min},
    { "max", _wrap_double_numeric_limits_max},
    { "epsilon", _wrap_double_numeric_limits_epsilon},
    { "round_error", _wrap_double_numeric_limits_round_error},
    { "infinity", _wrap_double_numeric_limits_infinity},
    { "quiet_NaN", _wrap_double_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_double_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_double_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_double_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_double_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_double_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_double_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_double_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_double_numeric_limits_Sf_SwigStatic = {
    "double_numeric_limits",
    swig_double_numeric_limits_Sf_SwigStatic_methods,
    swig_double_numeric_limits_Sf_SwigStatic_attributes,
    swig_double_numeric_limits_Sf_SwigStatic_constants,
    swig_double_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_double_numeric_limits_bases[] = {0};
static const char *swig_double_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_double_numeric_limits = { "double_numeric_limits", "double_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_double_t,_proxy__wrap_new_double_numeric_limits, swig_delete_double_numeric_limits, swig_double_numeric_limits_methods, swig_double_numeric_limits_attributes, &swig_double_numeric_limits_Sf_SwigStatic, swig_double_numeric_limits_meta, swig_double_numeric_limits_bases, swig_double_numeric_limits_base_names };

static int _wrap_int_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::max",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::epsilon",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::round_error",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::infinity",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::quiet_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::signaling_NaN",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_int_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::numeric_limits< int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< int >::denorm_min",1,"std::numeric_limits< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_int_t,0))){
    SWIG_fail_ptr("int_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_int_t);
  }
  
  result = (int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_int_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< int >::numeric_limits",0,0)
  result = (std::numeric_limits< int > *)new std::numeric_limits< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_int_numeric_limits(void *obj) {
std::numeric_limits< int > *arg1 = (std::numeric_limits< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_int_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_int_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_int_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_int_numeric_limits_methods[]= {
    { "min", _wrap_int_numeric_limits_min},
    { "max", _wrap_int_numeric_limits_max},
    { "epsilon", _wrap_int_numeric_limits_epsilon},
    { "round_error", _wrap_int_numeric_limits_round_error},
    { "infinity", _wrap_int_numeric_limits_infinity},
    { "quiet_NaN", _wrap_int_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_int_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_int_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_int_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_int_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_int_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_int_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_int_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_int_numeric_limits_Sf_SwigStatic = {
    "int_numeric_limits",
    swig_int_numeric_limits_Sf_SwigStatic_methods,
    swig_int_numeric_limits_Sf_SwigStatic_attributes,
    swig_int_numeric_limits_Sf_SwigStatic_constants,
    swig_int_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_int_numeric_limits_bases[] = {0};
static const char *swig_int_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_int_numeric_limits = { "int_numeric_limits", "int_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_int_t,_proxy__wrap_new_int_numeric_limits, swig_delete_int_numeric_limits, swig_int_numeric_limits_methods, swig_int_numeric_limits_attributes, &swig_int_numeric_limits_Sf_SwigStatic, swig_int_numeric_limits_meta, swig_int_numeric_limits_bases, swig_int_numeric_limits_base_names };

static int _wrap_uint_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::max",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::epsilon",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::round_error",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::infinity",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::quiet_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::signaling_NaN",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_uint_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned int >::denorm_min",1,"std::numeric_limits< unsigned int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,0))){
    SWIG_fail_ptr("uint_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t);
  }
  
  result = (unsigned int)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_uint_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned int > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned int >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned int > *)new std::numeric_limits< unsigned int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_uint_numeric_limits(void *obj) {
std::numeric_limits< unsigned int > *arg1 = (std::numeric_limits< unsigned int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_uint_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_uint_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_uint_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_methods[]= {
    { "min", _wrap_uint_numeric_limits_min},
    { "max", _wrap_uint_numeric_limits_max},
    { "epsilon", _wrap_uint_numeric_limits_epsilon},
    { "round_error", _wrap_uint_numeric_limits_round_error},
    { "infinity", _wrap_uint_numeric_limits_infinity},
    { "quiet_NaN", _wrap_uint_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_uint_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_uint_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_uint_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_uint_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_uint_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_uint_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_uint_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_uint_numeric_limits_Sf_SwigStatic = {
    "uint_numeric_limits",
    swig_uint_numeric_limits_Sf_SwigStatic_methods,
    swig_uint_numeric_limits_Sf_SwigStatic_attributes,
    swig_uint_numeric_limits_Sf_SwigStatic_constants,
    swig_uint_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_uint_numeric_limits_bases[] = {0};
static const char *swig_uint_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_uint_numeric_limits = { "uint_numeric_limits", "uint_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_int_t,_proxy__wrap_new_uint_numeric_limits, swig_delete_uint_numeric_limits, swig_uint_numeric_limits_methods, swig_uint_numeric_limits_attributes, &swig_uint_numeric_limits_Sf_SwigStatic, swig_uint_numeric_limits_meta, swig_uint_numeric_limits_bases, swig_uint_numeric_limits_base_names };

static int _wrap_short_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::max",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::epsilon",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::round_error",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::infinity",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::quiet_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::signaling_NaN",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_short_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) 0 ;
  short result;
  
  SWIG_check_num_args("std::numeric_limits< short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< short >::denorm_min",1,"std::numeric_limits< short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_short_t,0))){
    SWIG_fail_ptr("short_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_short_t);
  }
  
  result = (short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_short_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< short >::numeric_limits",0,0)
  result = (std::numeric_limits< short > *)new std::numeric_limits< short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_short_numeric_limits(void *obj) {
std::numeric_limits< short > *arg1 = (std::numeric_limits< short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_short_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_short_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_short_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_short_numeric_limits_methods[]= {
    { "min", _wrap_short_numeric_limits_min},
    { "max", _wrap_short_numeric_limits_max},
    { "epsilon", _wrap_short_numeric_limits_epsilon},
    { "round_error", _wrap_short_numeric_limits_round_error},
    { "infinity", _wrap_short_numeric_limits_infinity},
    { "quiet_NaN", _wrap_short_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_short_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_short_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_short_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_short_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_short_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_short_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_short_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_short_numeric_limits_Sf_SwigStatic = {
    "short_numeric_limits",
    swig_short_numeric_limits_Sf_SwigStatic_methods,
    swig_short_numeric_limits_Sf_SwigStatic_attributes,
    swig_short_numeric_limits_Sf_SwigStatic_constants,
    swig_short_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_short_numeric_limits_bases[] = {0};
static const char *swig_short_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_short_numeric_limits = { "short_numeric_limits", "short_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_short_t,_proxy__wrap_new_short_numeric_limits, swig_delete_short_numeric_limits, swig_short_numeric_limits_methods, swig_short_numeric_limits_attributes, &swig_short_numeric_limits_Sf_SwigStatic, swig_short_numeric_limits_meta, swig_short_numeric_limits_bases, swig_short_numeric_limits_base_names };

static int _wrap_ushort_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::max",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::epsilon",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::round_error",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::infinity",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::quiet_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::signaling_NaN",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ushort_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned short >::denorm_min",1,"std::numeric_limits< unsigned short > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,0))){
    SWIG_fail_ptr("ushort_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t);
  }
  
  result = (unsigned short)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ushort_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned short > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned short >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned short > *)new std::numeric_limits< unsigned short >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ushort_numeric_limits(void *obj) {
std::numeric_limits< unsigned short > *arg1 = (std::numeric_limits< unsigned short > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ushort_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ushort_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ushort_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_methods[]= {
    { "min", _wrap_ushort_numeric_limits_min},
    { "max", _wrap_ushort_numeric_limits_max},
    { "epsilon", _wrap_ushort_numeric_limits_epsilon},
    { "round_error", _wrap_ushort_numeric_limits_round_error},
    { "infinity", _wrap_ushort_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ushort_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ushort_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ushort_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ushort_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ushort_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ushort_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ushort_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ushort_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ushort_numeric_limits_Sf_SwigStatic = {
    "ushort_numeric_limits",
    swig_ushort_numeric_limits_Sf_SwigStatic_methods,
    swig_ushort_numeric_limits_Sf_SwigStatic_attributes,
    swig_ushort_numeric_limits_Sf_SwigStatic_constants,
    swig_ushort_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ushort_numeric_limits_bases[] = {0};
static const char *swig_ushort_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ushort_numeric_limits = { "ushort_numeric_limits", "ushort_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_short_t,_proxy__wrap_new_ushort_numeric_limits, swig_delete_ushort_numeric_limits, swig_ushort_numeric_limits_methods, swig_ushort_numeric_limits_attributes, &swig_ushort_numeric_limits_Sf_SwigStatic, swig_ushort_numeric_limits_meta, swig_ushort_numeric_limits_bases, swig_ushort_numeric_limits_base_names };

static int _wrap_long_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::max",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::epsilon",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::round_error",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::infinity",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::quiet_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::signaling_NaN",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_long_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) 0 ;
  long result;
  
  SWIG_check_num_args("std::numeric_limits< long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long >::denorm_min",1,"std::numeric_limits< long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_t,0))){
    SWIG_fail_ptr("long_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_t);
  }
  
  result = (long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_long_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long >::numeric_limits",0,0)
  result = (std::numeric_limits< long > *)new std::numeric_limits< long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_long_numeric_limits(void *obj) {
std::numeric_limits< long > *arg1 = (std::numeric_limits< long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_long_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_long_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_long_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_long_numeric_limits_methods[]= {
    { "min", _wrap_long_numeric_limits_min},
    { "max", _wrap_long_numeric_limits_max},
    { "epsilon", _wrap_long_numeric_limits_epsilon},
    { "round_error", _wrap_long_numeric_limits_round_error},
    { "infinity", _wrap_long_numeric_limits_infinity},
    { "quiet_NaN", _wrap_long_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_long_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_long_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_long_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_long_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_long_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_long_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_long_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_long_numeric_limits_Sf_SwigStatic = {
    "long_numeric_limits",
    swig_long_numeric_limits_Sf_SwigStatic_methods,
    swig_long_numeric_limits_Sf_SwigStatic_attributes,
    swig_long_numeric_limits_Sf_SwigStatic_constants,
    swig_long_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_long_numeric_limits_bases[] = {0};
static const char *swig_long_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_long_numeric_limits = { "long_numeric_limits", "long_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_t,_proxy__wrap_new_long_numeric_limits, swig_delete_long_numeric_limits, swig_long_numeric_limits_methods, swig_long_numeric_limits_attributes, &swig_long_numeric_limits_Sf_SwigStatic, swig_long_numeric_limits_meta, swig_long_numeric_limits_bases, swig_long_numeric_limits_base_names };

static int _wrap_ulong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::max",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::epsilon",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::round_error",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::infinity",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::quiet_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::signaling_NaN",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ulong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long >::denorm_min",1,"std::numeric_limits< unsigned long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,0))){
    SWIG_fail_ptr("ulong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t);
  }
  
  result = (unsigned long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ulong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long > *)new std::numeric_limits< unsigned long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ulong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long > *arg1 = (std::numeric_limits< unsigned long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ulong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ulong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ulong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_methods[]= {
    { "min", _wrap_ulong_numeric_limits_min},
    { "max", _wrap_ulong_numeric_limits_max},
    { "epsilon", _wrap_ulong_numeric_limits_epsilon},
    { "round_error", _wrap_ulong_numeric_limits_round_error},
    { "infinity", _wrap_ulong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ulong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ulong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ulong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ulong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ulong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ulong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ulong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ulong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ulong_numeric_limits_Sf_SwigStatic = {
    "ulong_numeric_limits",
    swig_ulong_numeric_limits_Sf_SwigStatic_methods,
    swig_ulong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ulong_numeric_limits_Sf_SwigStatic_constants,
    swig_ulong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ulong_numeric_limits_bases[] = {0};
static const char *swig_ulong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ulong_numeric_limits = { "ulong_numeric_limits", "ulong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_t,_proxy__wrap_new_ulong_numeric_limits, swig_delete_ulong_numeric_limits, swig_ulong_numeric_limits_methods, swig_ulong_numeric_limits_attributes, &swig_ulong_numeric_limits_Sf_SwigStatic, swig_ulong_numeric_limits_meta, swig_ulong_numeric_limits_bases, swig_ulong_numeric_limits_base_names };

static int _wrap_llong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::max",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::epsilon",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::round_error",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::infinity",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::quiet_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::signaling_NaN",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) 0 ;
  long long result;
  
  SWIG_check_num_args("std::numeric_limits< long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< long long >::denorm_min",1,"std::numeric_limits< long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_long_long_t,0))){
    SWIG_fail_ptr("llong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_long_long_t);
  }
  
  result = (long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_llong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< long long >::numeric_limits",0,0)
  result = (std::numeric_limits< long long > *)new std::numeric_limits< long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_llong_numeric_limits(void *obj) {
std::numeric_limits< long long > *arg1 = (std::numeric_limits< long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_llong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_llong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_llong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_methods[]= {
    { "min", _wrap_llong_numeric_limits_min},
    { "max", _wrap_llong_numeric_limits_max},
    { "epsilon", _wrap_llong_numeric_limits_epsilon},
    { "round_error", _wrap_llong_numeric_limits_round_error},
    { "infinity", _wrap_llong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_llong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_llong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_llong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_llong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_llong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_llong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_llong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_llong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_llong_numeric_limits_Sf_SwigStatic = {
    "llong_numeric_limits",
    swig_llong_numeric_limits_Sf_SwigStatic_methods,
    swig_llong_numeric_limits_Sf_SwigStatic_attributes,
    swig_llong_numeric_limits_Sf_SwigStatic_constants,
    swig_llong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_llong_numeric_limits_bases[] = {0};
static const char *swig_llong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_llong_numeric_limits = { "llong_numeric_limits", "llong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_long_long_t,_proxy__wrap_new_llong_numeric_limits, swig_delete_llong_numeric_limits, swig_llong_numeric_limits_methods, swig_llong_numeric_limits_attributes, &swig_llong_numeric_limits_Sf_SwigStatic, swig_llong_numeric_limits_meta, swig_llong_numeric_limits_bases, swig_llong_numeric_limits_base_names };

static int _wrap_ullong_numeric_limits_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_max(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::max",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_max",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_epsilon(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::epsilon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::epsilon",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_epsilon",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->epsilon();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_round_error(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::round_error",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::round_error",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_round_error",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->round_error();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_infinity(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::infinity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::infinity",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_infinity",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_quiet_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::quiet_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::quiet_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_quiet_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->quiet_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_signaling_NaN(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::signaling_NaN",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::signaling_NaN",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_signaling_NaN",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->signaling_NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ullong_numeric_limits_denorm_min(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) 0 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::denorm_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::numeric_limits< unsigned long long >::denorm_min",1,"std::numeric_limits< unsigned long long > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("ullong_numeric_limits_denorm_min",1,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t);
  }
  
  result = (unsigned long long)(arg1)->denorm_min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ullong_numeric_limits(lua_State* L) {
  int SWIG_arg = 0;
  std::numeric_limits< unsigned long long > *result = 0 ;
  
  SWIG_check_num_args("std::numeric_limits< unsigned long long >::numeric_limits",0,0)
  result = (std::numeric_limits< unsigned long long > *)new std::numeric_limits< unsigned long long >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ullong_numeric_limits(void *obj) {
std::numeric_limits< unsigned long long > *arg1 = (std::numeric_limits< unsigned long long > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ullong_numeric_limits(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ullong_numeric_limits);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ullong_numeric_limits_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_methods[]= {
    { "min", _wrap_ullong_numeric_limits_min},
    { "max", _wrap_ullong_numeric_limits_max},
    { "epsilon", _wrap_ullong_numeric_limits_epsilon},
    { "round_error", _wrap_ullong_numeric_limits_round_error},
    { "infinity", _wrap_ullong_numeric_limits_infinity},
    { "quiet_NaN", _wrap_ullong_numeric_limits_quiet_NaN},
    { "signaling_NaN", _wrap_ullong_numeric_limits_signaling_NaN},
    { "denorm_min", _wrap_ullong_numeric_limits_denorm_min},
    {0,0}
};
static swig_lua_method swig_ullong_numeric_limits_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ullong_numeric_limits_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ullong_numeric_limits_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ullong_numeric_limits_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ullong_numeric_limits_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ullong_numeric_limits_Sf_SwigStatic = {
    "ullong_numeric_limits",
    swig_ullong_numeric_limits_Sf_SwigStatic_methods,
    swig_ullong_numeric_limits_Sf_SwigStatic_attributes,
    swig_ullong_numeric_limits_Sf_SwigStatic_constants,
    swig_ullong_numeric_limits_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ullong_numeric_limits_bases[] = {0};
static const char *swig_ullong_numeric_limits_base_names[] = {0};
static swig_lua_class _wrap_class_ullong_numeric_limits = { "ullong_numeric_limits", "ullong_numeric_limits", &SWIGTYPE_p_std__numeric_limitsT_unsigned_long_long_t,_proxy__wrap_new_ullong_numeric_limits, swig_delete_ullong_numeric_limits, swig_ullong_numeric_limits_methods, swig_ullong_numeric_limits_attributes, &swig_ullong_numeric_limits_Sf_SwigStatic, swig_ullong_numeric_limits_meta, swig_ullong_numeric_limits_bases, swig_ullong_numeric_limits_base_names };

static int _wrap_Huge(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Huge",0,0)
  result = (double)Huge();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Hugef(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("Hugef",0,0)
  result = (float)Hugef();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Infinity(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("Infinity",0,0)
  result = (double)Infinity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NaN(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("NaN",0,0)
  result = (double)NaN();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("abs< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)abs< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cubef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cube< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cube< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cube< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sqrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sqrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("exp2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)exp2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log10< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log10< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log2< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log2< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("logb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)logb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("pow< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)pow< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floorf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("floor< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)floor< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("atan2< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)atan2< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cos< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cos< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sin< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sin< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tan< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("sinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)sinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("acosh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)acosh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("asinh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)asinh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("atanh< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)atanh< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceilf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("cbrt< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)cbrt< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("copysign< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)copysign< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erf< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("erfc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)erfc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1f(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("expm1< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)expm1< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fdim< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fdim< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp1 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("fma< f32 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f32 >",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f32 >",3,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)fma< f32 >((float const &)*arg1,(float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmax< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmax< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fminf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmin< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmin< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("fmod< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)fmod< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("hypot< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)hypot< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinitef(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinff(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnanf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormalf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f32 >((float const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("ldexp< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)ldexp< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("llround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)llround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("log1p< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)log1p< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lrint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lrint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("lround< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)lround< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nan< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nan< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanff(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanf< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanf< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanlf(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  float result;
  
  SWIG_check_num_args("nanl< f32 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f32 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (float)nanl< f32 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("nearbyint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)nearbyint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nextafter< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nextafter< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("nexttoward< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)nexttoward< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float *arg2 = 0 ;
  float temp1 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("remainder< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f32 >",2,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)remainder< f32 >((float const &)*arg1,(float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("rint< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)rint< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("round< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)round< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  long arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbln< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f32 >",2,"long");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (float)scalbln< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  int arg2 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("scalbn< f32 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f32 >",1,"float const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f32 >",2,"int");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (float)scalbn< f32 >((float const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squaref(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("square< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)square< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammaf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("tgamma< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)tgamma< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncf(lua_State* L) {
  int SWIG_arg = 0;
  float *arg1 = 0 ;
  float temp1 ;
  float result;
  
  SWIG_check_num_args("trunc< f32 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f32 >",1,"float const &");
  temp1=(float)lua_tonumber(L,1); arg1=&temp1;
  result = (float)trunc< f32 >((float const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("abs< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("abs< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)abs< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sqrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sqrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sqrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("exp2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("exp2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)exp2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log10< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log10< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log10< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log2< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log2< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log2< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("logb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("logb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)logb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_powd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("pow< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pow< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pow< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)pow< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floord(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("floor< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("floor< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)floor< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("atan2< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atan2< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("atan2< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)atan2< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cos< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cos< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cos< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sin< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sin< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sin< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tan< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("sinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)sinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acoshd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("acosh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("acosh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)acosh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asinhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("asinh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("asinh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)asinh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atanhd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("atanh< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("atanh< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)atanh< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cbrtd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ceild(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("cbrt< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("cbrt< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)cbrt< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_copysignd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("copysign< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("copysign< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("copysign< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)copysign< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erf< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_erfcd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("erfc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("erfc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)erfc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_expm1d(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("expm1< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("expm1< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)expm1< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fdimd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fdim< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fdim< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fdim< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fdim< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double temp1 ;
  double temp2 ;
  double temp3 ;
  double result;
  
  SWIG_check_num_args("fma< f64 >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fma< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fma< f64 >",2,"double const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("fma< f64 >",3,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  result = (double)fma< f64 >((double const &)*arg1,(double const &)*arg2,(double const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmaxd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmax< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmax< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmax< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmax< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmind(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmin< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmin< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmin< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmin< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmodd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("fmod< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fmod< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fmod< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)fmod< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fpclassifyd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("fpclassify< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fpclassify< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)fpclassify< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hypotd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("hypot< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("hypot< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hypot< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)hypot< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ilogbd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  int result;
  
  SWIG_check_num_args("ilogb< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ilogb< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (int)ilogb< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isfinited(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isfinite< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isfinite< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isfinite< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreater< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreater< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreater< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreater< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isgreaterequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isgreaterequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isgreaterequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isgreaterequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isgreaterequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isinfd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isinf< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isinf< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isinf< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isless< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isless< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isless< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isless< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_islessequald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("islessequal< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("islessequal< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islessequal< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)islessequal< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnand(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnan< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnan< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnan< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isnormald(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  bool result;
  
  SWIG_check_num_args("isnormal< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isnormal< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (bool)isnormal< f64 >((double const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_isunorderedd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  bool result;
  
  SWIG_check_num_args("isunordered< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("isunordered< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isunordered< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)isunordered< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ldexpd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("ldexp< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ldexp< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ldexp< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)ldexp< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_llroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("llround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("llround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)llround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log1pd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("log1p< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("log1p< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)log1p< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lrintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lrint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lrint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lrint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lroundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("lround< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("lround< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)lround< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nand(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nan< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nan< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nan< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanfd(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanf< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanf< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanf< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nanld(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  double result;
  
  SWIG_check_num_args("nanl< f64 >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("nanl< f64 >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (double)nanl< f64 >((char const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nearbyintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("nearbyint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nearbyint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)nearbyint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nextafterd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nextafter< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nextafter< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nextafter< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nextafter< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_nexttowardd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("nexttoward< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("nexttoward< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nexttoward< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)nexttoward< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_remainderd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double *arg2 = 0 ;
  double temp1 ;
  double temp2 ;
  double result;
  
  SWIG_check_num_args("remainder< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("remainder< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("remainder< f64 >",2,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (double)remainder< f64 >((double const &)*arg1,(double const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rintd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("rint< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("rint< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)rint< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_roundd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("round< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("round< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)round< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalblnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  long arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbln< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbln< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbln< f64 >",2,"long");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (long)lua_tonumber(L, 2);
  result = (double)scalbln< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_scalbnd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("scalbn< f64 >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("scalbn< f64 >",1,"double const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scalbn< f64 >",2,"int");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  arg2 = (int)lua_tonumber(L, 2);
  result = (double)scalbn< f64 >((double const &)*arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squared(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("square< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("square< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)square< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tgammad(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("tgamma< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("tgamma< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)tgamma< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_truncd(lua_State* L) {
  int SWIG_arg = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double result;
  
  SWIG_check_num_args("trunc< f64 >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("trunc< f64 >",1,"double const &");
  temp1=(double)lua_tonumber(L,1); arg1=&temp1;
  result = (double)trunc< f64 >((double const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feclearexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feclearexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feclearexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feclearexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fegetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetexceptflag",1,"fexcept_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fegetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fegetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fegetexceptflag(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feraiseexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("feraiseexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("feraiseexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)feraiseexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetexceptflag(lua_State* L) {
  int SWIG_arg = 0;
  fexcept_t *arg1 = (fexcept_t *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("fesetexceptflag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetexceptflag",1,"fexcept_t const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("fesetexceptflag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fexcept_t,0))){
    SWIG_fail_ptr("fesetexceptflag",1,SWIGTYPE_p_fexcept_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)fesetexceptflag((fexcept_t const *)arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fetestexcept(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fetestexcept",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fetestexcept",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fetestexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetround(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("fegetround",0,0)
  result = (int)fegetround();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetround(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int result;
  
  SWIG_check_num_args("fesetround",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("fesetround",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (int)fesetround(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fegetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fegetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fegetenv",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fegetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fegetenv(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feholdexcept(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feholdexcept",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feholdexcept",1,"fenv_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feholdexcept",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feholdexcept(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fesetenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("fesetenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fesetenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("fesetenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)fesetenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feupdateenv(lua_State* L) {
  int SWIG_arg = 0;
  fenv_t *arg1 = (fenv_t *) 0 ;
  int result;
  
  SWIG_check_num_args("feupdateenv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("feupdateenv",1,"fenv_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_fenv_t,0))){
    SWIG_fail_ptr("feupdateenv",1,SWIGTYPE_p_fenv_t);
  }
  
  result = (int)feupdateenv((fenv_t const *)arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  std::string result;
  
  SWIG_check_num_args("DSP::dB_to_string",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::dB_to_string",1,"double const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::dB_to_string",2,"double");
  arg1 = (double const)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::dB_to_string(arg1,arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  std::string result;
  
  SWIG_check_num_args("DSP::dB_to_string",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::dB_to_string",1,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  result = DSP::dB_to_string(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_string(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_dB_to_string__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dB_to_string__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dB_to_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::dB_to_string(double const,double)\n"
    "    DSP::dB_to_string(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_dB_to_utf8string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  std::string result;
  
  SWIG_check_num_args("DSP::dB_to_utf8string",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::dB_to_utf8string",1,"double const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::dB_to_utf8string",2,"double");
  arg1 = (double const)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = DSP::dB_to_utf8string(arg1,arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_utf8string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  std::string result;
  
  SWIG_check_num_args("DSP::dB_to_utf8string",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::dB_to_utf8string",1,"double const");
  arg1 = (double const)lua_tonumber(L, 1);
  result = DSP::dB_to_utf8string(arg1);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_utf8string(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_dB_to_utf8string__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dB_to_utf8string__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dB_to_utf8string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::dB_to_utf8string(double const,double)\n"
    "    DSP::dB_to_utf8string(double const)\n");
  lua_error(L);return 0;
}


static int _wrap_audio_format_channels_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format *arg1 = (kfr::audio_format *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("kfr::audio_format::channels",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::audio_format::channels",1,"kfr::audio_format *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::audio_format::channels",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__audio_format,0))){
    SWIG_fail_ptr("audio_format_channels_set",1,SWIGTYPE_p_kfr__audio_format);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->channels = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_format_channels_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format *arg1 = (kfr::audio_format *) 0 ;
  size_t result;
  
  SWIG_check_num_args("kfr::audio_format::channels",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::audio_format::channels",1,"kfr::audio_format *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__audio_format,0))){
    SWIG_fail_ptr("audio_format_channels_get",1,SWIGTYPE_p_kfr__audio_format);
  }
  
  result =  ((arg1)->channels);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_format_type_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format *arg1 = (kfr::audio_format *) 0 ;
  kfr::audio_sample_type arg2 ;
  
  SWIG_check_num_args("kfr::audio_format::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::audio_format::type",1,"kfr::audio_format *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::audio_format::type",2,"kfr::audio_sample_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__audio_format,0))){
    SWIG_fail_ptr("audio_format_type_set",1,SWIGTYPE_p_kfr__audio_format);
  }
  
  arg2 = (kfr::audio_sample_type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_format_type_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format *arg1 = (kfr::audio_format *) 0 ;
  kfr::audio_sample_type result;
  
  SWIG_check_num_args("kfr::audio_format::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::audio_format::type",1,"kfr::audio_format *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__audio_format,0))){
    SWIG_fail_ptr("audio_format_type_get",1,SWIGTYPE_p_kfr__audio_format);
  }
  
  result = (kfr::audio_sample_type) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_format_samplerate_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format *arg1 = (kfr::audio_format *) 0 ;
  kfr::fmax arg2 ;
  
  SWIG_check_num_args("kfr::audio_format::samplerate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::audio_format::samplerate",1,"kfr::audio_format *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::audio_format::samplerate",2,"kfr::fmax");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__audio_format,0))){
    SWIG_fail_ptr("audio_format_samplerate_set",1,SWIGTYPE_p_kfr__audio_format);
  }
  
  arg2 = (kfr::fmax)lua_tonumber(L, 2);
  if (arg1) (arg1)->samplerate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_format_samplerate_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format *arg1 = (kfr::audio_format *) 0 ;
  kfr::fmax result;
  
  SWIG_check_num_args("kfr::audio_format::samplerate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::audio_format::samplerate",1,"kfr::audio_format *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__audio_format,0))){
    SWIG_fail_ptr("audio_format_samplerate_get",1,SWIGTYPE_p_kfr__audio_format);
  }
  
  result = (kfr::fmax) ((arg1)->samplerate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_format_use_w64_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format *arg1 = (kfr::audio_format *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("kfr::audio_format::use_w64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::audio_format::use_w64",1,"kfr::audio_format *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("kfr::audio_format::use_w64",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__audio_format,0))){
    SWIG_fail_ptr("audio_format_use_w64_set",1,SWIGTYPE_p_kfr__audio_format);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->use_w64 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_format_use_w64_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format *arg1 = (kfr::audio_format *) 0 ;
  bool result;
  
  SWIG_check_num_args("kfr::audio_format::use_w64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::audio_format::use_w64",1,"kfr::audio_format *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__audio_format,0))){
    SWIG_fail_ptr("audio_format_use_w64_get",1,SWIGTYPE_p_kfr__audio_format);
  }
  
  result = (bool) ((arg1)->use_w64);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_audio_format(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format *result = 0 ;
  
  SWIG_check_num_args("kfr::audio_format::audio_format",0,0)
  result = (kfr::audio_format *)new kfr::audio_format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_audio_format(void *obj) {
kfr::audio_format *arg1 = (kfr::audio_format *) obj;
delete arg1;
}
static int _proxy__wrap_new_audio_format(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_audio_format);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_audio_format_attributes[] = {
    { "channels", _wrap_audio_format_channels_get, _wrap_audio_format_channels_set },
    { "type", _wrap_audio_format_type_get, _wrap_audio_format_type_set },
    { "samplerate", _wrap_audio_format_samplerate_get, _wrap_audio_format_samplerate_set },
    { "use_w64", _wrap_audio_format_use_w64_get, _wrap_audio_format_use_w64_set },
    {0,0,0}
};
static swig_lua_method swig_audio_format_methods[]= {
    {0,0}
};
static swig_lua_method swig_audio_format_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_audio_format_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_audio_format_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_audio_format_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_audio_format_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_audio_format_Sf_SwigStatic = {
    "audio_format",
    swig_audio_format_Sf_SwigStatic_methods,
    swig_audio_format_Sf_SwigStatic_attributes,
    swig_audio_format_Sf_SwigStatic_constants,
    swig_audio_format_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_audio_format_bases[] = {0};
static const char *swig_audio_format_base_names[] = {0};
static swig_lua_class _wrap_class_audio_format = { "audio_format", "audio_format", &SWIGTYPE_p_kfr__audio_format,_proxy__wrap_new_audio_format, swig_delete_audio_format, swig_audio_format_methods, swig_audio_format_attributes, &swig_audio_format_Sf_SwigStatic, swig_audio_format_meta, swig_audio_format_bases, swig_audio_format_base_names };

static int _wrap_new_audio_format_and_length__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format_and_length *result = 0 ;
  
  SWIG_check_num_args("kfr::audio_format_and_length::audio_format_and_length",0,0)
  result = (kfr::audio_format_and_length *)new kfr::audio_format_and_length();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_audio_format_and_length__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format *arg1 = 0 ;
  kfr::audio_format_and_length *result = 0 ;
  
  SWIG_check_num_args("kfr::audio_format_and_length::audio_format_and_length",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::audio_format_and_length::audio_format_and_length",1,"kfr::audio_format const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__audio_format,0))){
    SWIG_fail_ptr("new_audio_format_and_length",1,SWIGTYPE_p_kfr__audio_format);
  }
  
  result = (kfr::audio_format_and_length *)new kfr::audio_format_and_length((kfr::audio_format const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_audio_format_and_length(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_audio_format_and_length__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__audio_format, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_audio_format_and_length__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_audio_format_and_length'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::audio_format_and_length::audio_format_and_length()\n"
    "    kfr::audio_format_and_length::audio_format_and_length(kfr::audio_format const &)\n");
  lua_error(L);return 0;
}


static int _wrap_audio_format_and_length_length_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format_and_length *arg1 = (kfr::audio_format_and_length *) 0 ;
  kfr::imax arg2 ;
  
  SWIG_check_num_args("kfr::audio_format_and_length::length",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::audio_format_and_length::length",1,"kfr::audio_format_and_length *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::audio_format_and_length::length",2,"kfr::imax");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__audio_format_and_length,0))){
    SWIG_fail_ptr("audio_format_and_length_length_set",1,SWIGTYPE_p_kfr__audio_format_and_length);
  }
  
  arg2 = (kfr::imax)lua_tonumber(L, 2);
  if (arg1) (arg1)->length = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_format_and_length_length_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_format_and_length *arg1 = (kfr::audio_format_and_length *) 0 ;
  kfr::imax result;
  
  SWIG_check_num_args("kfr::audio_format_and_length::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::audio_format_and_length::length",1,"kfr::audio_format_and_length *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__audio_format_and_length,0))){
    SWIG_fail_ptr("audio_format_and_length_length_get",1,SWIGTYPE_p_kfr__audio_format_and_length);
  }
  
  result = (kfr::imax) ((arg1)->length);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_audio_format_and_length(void *obj) {
kfr::audio_format_and_length *arg1 = (kfr::audio_format_and_length *) obj;
delete arg1;
}
static int _proxy__wrap_new_audio_format_and_length(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_audio_format_and_length);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_audio_format_and_length_attributes[] = {
    { "length", _wrap_audio_format_and_length_length_get, _wrap_audio_format_and_length_length_set },
    {0,0,0}
};
static swig_lua_method swig_audio_format_and_length_methods[]= {
    {0,0}
};
static swig_lua_method swig_audio_format_and_length_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_audio_format_and_length_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_audio_format_and_length_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_audio_format_and_length_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_audio_format_and_length_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_audio_format_and_length_Sf_SwigStatic = {
    "audio_format_and_length",
    swig_audio_format_and_length_Sf_SwigStatic_methods,
    swig_audio_format_and_length_Sf_SwigStatic_attributes,
    swig_audio_format_and_length_Sf_SwigStatic_constants,
    swig_audio_format_and_length_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_audio_format_and_length_bases[] = {0,0};
static const char *swig_audio_format_and_length_base_names[] = {"kfr::audio_format *",0};
static swig_lua_class _wrap_class_audio_format_and_length = { "audio_format_and_length", "audio_format_and_length", &SWIGTYPE_p_kfr__audio_format_and_length,_proxy__wrap_new_audio_format_and_length, swig_delete_audio_format_and_length, swig_audio_format_and_length_methods, swig_audio_format_and_length_attributes, &swig_audio_format_and_length_Sf_SwigStatic, swig_audio_format_and_length_meta, swig_audio_format_and_length_bases, swig_audio_format_and_length_base_names };

static int _wrap_audio_sample_sizeof(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_sample_type arg1 ;
  size_t result;
  
  SWIG_check_num_args("kfr::audio_sample_sizeof",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::audio_sample_sizeof",1,"kfr::audio_sample_type");
  arg1 = (kfr::audio_sample_type)(int)lua_tonumber(L, 1);
  result = kfr::audio_sample_sizeof(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_sample_bit_depth(lua_State* L) {
  int SWIG_arg = 0;
  kfr::audio_sample_type arg1 ;
  size_t result;
  
  SWIG_check_num_args("kfr::audio_sample_bit_depth",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::audio_sample_bit_depth",1,"kfr::audio_sample_type");
  arg1 = (kfr::audio_sample_type)(int)lua_tonumber(L, 1);
  result = kfr::audio_sample_bit_depth(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fraction__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::i64 arg1 ;
  kfr::i64 arg2 ;
  kfr::fraction *result = 0 ;
  
  SWIG_check_num_args("kfr::fraction::fraction",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::fraction::fraction",1,"kfr::i64");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::fraction::fraction",2,"kfr::i64");
  arg1 = (kfr::i64)lua_tonumber(L, 1);
  arg2 = (kfr::i64)lua_tonumber(L, 2);
  result = (kfr::fraction *)new kfr::fraction(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__fraction,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fraction__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::i64 arg1 ;
  kfr::fraction *result = 0 ;
  
  SWIG_check_num_args("kfr::fraction::fraction",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::fraction::fraction",1,"kfr::i64");
  arg1 = (kfr::i64)lua_tonumber(L, 1);
  result = (kfr::fraction *)new kfr::fraction(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__fraction,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fraction__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::fraction *result = 0 ;
  
  SWIG_check_num_args("kfr::fraction::fraction",0,0)
  result = (kfr::fraction *)new kfr::fraction();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__fraction,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fraction(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_fraction__SWIG_2(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_fraction__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_fraction__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_fraction'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::fraction::fraction(kfr::i64,kfr::i64)\n"
    "    kfr::fraction::fraction(kfr::i64)\n"
    "    kfr::fraction::fraction()\n");
  lua_error(L);return 0;
}


static int _wrap_fraction_normalize(lua_State* L) {
  int SWIG_arg = 0;
  kfr::fraction *arg1 = (kfr::fraction *) 0 ;
  
  SWIG_check_num_args("kfr::fraction::normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::fraction::normalize",1,"kfr::fraction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__fraction,0))){
    SWIG_fail_ptr("fraction_normalize",1,SWIGTYPE_p_kfr__fraction);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fraction_numerator_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::fraction *arg1 = (kfr::fraction *) 0 ;
  kfr::i64 arg2 ;
  
  SWIG_check_num_args("kfr::fraction::numerator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::fraction::numerator",1,"kfr::fraction *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::fraction::numerator",2,"kfr::i64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__fraction,0))){
    SWIG_fail_ptr("fraction_numerator_set",1,SWIGTYPE_p_kfr__fraction);
  }
  
  arg2 = (kfr::i64)lua_tonumber(L, 2);
  if (arg1) (arg1)->numerator = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fraction_numerator_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::fraction *arg1 = (kfr::fraction *) 0 ;
  kfr::i64 result;
  
  SWIG_check_num_args("kfr::fraction::numerator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::fraction::numerator",1,"kfr::fraction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__fraction,0))){
    SWIG_fail_ptr("fraction_numerator_get",1,SWIGTYPE_p_kfr__fraction);
  }
  
  result = (kfr::i64) ((arg1)->numerator);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fraction_denominator_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::fraction *arg1 = (kfr::fraction *) 0 ;
  kfr::i64 arg2 ;
  
  SWIG_check_num_args("kfr::fraction::denominator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::fraction::denominator",1,"kfr::fraction *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::fraction::denominator",2,"kfr::i64");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__fraction,0))){
    SWIG_fail_ptr("fraction_denominator_set",1,SWIGTYPE_p_kfr__fraction);
  }
  
  arg2 = (kfr::i64)lua_tonumber(L, 2);
  if (arg1) (arg1)->denominator = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fraction_denominator_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::fraction *arg1 = (kfr::fraction *) 0 ;
  kfr::i64 result;
  
  SWIG_check_num_args("kfr::fraction::denominator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::fraction::denominator",1,"kfr::fraction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__fraction,0))){
    SWIG_fail_ptr("fraction_denominator_get",1,SWIGTYPE_p_kfr__fraction);
  }
  
  result = (kfr::i64) ((arg1)->denominator);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fraction___add(lua_State* L) {
  int SWIG_arg = 0;
  kfr::fraction *arg1 = (kfr::fraction *) 0 ;
  kfr::fraction result;
  
  SWIG_check_num_args("kfr::fraction::operator +",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::fraction::operator +",1,"kfr::fraction const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__fraction,0))){
    SWIG_fail_ptr("fraction___add",1,SWIGTYPE_p_kfr__fraction);
  }
  
  result = ((kfr::fraction const *)arg1)->operator +();
  {
    kfr::fraction * resultptr = new kfr::fraction((const kfr::fraction &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__fraction,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fraction___unm(lua_State* L) {
  int SWIG_arg = 0;
  kfr::fraction *arg1 = (kfr::fraction *) 0 ;
  kfr::fraction result;
  
  SWIG_check_num_args("kfr::fraction::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::fraction::operator -",1,"kfr::fraction const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__fraction,0))){
    SWIG_fail_ptr("fraction___unm",1,SWIGTYPE_p_kfr__fraction);
  }
  
  result = ((kfr::fraction const *)arg1)->operator -();
  {
    kfr::fraction * resultptr = new kfr::fraction((const kfr::fraction &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__fraction,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_fraction(void *obj) {
kfr::fraction *arg1 = (kfr::fraction *) obj;
delete arg1;
}
static int _proxy__wrap_new_fraction(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_fraction);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_fraction_attributes[] = {
    { "numerator", _wrap_fraction_numerator_get, _wrap_fraction_numerator_set },
    { "denominator", _wrap_fraction_denominator_get, _wrap_fraction_denominator_set },
    {0,0,0}
};
static swig_lua_method swig_fraction_methods[]= {
    { "normalize", _wrap_fraction_normalize},
    { "__add", _wrap_fraction___add},
    { "__unm", _wrap_fraction___unm},
    {0,0}
};
static swig_lua_method swig_fraction_meta[] = {
    { "__add", _wrap_fraction___add},
    { "__unm", _wrap_fraction___unm},
    {0,0}
};

static swig_lua_attribute swig_fraction_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_fraction_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_fraction_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_fraction_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_fraction_Sf_SwigStatic = {
    "fraction",
    swig_fraction_Sf_SwigStatic_methods,
    swig_fraction_Sf_SwigStatic_attributes,
    swig_fraction_Sf_SwigStatic_constants,
    swig_fraction_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_fraction_bases[] = {0};
static const char *swig_fraction_base_names[] = {0};
static swig_lua_class _wrap_class_fraction = { "fraction", "fraction", &SWIGTYPE_p_kfr__fraction,_proxy__wrap_new_fraction, swig_delete_fraction, swig_fraction_methods, swig_fraction_attributes, &swig_fraction_Sf_SwigStatic, swig_fraction_meta, swig_fraction_bases, swig_fraction_base_names };

static int _wrap_new_vectorf32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  float *arg2 = 0 ;
  float temp2 ;
  std::vector< f32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< f32 >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::vector",2,"float const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< f32 > *)new std::vector< f32 >(arg1,(float const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorf32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< f32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< f32 >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< f32 > *)new std::vector< f32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorf32__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< float > *arg1 = 0 ;
  std::vector< f32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< f32 >::vector",1,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("new_vectorf32",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (std::vector< f32 > *)new std::vector< f32 >((std::vector< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorf32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vectorf32__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vectorf32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vectorf32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vectorf32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< f32 >::vector(size_t,float const &)\n"
    "    std::vector< f32 >::vector(size_t)\n"
    "    std::vector< f32 >::vector(std::vector< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_vectorf32___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  size_t arg2 ;
  float result;
  
  SWIG_check_num_args("std::vector< f32 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::__getitem",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32___getitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float)std_vector_Sl_f32_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  size_t arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("std::vector< f32 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::__setitem",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< f32 >::__setitem",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32___setitem",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  std_vector_Sl_f32_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< f32 >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::begin",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_begin",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_f32_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< float > > result;
  
  SWIG_check_num_args("std::vector< f32 >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::end",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_c_end",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = std_vector_Sl_f32_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< float > * resultptr = new std::vector_iterator< float >((const std::vector_iterator< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< f32 >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::erase",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_f32_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< f32 >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::erase",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< f32 >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_erase",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_f32_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_vectorf32_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_vectorf32_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'vectorf32_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< f32 >::erase(size_t)\n"
    "    std::vector< f32 >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_vectorf32_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::front",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_front",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::back",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("std::vector< f32 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::push_back",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::push_back",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_push_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::pop_back",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_pop_back",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  size_t arg2 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::at",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_at",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (float *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  size_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("std::vector< f32 >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::assign",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< f32 >::assign",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_assign",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::data",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_data",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (float *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< f32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::size",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< f32 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::empty",1,"std::vector< f32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_empty",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (bool)((std::vector< f32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< f32 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::resize",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_resize",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::clear",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_clear",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::swap",1,"std::vector< f32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< f32 >::swap",2,"std::vector< float > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_swap",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_swap",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f32 >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::shrink_to_fit",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< f32 >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::reserve",1,"std::vector< f32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f32 >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_reserve",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< f32 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::max_size",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_max_size",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf32_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f32 > *arg1 = (std::vector< f32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< f32 >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f32 >::capacity",1,"std::vector< f32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("vectorf32_capacity",1,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vectorf32(void *obj) {
std::vector< f32 > *arg1 = (std::vector< f32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_vectorf32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vectorf32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vectorf32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vectorf32_methods[]= {
    { "__getitem", _wrap_vectorf32___getitem},
    { "__setitem", _wrap_vectorf32___setitem},
    { "begin", _wrap_vectorf32_begin},
    { "c_end", _wrap_vectorf32_c_end},
    { "erase", _wrap_vectorf32_erase},
    { "front", _wrap_vectorf32_front},
    { "back", _wrap_vectorf32_back},
    { "push_back", _wrap_vectorf32_push_back},
    { "pop_back", _wrap_vectorf32_pop_back},
    { "at", _wrap_vectorf32_at},
    { "assign", _wrap_vectorf32_assign},
    { "data", _wrap_vectorf32_data},
    { "size", _wrap_vectorf32_size},
    { "empty", _wrap_vectorf32_empty},
    { "resize", _wrap_vectorf32_resize},
    { "clear", _wrap_vectorf32_clear},
    { "swap", _wrap_vectorf32_swap},
    { "shrink_to_fit", _wrap_vectorf32_shrink_to_fit},
    { "reserve", _wrap_vectorf32_reserve},
    { "max_size", _wrap_vectorf32_max_size},
    { "capacity", _wrap_vectorf32_capacity},
    {0,0}
};
static swig_lua_method swig_vectorf32_meta[] = {
    { "__getitem", _wrap_vectorf32___getitem},
    { "__setitem", _wrap_vectorf32___setitem},
    {0,0}
};

static swig_lua_attribute swig_vectorf32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vectorf32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vectorf32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vectorf32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vectorf32_Sf_SwigStatic = {
    "vectorf32",
    swig_vectorf32_Sf_SwigStatic_methods,
    swig_vectorf32_Sf_SwigStatic_attributes,
    swig_vectorf32_Sf_SwigStatic_constants,
    swig_vectorf32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vectorf32_bases[] = {0};
static const char *swig_vectorf32_base_names[] = {0};
static swig_lua_class _wrap_class_vectorf32 = { "vectorf32", "vectorf32", &SWIGTYPE_p_std__vectorT_float_t,_proxy__wrap_new_vectorf32, swig_delete_vectorf32, swig_vectorf32_methods, swig_vectorf32_attributes, &swig_vectorf32_Sf_SwigStatic, swig_vectorf32_meta, swig_vectorf32_bases, swig_vectorf32_base_names };

static int _wrap_new_vectorf64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  double *arg2 = 0 ;
  double temp2 ;
  std::vector< f64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< f64 >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::vector",2,"double const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< f64 > *)new std::vector< f64 >(arg1,(double const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorf64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< f64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< f64 >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< f64 > *)new std::vector< f64 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorf64__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< double > *arg1 = 0 ;
  std::vector< f64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< f64 >::vector",1,"std::vector< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("new_vectorf64",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (std::vector< f64 > *)new std::vector< f64 >((std::vector< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorf64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vectorf64__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vectorf64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vectorf64__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vectorf64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< f64 >::vector(size_t,double const &)\n"
    "    std::vector< f64 >::vector(size_t)\n"
    "    std::vector< f64 >::vector(std::vector< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_vectorf64___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  size_t arg2 ;
  double result;
  
  SWIG_check_num_args("std::vector< f64 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::__getitem",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64___getitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double)std_vector_Sl_f64_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("std::vector< f64 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::__setitem",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< f64 >::__setitem",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64___setitem",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  std_vector_Sl_f64_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< f64 >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::begin",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_begin",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_f64_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< double > > result;
  
  SWIG_check_num_args("std::vector< f64 >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::end",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_c_end",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = std_vector_Sl_f64_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< double > * resultptr = new std::vector_iterator< double >((const std::vector_iterator< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< f64 >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::erase",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_f64_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< f64 >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::erase",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< f64 >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_erase",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_f64_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_vectorf64_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_vectorf64_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'vectorf64_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< f64 >::erase(size_t)\n"
    "    std::vector< f64 >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_vectorf64_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::front",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_front",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::back",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  SWIG_check_num_args("std::vector< f64 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::push_back",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::push_back",2,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_push_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  temp2=(double)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((double const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::pop_back",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_pop_back",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  size_t arg2 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::at",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_at",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (double *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  size_t arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("std::vector< f64 >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::assign",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< f64 >::assign",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_assign",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::data",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_data",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (double *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< f64 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::size",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< f64 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::empty",1,"std::vector< f64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_empty",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (bool)((std::vector< f64 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< f64 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::resize",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_resize",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::clear",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_clear",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::swap",1,"std::vector< f64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< f64 >::swap",2,"std::vector< double > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_swap",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_swap",2,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< f64 >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::shrink_to_fit",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< f64 >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::reserve",1,"std::vector< f64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< f64 >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_reserve",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< f64 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::max_size",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_max_size",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorf64_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< f64 > *arg1 = (std::vector< f64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< f64 >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< f64 >::capacity",1,"std::vector< f64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_double_t,0))){
    SWIG_fail_ptr("vectorf64_capacity",1,SWIGTYPE_p_std__vectorT_double_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vectorf64(void *obj) {
std::vector< f64 > *arg1 = (std::vector< f64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_vectorf64(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vectorf64);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vectorf64_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vectorf64_methods[]= {
    { "__getitem", _wrap_vectorf64___getitem},
    { "__setitem", _wrap_vectorf64___setitem},
    { "begin", _wrap_vectorf64_begin},
    { "c_end", _wrap_vectorf64_c_end},
    { "erase", _wrap_vectorf64_erase},
    { "front", _wrap_vectorf64_front},
    { "back", _wrap_vectorf64_back},
    { "push_back", _wrap_vectorf64_push_back},
    { "pop_back", _wrap_vectorf64_pop_back},
    { "at", _wrap_vectorf64_at},
    { "assign", _wrap_vectorf64_assign},
    { "data", _wrap_vectorf64_data},
    { "size", _wrap_vectorf64_size},
    { "empty", _wrap_vectorf64_empty},
    { "resize", _wrap_vectorf64_resize},
    { "clear", _wrap_vectorf64_clear},
    { "swap", _wrap_vectorf64_swap},
    { "shrink_to_fit", _wrap_vectorf64_shrink_to_fit},
    { "reserve", _wrap_vectorf64_reserve},
    { "max_size", _wrap_vectorf64_max_size},
    { "capacity", _wrap_vectorf64_capacity},
    {0,0}
};
static swig_lua_method swig_vectorf64_meta[] = {
    { "__getitem", _wrap_vectorf64___getitem},
    { "__setitem", _wrap_vectorf64___setitem},
    {0,0}
};

static swig_lua_attribute swig_vectorf64_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vectorf64_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vectorf64_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vectorf64_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vectorf64_Sf_SwigStatic = {
    "vectorf64",
    swig_vectorf64_Sf_SwigStatic_methods,
    swig_vectorf64_Sf_SwigStatic_attributes,
    swig_vectorf64_Sf_SwigStatic_constants,
    swig_vectorf64_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vectorf64_bases[] = {0};
static const char *swig_vectorf64_base_names[] = {0};
static swig_lua_class _wrap_class_vectorf64 = { "vectorf64", "vectorf64", &SWIGTYPE_p_std__vectorT_double_t,_proxy__wrap_new_vectorf64, swig_delete_vectorf64, swig_vectorf64_methods, swig_vectorf64_attributes, &swig_vectorf64_Sf_SwigStatic, swig_vectorf64_meta, swig_vectorf64_bases, swig_vectorf64_base_names };

static int _wrap_new_vectori8__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  std::vector< i8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i8 >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::vector",2,"signed char const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< i8 > *)new std::vector< i8 >(arg1,(signed char const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori8__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< i8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i8 >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< i8 > *)new std::vector< i8 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori8__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< signed char > *arg1 = 0 ;
  std::vector< i8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< i8 >::vector",1,"std::vector< signed char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("new_vectori8",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (std::vector< i8 > *)new std::vector< i8 >((std::vector< signed char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_signed_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori8(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vectori8__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vectori8__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vectori8__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vectori8'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i8 >::vector(size_t,signed char const &)\n"
    "    std::vector< i8 >::vector(size_t)\n"
    "    std::vector< i8 >::vector(std::vector< signed char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_vectori8___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  size_t arg2 ;
  signed char result;
  
  SWIG_check_num_args("std::vector< i8 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::__getitem",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8___getitem",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char)std_vector_Sl_i8_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  size_t arg2 ;
  signed char arg3 ;
  
  SWIG_check_num_args("std::vector< i8 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::__setitem",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i8 >::__setitem",3,"signed char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8___setitem",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (signed char)lua_tonumber(L, 3);
  std_vector_Sl_i8_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< signed char > > result;
  
  SWIG_check_num_args("std::vector< i8 >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::begin",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_begin",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = std_vector_Sl_i8_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< signed char > * resultptr = new std::vector_iterator< signed char >((const std::vector_iterator< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< signed char > > result;
  
  SWIG_check_num_args("std::vector< i8 >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::end",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_c_end",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = std_vector_Sl_i8_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< signed char > * resultptr = new std::vector_iterator< signed char >((const std::vector_iterator< signed char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< i8 >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::erase",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_erase",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_i8_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< i8 >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::erase",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i8 >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_erase",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_i8_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_vectori8_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_signed_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_vectori8_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'vectori8_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i8 >::erase(size_t)\n"
    "    std::vector< i8 >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_vectori8_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::front",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_front",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (signed char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::back",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_back",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (signed char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  signed char *arg2 = 0 ;
  signed char temp2 ;
  
  SWIG_check_num_args("std::vector< i8 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::push_back",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::push_back",2,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_push_back",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  temp2=(signed char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((signed char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::pop_back",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_pop_back",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  size_t arg2 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::at",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_at",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (signed char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  size_t arg2 ;
  signed char *arg3 = 0 ;
  signed char temp3 ;
  
  SWIG_check_num_args("std::vector< i8 >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::assign",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i8 >::assign",3,"signed char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_assign",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(signed char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(signed char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  signed char *result = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::data",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_data",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (signed char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_signed_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< i8 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::size",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_size",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< i8 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::empty",1,"std::vector< i8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_empty",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (bool)((std::vector< i8 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< i8 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::resize",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_resize",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::clear",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_clear",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  std::vector< signed char > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::swap",1,"std::vector< i8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< i8 >::swap",2,"std::vector< signed char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_swap",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_swap",2,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i8 >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::shrink_to_fit",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< i8 >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::reserve",1,"std::vector< i8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i8 >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_reserve",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< i8 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::max_size",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_max_size",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori8_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i8 > *arg1 = (std::vector< i8 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< i8 >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i8 >::capacity",1,"std::vector< i8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_signed_char_t,0))){
    SWIG_fail_ptr("vectori8_capacity",1,SWIGTYPE_p_std__vectorT_signed_char_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vectori8(void *obj) {
std::vector< i8 > *arg1 = (std::vector< i8 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_vectori8(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vectori8);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vectori8_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vectori8_methods[]= {
    { "__getitem", _wrap_vectori8___getitem},
    { "__setitem", _wrap_vectori8___setitem},
    { "begin", _wrap_vectori8_begin},
    { "c_end", _wrap_vectori8_c_end},
    { "erase", _wrap_vectori8_erase},
    { "front", _wrap_vectori8_front},
    { "back", _wrap_vectori8_back},
    { "push_back", _wrap_vectori8_push_back},
    { "pop_back", _wrap_vectori8_pop_back},
    { "at", _wrap_vectori8_at},
    { "assign", _wrap_vectori8_assign},
    { "data", _wrap_vectori8_data},
    { "size", _wrap_vectori8_size},
    { "empty", _wrap_vectori8_empty},
    { "resize", _wrap_vectori8_resize},
    { "clear", _wrap_vectori8_clear},
    { "swap", _wrap_vectori8_swap},
    { "shrink_to_fit", _wrap_vectori8_shrink_to_fit},
    { "reserve", _wrap_vectori8_reserve},
    { "max_size", _wrap_vectori8_max_size},
    { "capacity", _wrap_vectori8_capacity},
    {0,0}
};
static swig_lua_method swig_vectori8_meta[] = {
    { "__getitem", _wrap_vectori8___getitem},
    { "__setitem", _wrap_vectori8___setitem},
    {0,0}
};

static swig_lua_attribute swig_vectori8_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vectori8_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vectori8_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vectori8_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vectori8_Sf_SwigStatic = {
    "vectori8",
    swig_vectori8_Sf_SwigStatic_methods,
    swig_vectori8_Sf_SwigStatic_attributes,
    swig_vectori8_Sf_SwigStatic_constants,
    swig_vectori8_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vectori8_bases[] = {0};
static const char *swig_vectori8_base_names[] = {0};
static swig_lua_class _wrap_class_vectori8 = { "vectori8", "vectori8", &SWIGTYPE_p_std__vectorT_signed_char_t,_proxy__wrap_new_vectori8, swig_delete_vectori8, swig_vectori8_methods, swig_vectori8_attributes, &swig_vectori8_Sf_SwigStatic, swig_vectori8_meta, swig_vectori8_bases, swig_vectori8_base_names };

static int _wrap_new_vectorui8__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  std::vector< u8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u8 >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::vector",2,"unsigned char const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< u8 > *)new std::vector< u8 >(arg1,(unsigned char const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorui8__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< u8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u8 >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< u8 > *)new std::vector< u8 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorui8__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned char > *arg1 = 0 ;
  std::vector< u8 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< u8 >::vector",1,"std::vector< unsigned char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_vectorui8",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (std::vector< u8 > *)new std::vector< u8 >((std::vector< unsigned char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_char_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorui8(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vectorui8__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vectorui8__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vectorui8__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vectorui8'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u8 >::vector(size_t,unsigned char const &)\n"
    "    std::vector< u8 >::vector(size_t)\n"
    "    std::vector< u8 >::vector(std::vector< unsigned char > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_vectorui8___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  size_t arg2 ;
  unsigned char result;
  
  SWIG_check_num_args("std::vector< u8 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::__getitem",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char)std_vector_Sl_u8_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  size_t arg2 ;
  unsigned char arg3 ;
  
  SWIG_check_num_args("std::vector< u8 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::__setitem",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u8 >::__setitem",3,"unsigned char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned char)lua_tonumber(L, 3);
  std_vector_Sl_u8_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned char > > result;
  
  SWIG_check_num_args("std::vector< u8 >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::begin",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_begin",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = std_vector_Sl_u8_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< unsigned char > * resultptr = new std::vector_iterator< unsigned char >((const std::vector_iterator< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned char > > result;
  
  SWIG_check_num_args("std::vector< u8 >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::end",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_c_end",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = std_vector_Sl_u8_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< unsigned char > * resultptr = new std::vector_iterator< unsigned char >((const std::vector_iterator< unsigned char > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< u8 >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::erase",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_erase",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_u8_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< u8 >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::erase",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u8 >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_erase",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_u8_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_vectorui8_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_char_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_vectorui8_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'vectorui8_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u8 >::erase(size_t)\n"
    "    std::vector< u8 >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_vectorui8_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::front",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_front",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned char *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::back",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned char *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  SWIG_check_num_args("std::vector< u8 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::push_back",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::push_back",2,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned char)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned char const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::pop_back",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  size_t arg2 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::at",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_at",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned char *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  size_t arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  SWIG_check_num_args("std::vector< u8 >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::assign",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u8 >::assign",3,"unsigned char const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_assign",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned char)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(unsigned char const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  unsigned char *result = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::data",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_data",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (unsigned char *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_char,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< u8 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::size",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_size",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< u8 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::empty",1,"std::vector< u8 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_empty",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (bool)((std::vector< u8 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< u8 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::resize",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_resize",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::clear",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_clear",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::swap",1,"std::vector< u8 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< u8 >::swap",2,"std::vector< unsigned char > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_swap",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_swap",2,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u8 >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::shrink_to_fit",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< u8 >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::reserve",1,"std::vector< u8 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u8 >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_reserve",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< u8 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::max_size",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui8_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u8 > *arg1 = (std::vector< u8 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< u8 >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u8 >::capacity",1,"std::vector< u8 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("vectorui8_capacity",1,SWIGTYPE_p_std__vectorT_unsigned_char_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vectorui8(void *obj) {
std::vector< u8 > *arg1 = (std::vector< u8 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_vectorui8(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vectorui8);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vectorui8_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vectorui8_methods[]= {
    { "__getitem", _wrap_vectorui8___getitem},
    { "__setitem", _wrap_vectorui8___setitem},
    { "begin", _wrap_vectorui8_begin},
    { "c_end", _wrap_vectorui8_c_end},
    { "erase", _wrap_vectorui8_erase},
    { "front", _wrap_vectorui8_front},
    { "back", _wrap_vectorui8_back},
    { "push_back", _wrap_vectorui8_push_back},
    { "pop_back", _wrap_vectorui8_pop_back},
    { "at", _wrap_vectorui8_at},
    { "assign", _wrap_vectorui8_assign},
    { "data", _wrap_vectorui8_data},
    { "size", _wrap_vectorui8_size},
    { "empty", _wrap_vectorui8_empty},
    { "resize", _wrap_vectorui8_resize},
    { "clear", _wrap_vectorui8_clear},
    { "swap", _wrap_vectorui8_swap},
    { "shrink_to_fit", _wrap_vectorui8_shrink_to_fit},
    { "reserve", _wrap_vectorui8_reserve},
    { "max_size", _wrap_vectorui8_max_size},
    { "capacity", _wrap_vectorui8_capacity},
    {0,0}
};
static swig_lua_method swig_vectorui8_meta[] = {
    { "__getitem", _wrap_vectorui8___getitem},
    { "__setitem", _wrap_vectorui8___setitem},
    {0,0}
};

static swig_lua_attribute swig_vectorui8_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vectorui8_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vectorui8_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vectorui8_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vectorui8_Sf_SwigStatic = {
    "vectorui8",
    swig_vectorui8_Sf_SwigStatic_methods,
    swig_vectorui8_Sf_SwigStatic_attributes,
    swig_vectorui8_Sf_SwigStatic_constants,
    swig_vectorui8_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vectorui8_bases[] = {0};
static const char *swig_vectorui8_base_names[] = {0};
static swig_lua_class _wrap_class_vectorui8 = { "vectorui8", "vectorui8", &SWIGTYPE_p_std__vectorT_unsigned_char_t,_proxy__wrap_new_vectorui8, swig_delete_vectorui8, swig_vectorui8_methods, swig_vectorui8_attributes, &swig_vectorui8_Sf_SwigStatic, swig_vectorui8_meta, swig_vectorui8_bases, swig_vectorui8_base_names };

static int _wrap_new_vectori16__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  short *arg2 = 0 ;
  short temp2 ;
  std::vector< i16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i16 >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::vector",2,"short const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< i16 > *)new std::vector< i16 >(arg1,(short const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori16__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< i16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i16 >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< i16 > *)new std::vector< i16 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori16__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< short > *arg1 = 0 ;
  std::vector< i16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< i16 >::vector",1,"std::vector< short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("new_vectori16",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (std::vector< i16 > *)new std::vector< i16 >((std::vector< short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori16(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vectori16__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vectori16__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vectori16__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vectori16'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i16 >::vector(size_t,short const &)\n"
    "    std::vector< i16 >::vector(size_t)\n"
    "    std::vector< i16 >::vector(std::vector< short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_vectori16___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  size_t arg2 ;
  short result;
  
  SWIG_check_num_args("std::vector< i16 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::__getitem",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16___getitem",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short)std_vector_Sl_i16_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  size_t arg2 ;
  short arg3 ;
  
  SWIG_check_num_args("std::vector< i16 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::__setitem",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i16 >::__setitem",3,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16___setitem",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (short)lua_tonumber(L, 3);
  std_vector_Sl_i16_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< short > > result;
  
  SWIG_check_num_args("std::vector< i16 >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::begin",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_begin",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = std_vector_Sl_i16_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< short > * resultptr = new std::vector_iterator< short >((const std::vector_iterator< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< short > > result;
  
  SWIG_check_num_args("std::vector< i16 >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::end",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_c_end",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = std_vector_Sl_i16_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< short > * resultptr = new std::vector_iterator< short >((const std::vector_iterator< short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< i16 >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::erase",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_erase",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_i16_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< i16 >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::erase",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i16 >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_erase",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_i16_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_vectori16_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_vectori16_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'vectori16_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i16 >::erase(size_t)\n"
    "    std::vector< i16 >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_vectori16_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::front",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_front",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::back",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  short *arg2 = 0 ;
  short temp2 ;
  
  SWIG_check_num_args("std::vector< i16 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::push_back",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::push_back",2,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_push_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  temp2=(short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::pop_back",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_pop_back",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  size_t arg2 ;
  short *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::at",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_at",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  size_t arg2 ;
  short *arg3 = 0 ;
  short temp3 ;
  
  SWIG_check_num_args("std::vector< i16 >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::assign",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i16 >::assign",3,"short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_assign",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  short *result = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::data",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_data",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< i16 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::size",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_size",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< i16 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::empty",1,"std::vector< i16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_empty",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (bool)((std::vector< i16 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< i16 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::resize",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_resize",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::clear",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_clear",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  std::vector< short > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::swap",1,"std::vector< i16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< i16 >::swap",2,"std::vector< short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_swap",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_swap",2,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i16 >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::shrink_to_fit",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< i16 >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::reserve",1,"std::vector< i16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i16 >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_reserve",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< i16 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::max_size",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_max_size",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori16_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i16 > *arg1 = (std::vector< i16 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< i16 >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i16 >::capacity",1,"std::vector< i16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_short_t,0))){
    SWIG_fail_ptr("vectori16_capacity",1,SWIGTYPE_p_std__vectorT_short_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vectori16(void *obj) {
std::vector< i16 > *arg1 = (std::vector< i16 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_vectori16(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vectori16);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vectori16_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vectori16_methods[]= {
    { "__getitem", _wrap_vectori16___getitem},
    { "__setitem", _wrap_vectori16___setitem},
    { "begin", _wrap_vectori16_begin},
    { "c_end", _wrap_vectori16_c_end},
    { "erase", _wrap_vectori16_erase},
    { "front", _wrap_vectori16_front},
    { "back", _wrap_vectori16_back},
    { "push_back", _wrap_vectori16_push_back},
    { "pop_back", _wrap_vectori16_pop_back},
    { "at", _wrap_vectori16_at},
    { "assign", _wrap_vectori16_assign},
    { "data", _wrap_vectori16_data},
    { "size", _wrap_vectori16_size},
    { "empty", _wrap_vectori16_empty},
    { "resize", _wrap_vectori16_resize},
    { "clear", _wrap_vectori16_clear},
    { "swap", _wrap_vectori16_swap},
    { "shrink_to_fit", _wrap_vectori16_shrink_to_fit},
    { "reserve", _wrap_vectori16_reserve},
    { "max_size", _wrap_vectori16_max_size},
    { "capacity", _wrap_vectori16_capacity},
    {0,0}
};
static swig_lua_method swig_vectori16_meta[] = {
    { "__getitem", _wrap_vectori16___getitem},
    { "__setitem", _wrap_vectori16___setitem},
    {0,0}
};

static swig_lua_attribute swig_vectori16_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vectori16_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vectori16_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vectori16_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vectori16_Sf_SwigStatic = {
    "vectori16",
    swig_vectori16_Sf_SwigStatic_methods,
    swig_vectori16_Sf_SwigStatic_attributes,
    swig_vectori16_Sf_SwigStatic_constants,
    swig_vectori16_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vectori16_bases[] = {0};
static const char *swig_vectori16_base_names[] = {0};
static swig_lua_class _wrap_class_vectori16 = { "vectori16", "vectori16", &SWIGTYPE_p_std__vectorT_short_t,_proxy__wrap_new_vectori16, swig_delete_vectori16, swig_vectori16_methods, swig_vectori16_attributes, &swig_vectori16_Sf_SwigStatic, swig_vectori16_meta, swig_vectori16_bases, swig_vectori16_base_names };

static int _wrap_new_vectorui16__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  std::vector< u16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u16 >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::vector",2,"unsigned short const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< u16 > *)new std::vector< u16 >(arg1,(unsigned short const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorui16__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< u16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u16 >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< u16 > *)new std::vector< u16 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorui16__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned short > *arg1 = 0 ;
  std::vector< u16 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< u16 >::vector",1,"std::vector< unsigned short > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_vectorui16",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (std::vector< u16 > *)new std::vector< u16 >((std::vector< unsigned short > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorui16(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vectorui16__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vectorui16__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vectorui16__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vectorui16'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u16 >::vector(size_t,unsigned short const &)\n"
    "    std::vector< u16 >::vector(size_t)\n"
    "    std::vector< u16 >::vector(std::vector< unsigned short > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_vectorui16___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  size_t arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("std::vector< u16 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::__getitem",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short)std_vector_Sl_u16_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  size_t arg2 ;
  unsigned short arg3 ;
  
  SWIG_check_num_args("std::vector< u16 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::__setitem",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u16 >::__setitem",3,"unsigned short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned short)lua_tonumber(L, 3);
  std_vector_Sl_u16_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned short > > result;
  
  SWIG_check_num_args("std::vector< u16 >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::begin",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_begin",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = std_vector_Sl_u16_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< unsigned short > * resultptr = new std::vector_iterator< unsigned short >((const std::vector_iterator< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned short > > result;
  
  SWIG_check_num_args("std::vector< u16 >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::end",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_c_end",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = std_vector_Sl_u16_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< unsigned short > * resultptr = new std::vector_iterator< unsigned short >((const std::vector_iterator< unsigned short > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< u16 >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::erase",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_erase",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_u16_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< u16 >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::erase",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u16 >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_erase",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_u16_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_vectorui16_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_short_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_vectorui16_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'vectorui16_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u16 >::erase(size_t)\n"
    "    std::vector< u16 >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_vectorui16_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::front",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_front",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned short *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::back",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned short *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  SWIG_check_num_args("std::vector< u16 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::push_back",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::push_back",2,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned short)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned short const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::pop_back",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  size_t arg2 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::at",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_at",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned short *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  size_t arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  SWIG_check_num_args("std::vector< u16 >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::assign",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u16 >::assign",3,"unsigned short const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_assign",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned short)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(unsigned short const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  unsigned short *result = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::data",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_data",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (unsigned short *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_short,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< u16 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::size",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_size",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< u16 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::empty",1,"std::vector< u16 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_empty",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (bool)((std::vector< u16 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< u16 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::resize",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_resize",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::clear",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_clear",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  std::vector< unsigned short > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::swap",1,"std::vector< u16 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< u16 >::swap",2,"std::vector< unsigned short > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_swap",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_swap",2,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u16 >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::shrink_to_fit",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< u16 >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::reserve",1,"std::vector< u16 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u16 >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_reserve",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< u16 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::max_size",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui16_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u16 > *arg1 = (std::vector< u16 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< u16 >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u16 >::capacity",1,"std::vector< u16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("vectorui16_capacity",1,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vectorui16(void *obj) {
std::vector< u16 > *arg1 = (std::vector< u16 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_vectorui16(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vectorui16);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vectorui16_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vectorui16_methods[]= {
    { "__getitem", _wrap_vectorui16___getitem},
    { "__setitem", _wrap_vectorui16___setitem},
    { "begin", _wrap_vectorui16_begin},
    { "c_end", _wrap_vectorui16_c_end},
    { "erase", _wrap_vectorui16_erase},
    { "front", _wrap_vectorui16_front},
    { "back", _wrap_vectorui16_back},
    { "push_back", _wrap_vectorui16_push_back},
    { "pop_back", _wrap_vectorui16_pop_back},
    { "at", _wrap_vectorui16_at},
    { "assign", _wrap_vectorui16_assign},
    { "data", _wrap_vectorui16_data},
    { "size", _wrap_vectorui16_size},
    { "empty", _wrap_vectorui16_empty},
    { "resize", _wrap_vectorui16_resize},
    { "clear", _wrap_vectorui16_clear},
    { "swap", _wrap_vectorui16_swap},
    { "shrink_to_fit", _wrap_vectorui16_shrink_to_fit},
    { "reserve", _wrap_vectorui16_reserve},
    { "max_size", _wrap_vectorui16_max_size},
    { "capacity", _wrap_vectorui16_capacity},
    {0,0}
};
static swig_lua_method swig_vectorui16_meta[] = {
    { "__getitem", _wrap_vectorui16___getitem},
    { "__setitem", _wrap_vectorui16___setitem},
    {0,0}
};

static swig_lua_attribute swig_vectorui16_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vectorui16_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vectorui16_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vectorui16_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vectorui16_Sf_SwigStatic = {
    "vectorui16",
    swig_vectorui16_Sf_SwigStatic_methods,
    swig_vectorui16_Sf_SwigStatic_attributes,
    swig_vectorui16_Sf_SwigStatic_constants,
    swig_vectorui16_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vectorui16_bases[] = {0};
static const char *swig_vectorui16_base_names[] = {0};
static swig_lua_class _wrap_class_vectorui16 = { "vectorui16", "vectorui16", &SWIGTYPE_p_std__vectorT_unsigned_short_t,_proxy__wrap_new_vectorui16, swig_delete_vectorui16, swig_vectorui16_methods, swig_vectorui16_attributes, &swig_vectorui16_Sf_SwigStatic, swig_vectorui16_meta, swig_vectorui16_bases, swig_vectorui16_base_names };

static int _wrap_new_vectori32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  int *arg2 = 0 ;
  int temp2 ;
  std::vector< i32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i32 >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::vector",2,"int const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< i32 > *)new std::vector< i32 >(arg1,(int const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< i32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i32 >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< i32 > *)new std::vector< i32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori32__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = 0 ;
  std::vector< i32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< i32 >::vector",1,"std::vector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_vectori32",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (std::vector< i32 > *)new std::vector< i32 >((std::vector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vectori32__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vectori32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vectori32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vectori32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i32 >::vector(size_t,int const &)\n"
    "    std::vector< i32 >::vector(size_t)\n"
    "    std::vector< i32 >::vector(std::vector< int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_vectori32___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  size_t arg2 ;
  int result;
  
  SWIG_check_num_args("std::vector< i32 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::__getitem",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32___getitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int)std_vector_Sl_i32_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("std::vector< i32 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::__setitem",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i32 >::__setitem",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32___setitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  std_vector_Sl_i32_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< int > > result;
  
  SWIG_check_num_args("std::vector< i32 >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::begin",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_begin",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = std_vector_Sl_i32_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< int > * resultptr = new std::vector_iterator< int >((const std::vector_iterator< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< int > > result;
  
  SWIG_check_num_args("std::vector< i32 >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::end",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_c_end",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = std_vector_Sl_i32_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< int > * resultptr = new std::vector_iterator< int >((const std::vector_iterator< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< i32 >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::erase",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_erase",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_i32_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< i32 >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::erase",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i32 >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_erase",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_i32_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_vectori32_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_vectori32_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'vectori32_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i32 >::erase(size_t)\n"
    "    std::vector< i32 >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_vectori32_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::front",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_front",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::back",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  SWIG_check_num_args("std::vector< i32 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::push_back",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::push_back",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_push_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::pop_back",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_pop_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  size_t arg2 ;
  int *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::at",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_at",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  size_t arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  SWIG_check_num_args("std::vector< i32 >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::assign",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i32 >::assign",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_assign",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  int *result = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::data",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_data",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< i32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::size",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< i32 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::empty",1,"std::vector< i32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_empty",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (bool)((std::vector< i32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< i32 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::resize",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_resize",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::clear",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_clear",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::swap",1,"std::vector< i32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< i32 >::swap",2,"std::vector< int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_swap",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_swap",2,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i32 >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::shrink_to_fit",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< i32 >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::reserve",1,"std::vector< i32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i32 >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_reserve",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< i32 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::max_size",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_max_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori32_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i32 > *arg1 = (std::vector< i32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< i32 >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i32 >::capacity",1,"std::vector< i32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("vectori32_capacity",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vectori32(void *obj) {
std::vector< i32 > *arg1 = (std::vector< i32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_vectori32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vectori32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vectori32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vectori32_methods[]= {
    { "__getitem", _wrap_vectori32___getitem},
    { "__setitem", _wrap_vectori32___setitem},
    { "begin", _wrap_vectori32_begin},
    { "c_end", _wrap_vectori32_c_end},
    { "erase", _wrap_vectori32_erase},
    { "front", _wrap_vectori32_front},
    { "back", _wrap_vectori32_back},
    { "push_back", _wrap_vectori32_push_back},
    { "pop_back", _wrap_vectori32_pop_back},
    { "at", _wrap_vectori32_at},
    { "assign", _wrap_vectori32_assign},
    { "data", _wrap_vectori32_data},
    { "size", _wrap_vectori32_size},
    { "empty", _wrap_vectori32_empty},
    { "resize", _wrap_vectori32_resize},
    { "clear", _wrap_vectori32_clear},
    { "swap", _wrap_vectori32_swap},
    { "shrink_to_fit", _wrap_vectori32_shrink_to_fit},
    { "reserve", _wrap_vectori32_reserve},
    { "max_size", _wrap_vectori32_max_size},
    { "capacity", _wrap_vectori32_capacity},
    {0,0}
};
static swig_lua_method swig_vectori32_meta[] = {
    { "__getitem", _wrap_vectori32___getitem},
    { "__setitem", _wrap_vectori32___setitem},
    {0,0}
};

static swig_lua_attribute swig_vectori32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vectori32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vectori32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vectori32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vectori32_Sf_SwigStatic = {
    "vectori32",
    swig_vectori32_Sf_SwigStatic_methods,
    swig_vectori32_Sf_SwigStatic_attributes,
    swig_vectori32_Sf_SwigStatic_constants,
    swig_vectori32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vectori32_bases[] = {0};
static const char *swig_vectori32_base_names[] = {0};
static swig_lua_class _wrap_class_vectori32 = { "vectori32", "vectori32", &SWIGTYPE_p_std__vectorT_int_t,_proxy__wrap_new_vectori32, swig_delete_vectori32, swig_vectori32_methods, swig_vectori32_attributes, &swig_vectori32_Sf_SwigStatic, swig_vectori32_meta, swig_vectori32_bases, swig_vectori32_base_names };

static int _wrap_new_vectorui32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  std::vector< u32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u32 >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::vector",2,"unsigned int const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< u32 > *)new std::vector< u32 >(arg1,(unsigned int const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorui32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< u32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u32 >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< u32 > *)new std::vector< u32 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorui32__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned int > *arg1 = 0 ;
  std::vector< u32 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< u32 >::vector",1,"std::vector< unsigned int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_vectorui32",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (std::vector< u32 > *)new std::vector< u32 >((std::vector< unsigned int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorui32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vectorui32__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vectorui32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vectorui32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vectorui32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u32 >::vector(size_t,unsigned int const &)\n"
    "    std::vector< u32 >::vector(size_t)\n"
    "    std::vector< u32 >::vector(std::vector< unsigned int > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_vectorui32___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  size_t arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< u32 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::__getitem",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int)std_vector_Sl_u32_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  size_t arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("std::vector< u32 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::__setitem",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u32 >::__setitem",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (unsigned int)lua_tonumber(L, 3);
  std_vector_Sl_u32_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned int > > result;
  
  SWIG_check_num_args("std::vector< u32 >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::begin",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_begin",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = std_vector_Sl_u32_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< unsigned int > * resultptr = new std::vector_iterator< unsigned int >((const std::vector_iterator< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned int > > result;
  
  SWIG_check_num_args("std::vector< u32 >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::end",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_c_end",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = std_vector_Sl_u32_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< unsigned int > * resultptr = new std::vector_iterator< unsigned int >((const std::vector_iterator< unsigned int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< u32 >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::erase",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_erase",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_u32_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< u32 >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::erase",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u32 >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_erase",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_u32_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_vectorui32_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_vectorui32_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'vectorui32_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u32 >::erase(size_t)\n"
    "    std::vector< u32 >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_vectorui32_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::front",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_front",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::back",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  
  SWIG_check_num_args("std::vector< u32 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::push_back",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::push_back",2,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  temp2=(unsigned int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned int const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::pop_back",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  size_t arg2 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::at",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_at",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned int *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  size_t arg2 ;
  unsigned int *arg3 = 0 ;
  unsigned int temp3 ;
  
  SWIG_check_num_args("std::vector< u32 >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::assign",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u32 >::assign",3,"unsigned int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_assign",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  temp3=(unsigned int)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(unsigned int const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  unsigned int *result = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::data",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_data",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (unsigned int *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_int,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< u32 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::size",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< u32 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::empty",1,"std::vector< u32 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_empty",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (bool)((std::vector< u32 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< u32 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::resize",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_resize",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::clear",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_clear",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::swap",1,"std::vector< u32 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< u32 >::swap",2,"std::vector< unsigned int > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_swap",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_swap",2,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u32 >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::shrink_to_fit",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< u32 >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::reserve",1,"std::vector< u32 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u32 >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_reserve",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< u32 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::max_size",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui32_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u32 > *arg1 = (std::vector< u32 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< u32 >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u32 >::capacity",1,"std::vector< u32 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_int_t,0))){
    SWIG_fail_ptr("vectorui32_capacity",1,SWIGTYPE_p_std__vectorT_unsigned_int_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vectorui32(void *obj) {
std::vector< u32 > *arg1 = (std::vector< u32 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_vectorui32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vectorui32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vectorui32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vectorui32_methods[]= {
    { "__getitem", _wrap_vectorui32___getitem},
    { "__setitem", _wrap_vectorui32___setitem},
    { "begin", _wrap_vectorui32_begin},
    { "c_end", _wrap_vectorui32_c_end},
    { "erase", _wrap_vectorui32_erase},
    { "front", _wrap_vectorui32_front},
    { "back", _wrap_vectorui32_back},
    { "push_back", _wrap_vectorui32_push_back},
    { "pop_back", _wrap_vectorui32_pop_back},
    { "at", _wrap_vectorui32_at},
    { "assign", _wrap_vectorui32_assign},
    { "data", _wrap_vectorui32_data},
    { "size", _wrap_vectorui32_size},
    { "empty", _wrap_vectorui32_empty},
    { "resize", _wrap_vectorui32_resize},
    { "clear", _wrap_vectorui32_clear},
    { "swap", _wrap_vectorui32_swap},
    { "shrink_to_fit", _wrap_vectorui32_shrink_to_fit},
    { "reserve", _wrap_vectorui32_reserve},
    { "max_size", _wrap_vectorui32_max_size},
    { "capacity", _wrap_vectorui32_capacity},
    {0,0}
};
static swig_lua_method swig_vectorui32_meta[] = {
    { "__getitem", _wrap_vectorui32___getitem},
    { "__setitem", _wrap_vectorui32___setitem},
    {0,0}
};

static swig_lua_attribute swig_vectorui32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vectorui32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vectorui32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vectorui32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vectorui32_Sf_SwigStatic = {
    "vectorui32",
    swig_vectorui32_Sf_SwigStatic_methods,
    swig_vectorui32_Sf_SwigStatic_attributes,
    swig_vectorui32_Sf_SwigStatic_constants,
    swig_vectorui32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vectorui32_bases[] = {0};
static const char *swig_vectorui32_base_names[] = {0};
static swig_lua_class _wrap_class_vectorui32 = { "vectorui32", "vectorui32", &SWIGTYPE_p_std__vectorT_unsigned_int_t,_proxy__wrap_new_vectorui32, swig_delete_vectorui32, swig_vectorui32_methods, swig_vectorui32_attributes, &swig_vectorui32_Sf_SwigStatic, swig_vectorui32_meta, swig_vectorui32_bases, swig_vectorui32_base_names };

static int _wrap_new_vectori64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  std::vector< i64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i64 >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::vector",2,"long long const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< i64 > *)new std::vector< i64 >(arg1,(long long const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< i64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< i64 >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< i64 > *)new std::vector< i64 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori64__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< long long > *arg1 = 0 ;
  std::vector< i64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< i64 >::vector",1,"std::vector< long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("new_vectori64",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (std::vector< i64 > *)new std::vector< i64 >((std::vector< long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectori64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vectori64__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vectori64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vectori64__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vectori64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i64 >::vector(size_t,long long const &)\n"
    "    std::vector< i64 >::vector(size_t)\n"
    "    std::vector< i64 >::vector(std::vector< long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_vectori64___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  size_t arg2 ;
  long long result;
  
  SWIG_check_num_args("std::vector< i64 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::__getitem",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64___getitem",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long)std_vector_Sl_i64_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  size_t arg2 ;
  long long arg3 ;
  
  SWIG_check_num_args("std::vector< i64 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::__setitem",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i64 >::__setitem",3,"long long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64___setitem",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (long long)lua_tonumber(L, 3);
  std_vector_Sl_i64_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< long long > > result;
  
  SWIG_check_num_args("std::vector< i64 >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::begin",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_begin",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = std_vector_Sl_i64_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< long long > * resultptr = new std::vector_iterator< long long >((const std::vector_iterator< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< long long > > result;
  
  SWIG_check_num_args("std::vector< i64 >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::end",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_c_end",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = std_vector_Sl_i64_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< long long > * resultptr = new std::vector_iterator< long long >((const std::vector_iterator< long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< i64 >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::erase",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_erase",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_i64_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< i64 >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::erase",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i64 >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_erase",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_i64_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_vectori64_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_vectori64_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'vectori64_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< i64 >::erase(size_t)\n"
    "    std::vector< i64 >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_vectori64_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::front",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_front",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (long long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::back",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_back",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (long long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  long long *arg2 = 0 ;
  long long temp2 ;
  
  SWIG_check_num_args("std::vector< i64 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::push_back",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::push_back",2,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_push_back",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  temp2=(long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::pop_back",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_pop_back",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  size_t arg2 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::at",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_at",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (long long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  size_t arg2 ;
  long long *arg3 = 0 ;
  long long temp3 ;
  
  SWIG_check_num_args("std::vector< i64 >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::assign",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< i64 >::assign",3,"long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_assign",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(long long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(long long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  long long *result = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::data",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_data",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (long long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< i64 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::size",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_size",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< i64 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::empty",1,"std::vector< i64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_empty",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (bool)((std::vector< i64 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< i64 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::resize",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_resize",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::clear",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_clear",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  std::vector< long long > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::swap",1,"std::vector< i64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< i64 >::swap",2,"std::vector< long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_swap",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_swap",2,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< i64 >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::shrink_to_fit",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< i64 >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::reserve",1,"std::vector< i64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< i64 >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_reserve",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< i64 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::max_size",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_max_size",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectori64_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< i64 > *arg1 = (std::vector< i64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< i64 >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< i64 >::capacity",1,"std::vector< i64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_long_long_t,0))){
    SWIG_fail_ptr("vectori64_capacity",1,SWIGTYPE_p_std__vectorT_long_long_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vectori64(void *obj) {
std::vector< i64 > *arg1 = (std::vector< i64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_vectori64(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vectori64);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vectori64_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vectori64_methods[]= {
    { "__getitem", _wrap_vectori64___getitem},
    { "__setitem", _wrap_vectori64___setitem},
    { "begin", _wrap_vectori64_begin},
    { "c_end", _wrap_vectori64_c_end},
    { "erase", _wrap_vectori64_erase},
    { "front", _wrap_vectori64_front},
    { "back", _wrap_vectori64_back},
    { "push_back", _wrap_vectori64_push_back},
    { "pop_back", _wrap_vectori64_pop_back},
    { "at", _wrap_vectori64_at},
    { "assign", _wrap_vectori64_assign},
    { "data", _wrap_vectori64_data},
    { "size", _wrap_vectori64_size},
    { "empty", _wrap_vectori64_empty},
    { "resize", _wrap_vectori64_resize},
    { "clear", _wrap_vectori64_clear},
    { "swap", _wrap_vectori64_swap},
    { "shrink_to_fit", _wrap_vectori64_shrink_to_fit},
    { "reserve", _wrap_vectori64_reserve},
    { "max_size", _wrap_vectori64_max_size},
    { "capacity", _wrap_vectori64_capacity},
    {0,0}
};
static swig_lua_method swig_vectori64_meta[] = {
    { "__getitem", _wrap_vectori64___getitem},
    { "__setitem", _wrap_vectori64___setitem},
    {0,0}
};

static swig_lua_attribute swig_vectori64_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vectori64_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vectori64_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vectori64_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vectori64_Sf_SwigStatic = {
    "vectori64",
    swig_vectori64_Sf_SwigStatic_methods,
    swig_vectori64_Sf_SwigStatic_attributes,
    swig_vectori64_Sf_SwigStatic_constants,
    swig_vectori64_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vectori64_bases[] = {0};
static const char *swig_vectori64_base_names[] = {0};
static swig_lua_class _wrap_class_vectori64 = { "vectori64", "vectori64", &SWIGTYPE_p_std__vectorT_long_long_t,_proxy__wrap_new_vectori64, swig_delete_vectori64, swig_vectori64_methods, swig_vectori64_attributes, &swig_vectori64_Sf_SwigStatic, swig_vectori64_meta, swig_vectori64_bases, swig_vectori64_base_names };

static int _wrap_new_vectorui64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  std::vector< u64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u64 >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u64 >::vector",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u64 >::vector",2,"unsigned long long const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  result = (std::vector< u64 > *)new std::vector< u64 >(arg1,(unsigned long long const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorui64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< u64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u64 >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< u64 >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< u64 > *)new std::vector< u64 >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorui64__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< unsigned long long > *arg1 = 0 ;
  std::vector< u64 > *result = 0 ;
  
  SWIG_check_num_args("std::vector< u64 >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< u64 >::vector",1,"std::vector< unsigned long long > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("new_vectorui64",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = (std::vector< u64 > *)new std::vector< u64 >((std::vector< unsigned long long > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_vectorui64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_vectorui64__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_vectorui64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_vectorui64__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_vectorui64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u64 >::vector(size_t,unsigned long long const &)\n"
    "    std::vector< u64 >::vector(size_t)\n"
    "    std::vector< u64 >::vector(std::vector< unsigned long long > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_vectorui64___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  size_t arg2 ;
  unsigned long long result;
  
  SWIG_check_num_args("std::vector< u64 >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::__getitem",1,"std::vector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u64 >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64___getitem",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long)std_vector_Sl_u64_Sg____getitem__SWIG(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  size_t arg2 ;
  unsigned long long arg3 ;
  
  SWIG_check_num_args("std::vector< u64 >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::__setitem",1,"std::vector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u64 >::__setitem",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u64 >::__setitem",3,"unsigned long long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64___setitem",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (unsigned long long)lua_tonumber(L, 3);
  std_vector_Sl_u64_Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned long long > > result;
  
  SWIG_check_num_args("std::vector< u64 >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::begin",1,"std::vector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_begin",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = std_vector_Sl_u64_Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< unsigned long long > * resultptr = new std::vector_iterator< unsigned long long >((const std::vector_iterator< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  SwigValueWrapper< std::vector_iterator< unsigned long long > > result;
  
  SWIG_check_num_args("std::vector< u64 >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::end",1,"std::vector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_c_end",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = std_vector_Sl_u64_Sg__end__SWIG(arg1);
  {
    std::vector_iterator< unsigned long long > * resultptr = new std::vector_iterator< unsigned long long >((const std::vector_iterator< unsigned long long > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_unsigned_long_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< u64 >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::erase",1,"std::vector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u64 >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_erase",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_u64_Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< u64 >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::erase",1,"std::vector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u64 >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u64 >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_erase",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_u64_Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_vectorui64_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_unsigned_long_long_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_vectorui64_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'vectorui64_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< u64 >::erase(size_t)\n"
    "    std::vector< u64 >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_vectorui64_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("std::vector< u64 >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::front",1,"std::vector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_front",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("std::vector< u64 >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::back",1,"std::vector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_back",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  unsigned long long *arg2 = 0 ;
  unsigned long long temp2 ;
  
  SWIG_check_num_args("std::vector< u64 >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::push_back",1,"std::vector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u64 >::push_back",2,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_push_back",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  temp2=(unsigned long long)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->push_back((unsigned long long const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u64 >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::pop_back",1,"std::vector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_pop_back",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  size_t arg2 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("std::vector< u64 >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::at",1,"std::vector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u64 >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_at",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (unsigned long long *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  size_t arg2 ;
  unsigned long long *arg3 = 0 ;
  unsigned long long temp3 ;
  
  SWIG_check_num_args("std::vector< u64 >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::assign",1,"std::vector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u64 >::assign",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< u64 >::assign",3,"unsigned long long const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_assign",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3=(unsigned long long)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->assign(arg2,(unsigned long long const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  unsigned long long *result = 0 ;
  
  SWIG_check_num_args("std::vector< u64 >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::data",1,"std::vector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_data",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = (unsigned long long *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_unsigned_long_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< u64 >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::size",1,"std::vector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_size",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< u64 >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::empty",1,"std::vector< u64 > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_empty",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = (bool)((std::vector< u64 > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< u64 >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::resize",1,"std::vector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u64 >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_resize",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u64 >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::clear",1,"std::vector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_clear",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  std::vector< unsigned long long > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< u64 >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::swap",1,"std::vector< u64 > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< u64 >::swap",2,"std::vector< unsigned long long > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_swap",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_swap",2,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  
  SWIG_check_num_args("std::vector< u64 >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::shrink_to_fit",1,"std::vector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< u64 >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::reserve",1,"std::vector< u64 > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< u64 >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_reserve",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< u64 >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::max_size",1,"std::vector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_max_size",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_vectorui64_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< u64 > *arg1 = (std::vector< u64 > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< u64 >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< u64 >::capacity",1,"std::vector< u64 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t,0))){
    SWIG_fail_ptr("vectorui64_capacity",1,SWIGTYPE_p_std__vectorT_unsigned_long_long_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_vectorui64(void *obj) {
std::vector< u64 > *arg1 = (std::vector< u64 > *) obj;
delete arg1;
}
static int _proxy__wrap_new_vectorui64(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_vectorui64);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_vectorui64_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_vectorui64_methods[]= {
    { "__getitem", _wrap_vectorui64___getitem},
    { "__setitem", _wrap_vectorui64___setitem},
    { "begin", _wrap_vectorui64_begin},
    { "c_end", _wrap_vectorui64_c_end},
    { "erase", _wrap_vectorui64_erase},
    { "front", _wrap_vectorui64_front},
    { "back", _wrap_vectorui64_back},
    { "push_back", _wrap_vectorui64_push_back},
    { "pop_back", _wrap_vectorui64_pop_back},
    { "at", _wrap_vectorui64_at},
    { "assign", _wrap_vectorui64_assign},
    { "data", _wrap_vectorui64_data},
    { "size", _wrap_vectorui64_size},
    { "empty", _wrap_vectorui64_empty},
    { "resize", _wrap_vectorui64_resize},
    { "clear", _wrap_vectorui64_clear},
    { "swap", _wrap_vectorui64_swap},
    { "shrink_to_fit", _wrap_vectorui64_shrink_to_fit},
    { "reserve", _wrap_vectorui64_reserve},
    { "max_size", _wrap_vectorui64_max_size},
    { "capacity", _wrap_vectorui64_capacity},
    {0,0}
};
static swig_lua_method swig_vectorui64_meta[] = {
    { "__getitem", _wrap_vectorui64___getitem},
    { "__setitem", _wrap_vectorui64___setitem},
    {0,0}
};

static swig_lua_attribute swig_vectorui64_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_vectorui64_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_vectorui64_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_vectorui64_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_vectorui64_Sf_SwigStatic = {
    "vectorui64",
    swig_vectorui64_Sf_SwigStatic_methods,
    swig_vectorui64_Sf_SwigStatic_attributes,
    swig_vectorui64_Sf_SwigStatic_constants,
    swig_vectorui64_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_vectorui64_bases[] = {0};
static const char *swig_vectorui64_base_names[] = {0};
static swig_lua_class _wrap_class_vectorui64 = { "vectorui64", "vectorui64", &SWIGTYPE_p_std__vectorT_unsigned_long_long_t,_proxy__wrap_new_vectorui64, swig_delete_vectorui64, swig_vectorui64_methods, swig_vectorui64_attributes, &swig_vectorui64_Sf_SwigStatic, swig_vectorui64_meta, swig_vectorui64_bases, swig_vectorui64_base_names };

static int _wrap_new_cvector32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::complex< float > *arg2 = 0 ;
  std::vector< kfr::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< kfr::complex< float > >::vector",2,"kfr::complex< float > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("new_cvector32",2,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  result = (std::vector< kfr::complex< float > > *)new std::vector< kfr::complex< float > >(arg1,(kfr::complex< float > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cvector32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< kfr::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< kfr::complex< float > > *)new std::vector< kfr::complex< float > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cvector32__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = 0 ;
  std::vector< kfr::complex< float > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::vector",1,"std::vector< kfr::complex< float > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_cvector32",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  result = (std::vector< kfr::complex< float > > *)new std::vector< kfr::complex< float > >((std::vector< kfr::complex< float > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cvector32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_cvector32__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_cvector32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_cvector32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_cvector32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< kfr::complex< float > >::vector(size_t,kfr::complex< float > const &)\n"
    "    std::vector< kfr::complex< float > >::vector(size_t)\n"
    "    std::vector< kfr::complex< float > >::vector(std::vector< kfr::complex< float > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cvector32___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  size_t arg2 ;
  kfr::complex< float > result;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::__getitem",1,"std::vector< kfr::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< float > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32___getitem",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_kfr_complex_Sl_float_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    kfr::complex< float > * resultptr = new kfr::complex< float >((const kfr::complex< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  size_t arg2 ;
  kfr::complex< float > arg3 ;
  kfr::complex< float > *argp3 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::__setitem",1,"std::vector< kfr::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< float > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< kfr::complex< float > >::__setitem",3,"kfr::complex< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32___setitem",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("cvector32___setitem",3,SWIGTYPE_p_kfr__complexT_float_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_kfr_complex_Sl_float_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< kfr::complex< float > > > result;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::begin",1,"std::vector< kfr::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_begin",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  result = std_vector_Sl_kfr_complex_Sl_float_Sg__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< kfr::complex< float > > * resultptr = new std::vector_iterator< kfr::complex< float > >((const std::vector_iterator< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< kfr::complex< float > > > result;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::end",1,"std::vector< kfr::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_c_end",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  result = std_vector_Sl_kfr_complex_Sl_float_Sg__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< kfr::complex< float > > * resultptr = new std::vector_iterator< kfr::complex< float > >((const std::vector_iterator< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::erase",1,"std::vector< kfr::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< float > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_erase",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_kfr_complex_Sl_float_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::erase",1,"std::vector< kfr::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< float > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< kfr::complex< float > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_erase",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_kfr_complex_Sl_float_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cvector32_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_cvector32_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cvector32_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< kfr::complex< float > >::erase(size_t)\n"
    "    std::vector< kfr::complex< float > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cvector32_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  kfr::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::front",1,"std::vector< kfr::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_front",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  result = (kfr::complex< float > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  kfr::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::back",1,"std::vector< kfr::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_back",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  result = (kfr::complex< float > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  kfr::complex< float > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::push_back",1,"std::vector< kfr::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< kfr::complex< float > >::push_back",2,"kfr::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_push_back",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("cvector32_push_back",2,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  (arg1)->push_back((kfr::complex< float > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::pop_back",1,"std::vector< kfr::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_pop_back",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  size_t arg2 ;
  kfr::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::at",1,"std::vector< kfr::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< float > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_at",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (kfr::complex< float > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  size_t arg2 ;
  kfr::complex< float > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::assign",1,"std::vector< kfr::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< float > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< kfr::complex< float > >::assign",3,"kfr::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_assign",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("cvector32_assign",3,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  (arg1)->assign(arg2,(kfr::complex< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  kfr::complex< float > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::data",1,"std::vector< kfr::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_data",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  result = (kfr::complex< float > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::size",1,"std::vector< kfr::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_size",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::empty",1,"std::vector< kfr::complex< float > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_empty",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  result = (bool)((std::vector< kfr::complex< float > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::resize",1,"std::vector< kfr::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< float > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_resize",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::clear",1,"std::vector< kfr::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_clear",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  std::vector< kfr::complex< float > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::swap",1,"std::vector< kfr::complex< float > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< kfr::complex< float > >::swap",2,"std::vector< kfr::complex< float > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_swap",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_swap",2,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::shrink_to_fit",1,"std::vector< kfr::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::reserve",1,"std::vector< kfr::complex< float > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< float > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_reserve",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::max_size",1,"std::vector< kfr::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_max_size",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector32_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< kfr::complex< float > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< float > >::capacity",1,"std::vector< kfr::complex< float > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("cvector32_capacity",1,SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_cvector32(void *obj) {
std::vector< kfr::complex< float > > *arg1 = (std::vector< kfr::complex< float > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_cvector32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_cvector32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_cvector32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_cvector32_methods[]= {
    { "__getitem", _wrap_cvector32___getitem},
    { "__setitem", _wrap_cvector32___setitem},
    { "begin", _wrap_cvector32_begin},
    { "c_end", _wrap_cvector32_c_end},
    { "erase", _wrap_cvector32_erase},
    { "front", _wrap_cvector32_front},
    { "back", _wrap_cvector32_back},
    { "push_back", _wrap_cvector32_push_back},
    { "pop_back", _wrap_cvector32_pop_back},
    { "at", _wrap_cvector32_at},
    { "assign", _wrap_cvector32_assign},
    { "data", _wrap_cvector32_data},
    { "size", _wrap_cvector32_size},
    { "empty", _wrap_cvector32_empty},
    { "resize", _wrap_cvector32_resize},
    { "clear", _wrap_cvector32_clear},
    { "swap", _wrap_cvector32_swap},
    { "shrink_to_fit", _wrap_cvector32_shrink_to_fit},
    { "reserve", _wrap_cvector32_reserve},
    { "max_size", _wrap_cvector32_max_size},
    { "capacity", _wrap_cvector32_capacity},
    {0,0}
};
static swig_lua_method swig_cvector32_meta[] = {
    { "__getitem", _wrap_cvector32___getitem},
    { "__setitem", _wrap_cvector32___setitem},
    {0,0}
};

static swig_lua_attribute swig_cvector32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_cvector32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_cvector32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_cvector32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_cvector32_Sf_SwigStatic = {
    "cvector32",
    swig_cvector32_Sf_SwigStatic_methods,
    swig_cvector32_Sf_SwigStatic_attributes,
    swig_cvector32_Sf_SwigStatic_constants,
    swig_cvector32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_cvector32_bases[] = {0};
static const char *swig_cvector32_base_names[] = {0};
static swig_lua_class _wrap_class_cvector32 = { "cvector32", "cvector32", &SWIGTYPE_p_std__vectorT_kfr__complexT_float_t_t,_proxy__wrap_new_cvector32, swig_delete_cvector32, swig_cvector32_methods, swig_cvector32_attributes, &swig_cvector32_Sf_SwigStatic, swig_cvector32_meta, swig_cvector32_bases, swig_cvector32_base_names };

static int _wrap_new_cvector64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::complex< double > *arg2 = 0 ;
  std::vector< kfr::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< kfr::complex< double > >::vector",2,"kfr::complex< double > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("new_cvector64",2,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  result = (std::vector< kfr::complex< double > > *)new std::vector< kfr::complex< double > >(arg1,(kfr::complex< double > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cvector64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< kfr::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< kfr::complex< double > > *)new std::vector< kfr::complex< double > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cvector64__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = 0 ;
  std::vector< kfr::complex< double > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::vector",1,"std::vector< kfr::complex< double > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_cvector64",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  result = (std::vector< kfr::complex< double > > *)new std::vector< kfr::complex< double > >((std::vector< kfr::complex< double > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_cvector64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_cvector64__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_cvector64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_cvector64__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_cvector64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< kfr::complex< double > >::vector(size_t,kfr::complex< double > const &)\n"
    "    std::vector< kfr::complex< double > >::vector(size_t)\n"
    "    std::vector< kfr::complex< double > >::vector(std::vector< kfr::complex< double > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cvector64___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  size_t arg2 ;
  kfr::complex< double > result;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::__getitem",1,"std::vector< kfr::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< double > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64___getitem",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_kfr_complex_Sl_double_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    kfr::complex< double > * resultptr = new kfr::complex< double >((const kfr::complex< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  size_t arg2 ;
  kfr::complex< double > arg3 ;
  kfr::complex< double > *argp3 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::__setitem",1,"std::vector< kfr::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< double > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< kfr::complex< double > >::__setitem",3,"kfr::complex< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64___setitem",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("cvector64___setitem",3,SWIGTYPE_p_kfr__complexT_double_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_kfr_complex_Sl_double_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< kfr::complex< double > > > result;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::begin",1,"std::vector< kfr::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_begin",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  result = std_vector_Sl_kfr_complex_Sl_double_Sg__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< kfr::complex< double > > * resultptr = new std::vector_iterator< kfr::complex< double > >((const std::vector_iterator< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< kfr::complex< double > > > result;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::end",1,"std::vector< kfr::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_c_end",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  result = std_vector_Sl_kfr_complex_Sl_double_Sg__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< kfr::complex< double > > * resultptr = new std::vector_iterator< kfr::complex< double > >((const std::vector_iterator< kfr::complex< double > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_kfr__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::erase",1,"std::vector< kfr::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< double > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_erase",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_kfr_complex_Sl_double_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::erase",1,"std::vector< kfr::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< double > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< kfr::complex< double > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_erase",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_kfr_complex_Sl_double_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_cvector64_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_cvector64_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'cvector64_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< kfr::complex< double > >::erase(size_t)\n"
    "    std::vector< kfr::complex< double > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_cvector64_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  kfr::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::front",1,"std::vector< kfr::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_front",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  result = (kfr::complex< double > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  kfr::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::back",1,"std::vector< kfr::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_back",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  result = (kfr::complex< double > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  kfr::complex< double > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::push_back",1,"std::vector< kfr::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< kfr::complex< double > >::push_back",2,"kfr::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_push_back",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("cvector64_push_back",2,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  (arg1)->push_back((kfr::complex< double > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::pop_back",1,"std::vector< kfr::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_pop_back",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  size_t arg2 ;
  kfr::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::at",1,"std::vector< kfr::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< double > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_at",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (kfr::complex< double > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  size_t arg2 ;
  kfr::complex< double > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::assign",1,"std::vector< kfr::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< double > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< kfr::complex< double > >::assign",3,"kfr::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_assign",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("cvector64_assign",3,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  (arg1)->assign(arg2,(kfr::complex< double > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  kfr::complex< double > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::data",1,"std::vector< kfr::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_data",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  result = (kfr::complex< double > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_double_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::size",1,"std::vector< kfr::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_size",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::empty",1,"std::vector< kfr::complex< double > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_empty",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  result = (bool)((std::vector< kfr::complex< double > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::resize",1,"std::vector< kfr::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< double > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_resize",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::clear",1,"std::vector< kfr::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_clear",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  std::vector< kfr::complex< double > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::swap",1,"std::vector< kfr::complex< double > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< kfr::complex< double > >::swap",2,"std::vector< kfr::complex< double > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_swap",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_swap",2,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::shrink_to_fit",1,"std::vector< kfr::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::reserve",1,"std::vector< kfr::complex< double > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::complex< double > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_reserve",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::max_size",1,"std::vector< kfr::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_max_size",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cvector64_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< kfr::complex< double > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::complex< double > >::capacity",1,"std::vector< kfr::complex< double > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,0))){
    SWIG_fail_ptr("cvector64_capacity",1,SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_cvector64(void *obj) {
std::vector< kfr::complex< double > > *arg1 = (std::vector< kfr::complex< double > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_cvector64(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_cvector64);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_cvector64_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_cvector64_methods[]= {
    { "__getitem", _wrap_cvector64___getitem},
    { "__setitem", _wrap_cvector64___setitem},
    { "begin", _wrap_cvector64_begin},
    { "c_end", _wrap_cvector64_c_end},
    { "erase", _wrap_cvector64_erase},
    { "front", _wrap_cvector64_front},
    { "back", _wrap_cvector64_back},
    { "push_back", _wrap_cvector64_push_back},
    { "pop_back", _wrap_cvector64_pop_back},
    { "at", _wrap_cvector64_at},
    { "assign", _wrap_cvector64_assign},
    { "data", _wrap_cvector64_data},
    { "size", _wrap_cvector64_size},
    { "empty", _wrap_cvector64_empty},
    { "resize", _wrap_cvector64_resize},
    { "clear", _wrap_cvector64_clear},
    { "swap", _wrap_cvector64_swap},
    { "shrink_to_fit", _wrap_cvector64_shrink_to_fit},
    { "reserve", _wrap_cvector64_reserve},
    { "max_size", _wrap_cvector64_max_size},
    { "capacity", _wrap_cvector64_capacity},
    {0,0}
};
static swig_lua_method swig_cvector64_meta[] = {
    { "__getitem", _wrap_cvector64___getitem},
    { "__setitem", _wrap_cvector64___setitem},
    {0,0}
};

static swig_lua_attribute swig_cvector64_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_cvector64_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_cvector64_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_cvector64_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_cvector64_Sf_SwigStatic = {
    "cvector64",
    swig_cvector64_Sf_SwigStatic_methods,
    swig_cvector64_Sf_SwigStatic_attributes,
    swig_cvector64_Sf_SwigStatic_constants,
    swig_cvector64_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_cvector64_bases[] = {0};
static const char *swig_cvector64_base_names[] = {0};
static swig_lua_class _wrap_class_cvector64 = { "cvector64", "cvector64", &SWIGTYPE_p_std__vectorT_kfr__complexT_double_t_t,_proxy__wrap_new_cvector64, swig_delete_cvector64, swig_cvector64_methods, swig_cvector64_attributes, &swig_cvector64_Sf_SwigStatic, swig_cvector64_meta, swig_cvector64_bases, swig_cvector64_base_names };

static int _wrap_new_complex32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< float > *result = 0 ;
  
  SWIG_check_num_args("kfr::complex< float >::complex",0,0)
  result = (kfr::complex< float > *)new kfr::complex< float >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  kfr::complex< float > *result = 0 ;
  
  SWIG_check_num_args("kfr::complex< float >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::complex< float >::complex",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (kfr::complex< float > *)new kfr::complex< float >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex32__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  kfr::complex< float > *result = 0 ;
  
  SWIG_check_num_args("kfr::complex< float >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::complex< float >::complex",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::complex< float >::complex",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (kfr::complex< float > *)new kfr::complex< float >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex32__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< float > *arg1 = 0 ;
  kfr::complex< float > *result = 0 ;
  
  SWIG_check_num_args("kfr::complex< float >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::complex< float >::complex",1,"kfr::complex< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("new_complex32",1,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  result = (kfr::complex< float > *)new kfr::complex< float >((kfr::complex< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_float_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_complex32__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex32__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_complex32__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::complex< float >::complex()\n"
    "    kfr::complex< float >::complex(float)\n"
    "    kfr::complex< float >::complex(float,float)\n"
    "    kfr::complex< float >::complex(kfr::complex< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex32_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< float > *arg1 = (kfr::complex< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("kfr::complex< float >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::complex< float >::real",1,"kfr::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("complex32_real",1,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  result = (float *) &((kfr::complex< float > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex32_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< float > *arg1 = (kfr::complex< float > *) 0 ;
  float *result = 0 ;
  
  SWIG_check_num_args("kfr::complex< float >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::complex< float >::imag",1,"kfr::complex< float > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("complex32_imag",1,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  result = (float *) &((kfr::complex< float > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex32_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< float > *arg1 = (kfr::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("kfr::complex< float >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::complex< float >::real",1,"kfr::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::complex< float >::real",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("complex32_real",1,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex32_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_complex32_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex32_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex32_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::complex< float >::real() const\n"
    "    kfr::complex< float >::real(float)\n");
  lua_error(L);return 0;
}


static int _wrap_complex32_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< float > *arg1 = (kfr::complex< float > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("kfr::complex< float >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::complex< float >::imag",1,"kfr::complex< float > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::complex< float >::imag",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_float_t,0))){
    SWIG_fail_ptr("complex32_imag",1,SWIGTYPE_p_kfr__complexT_float_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex32_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_complex32_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_float_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex32_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex32_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::complex< float >::imag() const\n"
    "    kfr::complex< float >::imag(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_complex32(void *obj) {
kfr::complex< float > *arg1 = (kfr::complex< float > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex32(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex32);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex32_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex32_methods[]= {
    { "real", _wrap_complex32_real},
    { "imag", _wrap_complex32_imag},
    {0,0}
};
static swig_lua_method swig_complex32_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_complex32_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex32_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex32_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex32_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex32_Sf_SwigStatic = {
    "complex32",
    swig_complex32_Sf_SwigStatic_methods,
    swig_complex32_Sf_SwigStatic_attributes,
    swig_complex32_Sf_SwigStatic_constants,
    swig_complex32_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex32_bases[] = {0};
static const char *swig_complex32_base_names[] = {0};
static swig_lua_class _wrap_class_complex32 = { "complex32", "complex32", &SWIGTYPE_p_kfr__complexT_float_t,_proxy__wrap_new_complex32, swig_delete_complex32, swig_complex32_methods, swig_complex32_attributes, &swig_complex32_Sf_SwigStatic, swig_complex32_meta, swig_complex32_bases, swig_complex32_base_names };

static int _wrap_new_complex64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< double > *result = 0 ;
  
  SWIG_check_num_args("kfr::complex< double >::complex",0,0)
  result = (kfr::complex< double > *)new kfr::complex< double >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  kfr::complex< double > *result = 0 ;
  
  SWIG_check_num_args("kfr::complex< double >::complex",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::complex< double >::complex",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (kfr::complex< double > *)new kfr::complex< double >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex64__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  kfr::complex< double > *result = 0 ;
  
  SWIG_check_num_args("kfr::complex< double >::complex",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::complex< double >::complex",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::complex< double >::complex",2,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (kfr::complex< double > *)new kfr::complex< double >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex64__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< double > *arg1 = 0 ;
  kfr::complex< double > *result = 0 ;
  
  SWIG_check_num_args("kfr::complex< double >::complex",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::complex< double >::complex",1,"kfr::complex< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("new_complex64",1,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  result = (kfr::complex< double > *)new kfr::complex< double >((kfr::complex< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_double_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_complex64__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex64__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_complex64__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::complex< double >::complex()\n"
    "    kfr::complex< double >::complex(double)\n"
    "    kfr::complex< double >::complex(double,double)\n"
    "    kfr::complex< double >::complex(kfr::complex< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex64_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< double > *arg1 = (kfr::complex< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("kfr::complex< double >::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::complex< double >::real",1,"kfr::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("complex64_real",1,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  result = (double *) &((kfr::complex< double > const *)arg1)->real();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex64_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< double > *arg1 = (kfr::complex< double > *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("kfr::complex< double >::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::complex< double >::imag",1,"kfr::complex< double > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("complex64_imag",1,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  result = (double *) &((kfr::complex< double > const *)arg1)->imag();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex64_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< double > *arg1 = (kfr::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("kfr::complex< double >::real",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::complex< double >::real",1,"kfr::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::complex< double >::real",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("complex64_real",1,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->real(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex64_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_complex64_real__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex64_real__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex64_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::complex< double >::real() const\n"
    "    kfr::complex< double >::real(double)\n");
  lua_error(L);return 0;
}


static int _wrap_complex64_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< double > *arg1 = (kfr::complex< double > *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("kfr::complex< double >::imag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::complex< double >::imag",1,"kfr::complex< double > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::complex< double >::imag",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_double_t,0))){
    SWIG_fail_ptr("complex64_imag",1,SWIGTYPE_p_kfr__complexT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->imag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex64_imag(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_complex64_imag__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__complexT_double_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_complex64_imag__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex64_imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::complex< double >::imag() const\n"
    "    kfr::complex< double >::imag(double)\n");
  lua_error(L);return 0;
}


static void swig_delete_complex64(void *obj) {
kfr::complex< double > *arg1 = (kfr::complex< double > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex64(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex64);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex64_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex64_methods[]= {
    { "real", _wrap_complex64_real},
    { "imag", _wrap_complex64_imag},
    {0,0}
};
static swig_lua_method swig_complex64_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_complex64_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex64_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex64_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex64_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex64_Sf_SwigStatic = {
    "complex64",
    swig_complex64_Sf_SwigStatic_methods,
    swig_complex64_Sf_SwigStatic_attributes,
    swig_complex64_Sf_SwigStatic_constants,
    swig_complex64_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex64_bases[] = {0};
static const char *swig_complex64_base_names[] = {0};
static swig_lua_class _wrap_class_complex64 = { "complex64", "complex64", &SWIGTYPE_p_kfr__complexT_double_t,_proxy__wrap_new_complex64, swig_delete_complex64, swig_complex64_methods, swig_complex64_attributes, &swig_complex64_Sf_SwigStatic, swig_complex64_meta, swig_complex64_bases, swig_complex64_base_names };

static int _wrap_deinterleave(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::univector2d< SampleType > > result;
  
  SWIG_check_num_args("Ops::deinterleave",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::deinterleave",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("deinterleave",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::deinterleave((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector2d< SampleType > * resultptr = new kfr::univector2d< SampleType >((const kfr::univector2d< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univector2dT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interleave(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector2d< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::interleave",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::interleave",1,"kfr::univector2d< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univector2dT_SampleType_t,0))){
    SWIG_fail_ptr("interleave",1,SWIGTYPE_p_kfr__univector2dT_SampleType_t);
  }
  
  result = Ops::interleave((kfr::univector2d< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_to_univector(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::to_univector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::to_univector",1,"std::vector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_SampleType_t,0))){
    SWIG_fail_ptr("to_univector",1,SWIGTYPE_p_std__vectorT_SampleType_t);
  }
  
  result = Ops::to_univector((std::vector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_to_vector(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SwigValueWrapper< std::vector< SampleType > > result;
  
  SWIG_check_num_args("Ops::to_vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::to_vector",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("to_vector",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::to_vector((kfr::univector< SampleType > const &)*arg1);
  {
    std::vector< SampleType > * resultptr = new std::vector< SampleType >((const std::vector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csin(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::csin< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::csin< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("csin",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR csin< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccos(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::ccos< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::ccos< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("ccos",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR ccos< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csinh(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::csinh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::csinh< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("csinh",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR csinh< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccosh(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::ccosh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::ccosh< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("ccosh",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR ccosh< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cabssqr(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::cabssqr< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::cabssqr< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("cabssqr",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR cabssqr< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cabs(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::cabs< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::cabs< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("cabs",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR cabs< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_carg(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::carg< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::carg< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("carg",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR carg< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clog(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::clog< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::clog< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("clog",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR clog< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clog10(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::clog10< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::clog10< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("clog10",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR clog10< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clog2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::clog2< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::clog2< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("clog2",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR clog2< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cexp(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::cexp< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::cexp< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("cexp",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR cexp< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cexp2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::cexp2< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::cexp2< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("cexp2",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR cexp2< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cexp10(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::cexp10< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::cexp10< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("cexp10",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR cexp10< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cpolar(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::polar< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::polar< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("cpolar",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR polar< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ccartesian(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::cartesian< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::cartesian< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("ccartesian",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR cartesian< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csqrt(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::csqrt< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::csqrt< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("csqrt",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR csqrt< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_csqr(lua_State* L) {
  int SWIG_arg = 0;
  kfr::complex< SampleType > *arg1 = 0 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("Ops::csqr< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::csqr< SampleType >",1,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("csqr",1,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR csqr< SampleType >((kfr::complex< SampleType > const &)*arg1);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_abs(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::abs< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::abs< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("abs",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR abs< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::add< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::add< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::add< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("add",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("add",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR add< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_add__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::add< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::add< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::add< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("add",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("add",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR add< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_add__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_add__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::add< SampleType >(kfr::univector< SampleType > const &,kfr::univector< SampleType > const &)\n"
    "    Ops::add< SampleType >(kfr::univector< SampleType > const &,SampleType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_absmax__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::absmax< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::absmax< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::absmax< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("absmax",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("absmax",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR absmax< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmax__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::absmax< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::absmax< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::absmax< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("absmax",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("absmax",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR absmax< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmax(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_absmax__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_absmax__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'absmax'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::absmax< SampleType >(kfr::univector< SampleType > const &,kfr::univector< SampleType > const &)\n"
    "    Ops::absmax< SampleType >(kfr::univector< SampleType > const &,SampleType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_absmin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::absmin< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::absmin< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::absmin< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("absmin",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("absmin",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR absmin< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmin__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::absmin< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::absmin< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::absmin< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("absmin",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("absmin",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR absmin< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmin(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_absmin__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_absmin__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'absmin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::absmin< SampleType >(kfr::univector< SampleType > const &,kfr::univector< SampleType > const &)\n"
    "    Ops::absmin< SampleType >(kfr::univector< SampleType > const &,SampleType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_clamp__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::clamp< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::clamp< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::clamp< SampleType >",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::clamp< SampleType >",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("clamp",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("clamp",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("clamp",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR clamp< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2,(kfr::univector< SampleType > const &)*arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clamp__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  SampleType *arg3 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::clamp< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::clamp< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::clamp< SampleType >",2,"SampleType const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::clamp< SampleType >",3,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("clamp",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("clamp",2,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("clamp",3,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR clamp< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2,(SampleType const &)*arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_clamp(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_clamp__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_clamp__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'clamp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::clamp< SampleType >(kfr::univector< SampleType > const &,kfr::univector< SampleType > const &,kfr::univector< SampleType > const &)\n"
    "    Ops::clamp< SampleType >(kfr::univector< SampleType > const &,SampleType const &,SampleType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cube(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::cube< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::cube< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("cube",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR cube< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_div(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::div< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::div< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::div< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("div",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("div",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR div< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmadd(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::fmadd< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::fmadd< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::fmadd< SampleType >",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::fmadd< SampleType >",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fmadd",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fmadd",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fmadd",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR fmadd< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2,(kfr::univector< SampleType > const &)*arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fmsub(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::fmsub< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::fmsub< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::fmsub< SampleType >",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::fmsub< SampleType >",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fmsub",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fmsub",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fmsub",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR fmsub< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2,(kfr::univector< SampleType > const &)*arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::max< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::max< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::max< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("max",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("max",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR max< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::max< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::max< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::max< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("max",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("max",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR max< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_max(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_max__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_max__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::max< SampleType >(kfr::univector< SampleType > const &,kfr::univector< SampleType > const &)\n"
    "    Ops::max< SampleType >(kfr::univector< SampleType > const &,SampleType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_min__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::min< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::min< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::min< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("min",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("min",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR min< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_min__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::min< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::min< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::min< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("min",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("min",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR min< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_min(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_min__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_min__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::min< SampleType >(kfr::univector< SampleType > const &,kfr::univector< SampleType > const &)\n"
    "    Ops::min< SampleType >(kfr::univector< SampleType > const &,SampleType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_mix(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::mix< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::mix< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::mix< SampleType >",2,"SampleType const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::mix< SampleType >",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("mix",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("mix",2,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("mix",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR mix< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2,(kfr::univector< SampleType > const &)*arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mixs(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::mixs< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::mixs< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::mixs< SampleType >",2,"SampleType const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::mixs< SampleType >",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("mixs",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("mixs",2,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("mixs",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR mixs< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2,(kfr::univector< SampleType > const &)*arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::mul< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::mul< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::mul< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("mul",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("mul",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR mul< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::mul< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::mul< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::mul< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("mul",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("mul",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR mul< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_mul__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::mul< SampleType >(kfr::univector< SampleType > const &,kfr::univector< SampleType > const &)\n"
    "    Ops::mul< SampleType >(kfr::univector< SampleType > const &,SampleType const &)\n");
  lua_error(L);return 0;
}


static int _wrap_neg(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::neg< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::neg< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("neg",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR neg< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqr(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::sqr< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::sqr< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("sqr",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR sqr< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::sqrt< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::sqrt< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("sqrt",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR sqrt< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::exp< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::exp< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("exp",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR exp< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp10(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::exp10< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::exp10< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("exp10",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR exp10< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::exp2< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::exp2< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("exp2",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR exp2< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_exp_fmadd(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::exp_fmadd< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::exp_fmadd< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::exp_fmadd< SampleType >",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::exp_fmadd< SampleType >",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("exp_fmadd",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("exp_fmadd",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("exp_fmadd",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR exp_fmadd< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2,(kfr::univector< SampleType > const &)*arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::log< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::log< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("log",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR log< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log10(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::log10< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::log10< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("log10",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR log10< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::log2< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::log2< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("log2",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR log2< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_log_fmadd(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::log_fmadd< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::log_fmadd< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::log_fmadd< SampleType >",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::log_fmadd< SampleType >",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("log_fmadd",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("log_fmadd",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("log_fmadd",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR log_fmadd< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2,(kfr::univector< SampleType > const &)*arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logb(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::logb< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::logb< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("logb",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR logb< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logm(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::logm< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::logm< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::logm< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("logm",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("logm",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR logm< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_logn(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::logn< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::logn< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::logn< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("logn",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("logn",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR logn< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::pow< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::pow< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::pow< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR pow< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::pow< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::pow< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::pow< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("pow",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("pow",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR pow< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pow(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pow__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'pow'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::pow< SampleType >(kfr::univector< SampleType > const &,SampleType const &)\n"
    "    Ops::pow< SampleType >(kfr::univector< SampleType > const &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_root(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::root< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::root< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::root< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("root",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("root",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR root< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floor(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::floor< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::floor< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("floor",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR floor< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acos(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::acos< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::acos< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("acos",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR acos< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_asin(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::asin< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::asin< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("asin",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR asin< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::atan< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::atan< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("atan",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR atan< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::atan2< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::atan2< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::atan2< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("atan2",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("atan2",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR atan2< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::atan2< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::atan2< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::atan2< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("atan2",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("atan2",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR atan2< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atan2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::atan2< SampleType >(kfr::univector< SampleType > const &,SampleType const &)\n"
    "    Ops::atan2< SampleType >(kfr::univector< SampleType > const &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cos(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::cos< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::cos< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("cos",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR cos< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::sin< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::sin< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("sin",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR sin< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tan(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::tan< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::tan< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("tan",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR tan< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cosh(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::cosh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::cosh< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("cosh",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR cosh< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_coth(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::coth< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::coth< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("coth",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR coth< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinh(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::sinh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::sinh< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("sinh",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR sinh< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_tanh(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::tanh< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::tanh< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("tanh",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR tanh< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2deg__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::atan2deg< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::atan2deg< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::atan2deg< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("atan2deg",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("atan2deg",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR atan2deg< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2deg__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::atan2deg< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::atan2deg< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::atan2deg< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("atan2deg",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("atan2deg",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR atan2deg< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_atan2deg(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2deg__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_atan2deg__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'atan2deg'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::atan2deg< SampleType >(kfr::univector< SampleType > const &,SampleType const &)\n"
    "    Ops::atan2deg< SampleType >(kfr::univector< SampleType > const &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_cosdeg(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::cosdeg< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::cosdeg< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("cosdeg",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR cosdeg< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sindeg(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::sindeg< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::sindeg< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("sindeg",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR sindeg< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinc(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::sinc< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::sinc< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("sinc",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR sinc< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_gamma(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::gamma< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::gamma< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("gamma",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR gamma< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_absmaxo(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::absmaxof< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::absmaxof< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("absmaxo",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR absmaxof< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dot(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::dot< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::dot< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::dot< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("dot",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("dot",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR dot< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_maxo(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::maxof< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::maxof< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("maxo",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR maxof< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mino(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::minof< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::minof< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("mino",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR minof< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_mean(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::mean< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::mean< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("mean",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR mean< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_prdocut(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::product< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::product< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("prdocut",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR product< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_rms(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::rms< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::rms< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("rms",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR rms< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sum(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::sum< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::sum< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("sum",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR sum< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sumsqr(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::sumsqr< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::sumsqr< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("sumsqr",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR sumsqr< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ipow(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  int arg2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::ipow< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::ipow< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::ipow< SampleType >",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("ipow",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR ipow< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos2x(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::kcos2x< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::kcos2x< SampleType >",1,"SampleType const");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::kcos2x< SampleType >",2,"SampleType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("cos2x",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("cos2x",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR kcos2x< SampleType >(arg1,arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin2x(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::ksin2x< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::ksin2x< SampleType >",1,"SampleType const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::ksin2x< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sin2x",1,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sin2x",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR ksin2x< SampleType >((SampleType const &)*arg1,(SampleType const &)*arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cos3x(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::kcos3x< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::kcos3x< SampleType >",1,"SampleType const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::kcos3x< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("cos3x",1,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("cos3x",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR kcos3x< SampleType >((SampleType const &)*arg1,(SampleType const &)*arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sin3x(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::ksin3x< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::ksin3x< SampleType >",1,"SampleType const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::ksin3x< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sin3x",1,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sin3x",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR ksin3x< SampleType >((SampleType const &)*arg1,(SampleType const &)*arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reciprocal(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("Ops::kreciprocal< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::kreciprocal< SampleType >",1,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("reciprocal",1,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR kreciprocal< SampleType >((SampleType const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspace__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  size_t arg3 ;
  bool arg4 ;
  bool arg5 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::linspace< SampleType >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::linspace< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::linspace< SampleType >",2,"SampleType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ops::linspace< SampleType >",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Ops::linspace< SampleType >",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Ops::linspace< SampleType >",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("linspace",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("linspace",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR linspace< SampleType >(arg1,arg2,arg3,arg4,arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspace__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  size_t arg3 ;
  bool arg4 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::linspace< SampleType >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::linspace< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::linspace< SampleType >",2,"SampleType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ops::linspace< SampleType >",3,"size_t");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Ops::linspace< SampleType >",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("linspace",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("linspace",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR linspace< SampleType >(arg1,arg2,arg3,arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspace__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  size_t arg3 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::linspace< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::linspace< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::linspace< SampleType >",2,"SampleType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Ops::linspace< SampleType >",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("linspace",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("linspace",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR linspace< SampleType >(arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_linspace(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_linspace__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_linspace__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_linspace__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'linspace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::linspace< SampleType >(SampleType,SampleType,size_t,bool,bool)\n"
    "    Ops::linspace< SampleType >(SampleType,SampleType,size_t,bool)\n"
    "    Ops::linspace< SampleType >(SampleType,SampleType,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_pad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::pad< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::pad< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::pad< SampleType >",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("pad",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("pad",2,SWIGTYPE_p_SampleType);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR pad< SampleType >((kfr::univector< SampleType > const &)*arg1,(SampleType const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pad__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::pad< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::pad< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("pad",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR pad< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pad(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_pad__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_pad__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'pad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::pad< SampleType >(kfr::univector< SampleType > const &,SampleType const &)\n"
    "    Ops::pad< SampleType >(kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_truncate(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t arg2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::truncate< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::truncate< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Ops::truncate< SampleType >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("truncate",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR truncate< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_reverse(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::reverse< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::reverse< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("reverse",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR reverse< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ringbuf_read(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t *arg2 = 0 ;
  SampleType *arg3 = 0 ;
  SampleType *result = 0 ;
  
  SWIG_check_num_args("Ops::ringbuf_read< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::ringbuf_read< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::ringbuf_read< SampleType >",2,"size_t &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::ringbuf_read< SampleType >",3,"SampleType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("ringbuf_read",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("ringbuf_read",2,SWIGTYPE_p_size_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("ringbuf_read",3,SWIGTYPE_p_SampleType);
  }
  
  result = (SampleType *) &Ops::SWIGTEMPLATEDISAMBIGUATOR ringbuf_read< SampleType >(*arg1,*arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SampleType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ringbuf_write(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t *arg2 = 0 ;
  SampleType *arg3 = 0 ;
  
  SWIG_check_num_args("Ops::ringbuf_write< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::ringbuf_write< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::ringbuf_write< SampleType >",2,"size_t &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::ringbuf_write< SampleType >",3,"SampleType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("ringbuf_write",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_size_t,0))){
    SWIG_fail_ptr("ringbuf_write",2,SWIGTYPE_p_size_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("ringbuf_write",3,SWIGTYPE_p_SampleType);
  }
  
  Ops::SWIGTEMPLATEDISAMBIGUATOR ringbuf_write< SampleType >(*arg1,*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::random< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::random< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR random< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("Ops::random< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Ops::random< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::random< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::random< SampleType >",3,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("random",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("random",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = Ops::SWIGTEMPLATEDISAMBIGUATOR random< SampleType >(arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_random(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_random__SWIG_2(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_random__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'random'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::random< SampleType >(size_t)\n"
    "    Ops::random< SampleType >(size_t,SampleType,SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_plot_save__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("Ops::plot_save< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::plot_save< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::plot_save< SampleType >",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::plot_save< SampleType >",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("plot_save",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("plot_save",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("plot_save",3,SWIGTYPE_p_std__string);
  }
  
  Ops::SWIGTEMPLATEDISAMBIGUATOR plot_save< SampleType >((kfr::univector< SampleType > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_save__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("Ops::plot_save< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::plot_save< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::plot_save< SampleType >",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("plot_save",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("plot_save",2,SWIGTYPE_p_std__string);
  }
  
  Ops::SWIGTEMPLATEDISAMBIGUATOR plot_save< SampleType >((kfr::univector< SampleType > const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_save__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  
  SWIG_check_num_args("Ops::plot_save< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::plot_save< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("plot_save",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  Ops::SWIGTEMPLATEDISAMBIGUATOR plot_save< SampleType >((kfr::univector< SampleType > const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_save(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_plot_save__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_plot_save__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_plot_save__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'plot_save'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::plot_save< SampleType >(kfr::univector< SampleType > const &,std::string const &,std::string const &)\n"
    "    Ops::plot_save< SampleType >(kfr::univector< SampleType > const &,std::string const &)\n"
    "    Ops::plot_save< SampleType >(kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_plot_show__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  SWIG_check_num_args("Ops::plot_show< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::plot_show< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::plot_show< SampleType >",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Ops::plot_show< SampleType >",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("plot_show",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("plot_show",2,SWIGTYPE_p_std__string);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("plot_show",3,SWIGTYPE_p_std__string);
  }
  
  Ops::SWIGTEMPLATEDISAMBIGUATOR plot_show< SampleType >((kfr::univector< SampleType > const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_show__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  SWIG_check_num_args("Ops::plot_show< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::plot_show< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Ops::plot_show< SampleType >",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("plot_show",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("plot_show",2,SWIGTYPE_p_std__string);
  }
  
  Ops::SWIGTEMPLATEDISAMBIGUATOR plot_show< SampleType >((kfr::univector< SampleType > const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_show__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  
  SWIG_check_num_args("Ops::plot_show< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Ops::plot_show< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("plot_show",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  Ops::SWIGTEMPLATEDISAMBIGUATOR plot_show< SampleType >((kfr::univector< SampleType > const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_plot_show(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_plot_show__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_plot_show__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_plot_show__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'plot_show'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Ops::plot_show< SampleType >(kfr::univector< SampleType > const &,std::string const &,std::string const &)\n"
    "    Ops::plot_show< SampleType >(kfr::univector< SampleType > const &,std::string const &)\n"
    "    Ops::plot_show< SampleType >(kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_waveshaper_hardclip__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  double arg2 ;
  SampleType result;
  
  SWIG_check_num_args("waveshaper_hardclip< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("waveshaper_hardclip< SampleType >",1,"SampleType &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("waveshaper_hardclip< SampleType >",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("waveshaper_hardclip",1,SWIGTYPE_p_SampleType);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = waveshaper_hardclip< SampleType >(*arg1,arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveshaper_hardclip__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  double arg2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("waveshaper_hardclip< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("waveshaper_hardclip< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("waveshaper_hardclip< SampleType >",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("waveshaper_hardclip",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = waveshaper_hardclip< SampleType >(*arg1,arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveshaper_hardclip(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_waveshaper_hardclip__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_waveshaper_hardclip__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'waveshaper_hardclip'\n"
    "  Possible C/C++ prototypes are:\n"
    "    waveshaper_hardclip< SampleType >(SampleType &,double)\n"
    "    waveshaper_hardclip< SampleType >(kfr::univector< SampleType > &,double)\n");
  lua_error(L);return 0;
}


static int _wrap_waveshaper_tanh__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  double arg2 ;
  SampleType result;
  
  SWIG_check_num_args("waveshaper_tanh< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("waveshaper_tanh< SampleType >",1,"SampleType &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("waveshaper_tanh< SampleType >",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("waveshaper_tanh",1,SWIGTYPE_p_SampleType);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = waveshaper_tanh< SampleType >(*arg1,arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveshaper_tanh__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  double arg2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("waveshaper_tanh< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("waveshaper_tanh< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("waveshaper_tanh< SampleType >",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("waveshaper_tanh",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = waveshaper_tanh< SampleType >(*arg1,arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveshaper_tanh(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_waveshaper_tanh__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_waveshaper_tanh__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'waveshaper_tanh'\n"
    "  Possible C/C++ prototypes are:\n"
    "    waveshaper_tanh< SampleType >(SampleType &,double)\n"
    "    waveshaper_tanh< SampleType >(kfr::univector< SampleType > &,double)\n");
  lua_error(L);return 0;
}


static int _wrap_waveshaper_saturateI__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  double arg2 ;
  SampleType result;
  
  SWIG_check_num_args("waveshaper_saturate_I< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("waveshaper_saturate_I< SampleType >",1,"SampleType &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("waveshaper_saturate_I< SampleType >",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("waveshaper_saturateI",1,SWIGTYPE_p_SampleType);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = waveshaper_saturate_I< SampleType >(*arg1,arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveshaper_saturateI__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  double arg2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("waveshaper_saturate_I< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("waveshaper_saturate_I< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("waveshaper_saturate_I< SampleType >",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("waveshaper_saturateI",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = waveshaper_saturate_I< SampleType >(*arg1,arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveshaper_saturateI(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_waveshaper_saturateI__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_waveshaper_saturateI__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'waveshaper_saturateI'\n"
    "  Possible C/C++ prototypes are:\n"
    "    waveshaper_saturate_I< SampleType >(SampleType &,double)\n"
    "    waveshaper_saturate_I< SampleType >(kfr::univector< SampleType > &,double)\n");
  lua_error(L);return 0;
}


static int _wrap_waveshaper_saturateII__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  double arg2 ;
  SampleType result;
  
  SWIG_check_num_args("waveshaper_saturate_II< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("waveshaper_saturate_II< SampleType >",1,"SampleType &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("waveshaper_saturate_II< SampleType >",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("waveshaper_saturateII",1,SWIGTYPE_p_SampleType);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = waveshaper_saturate_II< SampleType >(*arg1,arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveshaper_saturateII__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  double arg2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("waveshaper_saturate_II< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("waveshaper_saturate_II< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("waveshaper_saturate_II< SampleType >",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("waveshaper_saturateII",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = waveshaper_saturate_II< SampleType >(*arg1,arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_waveshaper_saturateII(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_waveshaper_saturateII__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_waveshaper_saturateII__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'waveshaper_saturateII'\n"
    "  Possible C/C++ prototypes are:\n"
    "    waveshaper_saturate_II< SampleType >(SampleType &,double)\n"
    "    waveshaper_saturate_II< SampleType >(kfr::univector< SampleType > &,double)\n");
  lua_error(L);return 0;
}


static int _wrap_note_to_hertz(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("f_note_to_hertz< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("f_note_to_hertz< SampleType >",1,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("note_to_hertz",1,SWIGTYPE_p_SampleType);
  }
  
  result = f_note_to_hertz< SampleType >((SampleType const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_hertz_to_note(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("f_hertz_to_note< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("f_hertz_to_note< SampleType >",1,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("hertz_to_note",1,SWIGTYPE_p_SampleType);
  }
  
  result = f_hertz_to_note< SampleType >((SampleType const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_amp_to_dB(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("f_amp_to_dB< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("f_amp_to_dB< SampleType >",1,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("amp_to_dB",1,SWIGTYPE_p_SampleType);
  }
  
  result = f_amp_to_dB< SampleType >((SampleType const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_amp(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("f_dB_to_amp< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("f_dB_to_amp< SampleType >",1,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("dB_to_amp",1,SWIGTYPE_p_SampleType);
  }
  
  result = f_dB_to_amp< SampleType >((SampleType const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_power_to_dB(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("f_power_to_dB< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("f_power_to_dB< SampleType >",1,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("power_to_dB",1,SWIGTYPE_p_SampleType);
  }
  
  result = f_power_to_dB< SampleType >((SampleType const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dB_to_power(lua_State* L) {
  int SWIG_arg = 0;
  SampleType *arg1 = 0 ;
  SampleType result;
  
  SWIG_check_num_args("f_dB_to_power< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("f_dB_to_power< SampleType >",1,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("dB_to_power",1,SWIGTYPE_p_SampleType);
  }
  
  result = f_dB_to_power< SampleType >((SampleType const &)*arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dcremove(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::dcremove< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::dcremove< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::dcremove< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("dcremove",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("dcremove",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR dcremove< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hann(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_hann< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hann< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hann< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hamming(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_hamming< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hamming< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hamming< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  DSP::window_symmetry arg3 ;
  SampleType *argp2 ;
  DSP::window_symmetry *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_blackman< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_blackman< SampleType >",2,"SampleType const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::make_window_blackman< SampleType >",3,"DSP::window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("window_blackman",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__window_symmetry,0))){
    SWIG_fail_ptr("window_blackman",3,SWIGTYPE_p_kfr__window_symmetry);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman< SampleType >(arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_blackman< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_blackman< SampleType >",2,"SampleType const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("window_blackman",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman< SampleType >(arg1,arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_blackman< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_blackman__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__window_symmetry, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_window_blackman__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman< SampleType >(size_t,SampleType const,DSP::window_symmetry)\n"
    "    DSP::make_window_blackman< SampleType >(size_t,SampleType const)\n"
    "    DSP::make_window_blackman< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_blackman_harris__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::window_symmetry arg2 ;
  DSP::window_symmetry *argp2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_blackman_harris< SampleType >",2,"DSP::window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__window_symmetry,0))){
    SWIG_fail_ptr("window_blackman_harris",2,SWIGTYPE_p_kfr__window_symmetry);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris< SampleType >(arg1,arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harris__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harris(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman_harris__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__window_symmetry, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_blackman_harris__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman_harris'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman_harris< SampleType >(size_t,DSP::window_symmetry)\n"
    "    DSP::make_window_blackman_harris< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_gaussian__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_gaussian< SampleType >",2,"SampleType const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("window_gaussian",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian< SampleType >(arg1,arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_gaussian__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_gaussian__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_gaussian'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_gaussian< SampleType >(size_t,SampleType const)\n"
    "    DSP::make_window_gaussian< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_triangular(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_triangular< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_triangular< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_triangular< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_cosine(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_cosine< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_cosine< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_cosine< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett_hann(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett_hann< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett_hann< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett_hann< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bohman(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_bohman< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bohman< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bohman< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_lanczos(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_lanczos< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_lanczos< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_lanczos< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_flattop(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_flattop< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_flattop< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_flattop< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_kaiser< SampleType >",2,"SampleType const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("window_kaiser",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser< SampleType >(arg1,arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser< SampleType >(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_kaiser__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_kaiser__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_kaiser'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_kaiser< SampleType >(size_t,SampleType const)\n"
    "    DSP::make_window_kaiser< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_hann_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_hann_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hann_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hann_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_hamming_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_hamming_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_hamming_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_hamming_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  DSP::window_symmetry arg3 ;
  SampleType *argp2 ;
  DSP::window_symmetry *argp3 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_ptr< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_ptr< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_blackman_ptr< SampleType >",2,"SampleType const");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::make_window_blackman_ptr< SampleType >",3,"DSP::window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("window_blackman_ptr",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__window_symmetry,0))){
    SWIG_fail_ptr("window_blackman_ptr",3,SWIGTYPE_p_kfr__window_symmetry);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_ptr< SampleType >(arg1,arg2,arg3);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_ptr< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_ptr< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_blackman_ptr< SampleType >",2,"SampleType const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("window_blackman_ptr",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_ptr< SampleType >(arg1,arg2);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptr__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_ptr(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman_ptr__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_blackman_ptr__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__window_symmetry, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_window_blackman_ptr__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman_ptr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman_ptr< SampleType >(size_t,SampleType const,DSP::window_symmetry)\n"
    "    DSP::make_window_blackman_ptr< SampleType >(size_t,SampleType const)\n"
    "    DSP::make_window_blackman_ptr< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_blackman_harris_ptr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::window_symmetry arg2 ;
  DSP::window_symmetry *argp2 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris_ptr< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris_ptr< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_blackman_harris_ptr< SampleType >",2,"DSP::window_symmetry");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__window_symmetry,0))){
    SWIG_fail_ptr("window_blackman_harris_ptr",2,SWIGTYPE_p_kfr__window_symmetry);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris_ptr< SampleType >(arg1,arg2);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harris_ptr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_blackman_harris_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_blackman_harris_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_blackman_harris_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_blackman_harris_ptr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_blackman_harris_ptr__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__window_symmetry, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_blackman_harris_ptr__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_blackman_harris_ptr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_blackman_harris_ptr< SampleType >(size_t,DSP::window_symmetry)\n"
    "    DSP::make_window_blackman_harris_ptr< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_gaussian_ptr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian_ptr< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian_ptr< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_gaussian_ptr< SampleType >",2,"SampleType const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("window_gaussian_ptr",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian_ptr< SampleType >(arg1,arg2);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian_ptr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_gaussian_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_gaussian_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_gaussian_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_gaussian_ptr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_gaussian_ptr__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_gaussian_ptr__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_gaussian_ptr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_gaussian_ptr< SampleType >(size_t,SampleType const)\n"
    "    DSP::make_window_gaussian_ptr< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_window_triangular_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_triangular_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_triangular_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_triangular_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_cosine_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_cosine_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_cosine_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_cosine_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bartlett_hann_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_bartlett_hann_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bartlett_hann_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bartlett_hann_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_bohman_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_bohman_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_bohman_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_bohman_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_lanczos_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_lanczos_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_lanczos_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_lanczos_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_flattop_ptr(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_flattop_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_flattop_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_flattop_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser_ptr__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser_ptr< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser_ptr< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::make_window_kaiser_ptr< SampleType >",2,"SampleType const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("window_kaiser_ptr",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser_ptr< SampleType >(arg1,arg2);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser_ptr__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::expression_pointer< SampleType > result;
  
  SWIG_check_num_args("DSP::make_window_kaiser_ptr< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::make_window_kaiser_ptr< SampleType >",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR make_window_kaiser_ptr< SampleType >(arg1);
  {
    kfr::expression_pointer< SampleType > * resultptr = new kfr::expression_pointer< SampleType >((const kfr::expression_pointer< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_window_kaiser_ptr(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_window_kaiser_ptr__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_window_kaiser_ptr__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'window_kaiser_ptr'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::make_window_kaiser_ptr< SampleType >(size_t,SampleType const)\n"
    "    DSP::make_window_kaiser_ptr< SampleType >(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_energy_to_loudness(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType *argp1 ;
  SampleType result;
  
  SWIG_check_num_args("DSP::energy_to_loudness< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::energy_to_loudness< SampleType >",1,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("energy_to_loudness",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR energy_to_loudness< SampleType >(arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_loudness_to_energy(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType *argp1 ;
  SampleType result;
  
  SWIG_check_num_args("DSP::loudness_to_energy< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::loudness_to_energy< SampleType >",1,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("loudness_to_energy",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR loudness_to_energy< SampleType >(arg1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinewave__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::sinewave< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sinewave< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::sinewave< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::sinewave< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::sinewave< SampleType >",4,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sinewave",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sinewave",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sinewave",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinewave< SampleType >(arg1,arg2,arg3,arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinewave__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::sinewave< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sinewave< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::sinewave< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::sinewave< SampleType >",3,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sinewave",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sinewave",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sinewave< SampleType >(arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sinewave(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_sinewave__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_sinewave__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sinewave'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sinewave< SampleType >(size_t,SampleType,SampleType,SampleType)\n"
    "    DSP::sinewave< SampleType >(size_t,SampleType,SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_squarewave__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::squarewave< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::squarewave< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::squarewave< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::squarewave< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::squarewave< SampleType >",4,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("squarewave",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("squarewave",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("squarewave",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR squarewave< SampleType >(arg1,arg2,arg3,arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squarewave__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::squarewave< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::squarewave< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::squarewave< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::squarewave< SampleType >",3,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("squarewave",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("squarewave",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR squarewave< SampleType >(arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_squarewave(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_squarewave__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_squarewave__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'squarewave'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::squarewave< SampleType >(size_t,SampleType,SampleType,SampleType)\n"
    "    DSP::squarewave< SampleType >(size_t,SampleType,SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_trianglewave__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::trianglewave< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::trianglewave< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::trianglewave< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::trianglewave< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::trianglewave< SampleType >",4,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("trianglewave",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("trianglewave",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("trianglewave",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR trianglewave< SampleType >(arg1,arg2,arg3,arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_trianglewave__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::trianglewave< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::trianglewave< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::trianglewave< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::trianglewave< SampleType >",3,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("trianglewave",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("trianglewave",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR trianglewave< SampleType >(arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_trianglewave(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_trianglewave__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_trianglewave__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'trianglewave'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::trianglewave< SampleType >(size_t,SampleType,SampleType,SampleType)\n"
    "    DSP::trianglewave< SampleType >(size_t,SampleType,SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_sawtoothwave__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::sawtoothwave< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",4,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sawtoothwave",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sawtoothwave",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sawtoothwave",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sawtoothwave< SampleType >(arg1,arg2,arg3,arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sawtoothwave__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::sawtoothwave< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::sawtoothwave< SampleType >",3,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sawtoothwave",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("sawtoothwave",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR sawtoothwave< SampleType >(arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sawtoothwave(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_sawtoothwave__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_sawtoothwave__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'sawtoothwave'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::sawtoothwave< SampleType >(size_t,SampleType,SampleType,SampleType)\n"
    "    DSP::sawtoothwave< SampleType >(size_t,SampleType,SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_generate_sine(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::generate_sin< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_sin< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::generate_sin< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::generate_sin< SampleType >",3,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("generate_sine",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("generate_sine",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_sin< SampleType >(arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_linear(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::generate_linear< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_linear< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::generate_linear< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::generate_linear< SampleType >",3,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("generate_linear",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("generate_linear",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_linear< SampleType >(arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_exp(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::generate_exp< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_exp< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::generate_exp< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::generate_exp< SampleType >",3,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("generate_exp",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("generate_exp",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_exp< SampleType >(arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_exp2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::generate_exp2< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_exp2< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::generate_exp2< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::generate_exp2< SampleType >",3,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("generate_exp2",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("generate_exp2",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_exp2< SampleType >(arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_generate_cossin(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::generate_cossin< SampleType >",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::generate_cossin< SampleType >",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::generate_cossin< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::generate_cossin< SampleType >",3,"SampleType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("generate_cossin",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("generate_cossin",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR generate_cossin< SampleType >(arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_resample(lua_State* L) {
  int SWIG_arg = 0;
  kfr::sample_rate_conversion_quality arg1 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::resample< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::resample< SampleType >",1,"kfr::sample_rate_conversion_quality");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::resample< SampleType >",2,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::resample< SampleType >",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("DSP::resample< SampleType >",4,"size_t");
  arg1 = (kfr::sample_rate_conversion_quality)(int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("resample",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR resample< SampleType >(arg1,(kfr::univector< SampleType > const &)*arg2,arg3,arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convert_sample(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::convert_sample< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::convert_sample< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("convert_sample",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR convert_sample< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_wavreader(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::WavReader< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::WavReader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::WavReader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DSP::WavReader< SampleType > *)new DSP::WavReader< SampleType >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__WavReaderT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_wavreader_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::read",1,"DSP::WavReader< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::WavReader< SampleType >::read",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavreader_read",1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavreader_read",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = (arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_wavreader_tell(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::tell",1,"DSP::WavReader< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavreader_tell",1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t);
  }
  
  result = ((DSP::WavReader< SampleType > const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_wavreader_seek(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) 0 ;
  size_t arg2 ;
  DSP::seek_origin arg3 ;
  bool result;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::seek",1,"DSP::WavReader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::WavReader< SampleType >::seek",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::WavReader< SampleType >::seek",3,"DSP::seek_origin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavreader_seek",1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (DSP::seek_origin)(int)lua_tonumber(L, 3);
  result = (bool)(arg1)->seek(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_wavreader_seek_begin(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::seek_begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::seek_begin",1,"DSP::WavReader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::WavReader< SampleType >::seek_begin",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavreader_seek_begin",1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->seek_begin(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_wavreader_seek_current(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::seek_current",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::seek_current",1,"DSP::WavReader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::WavReader< SampleType >::seek_current",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavreader_seek_current",1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->seek_current(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_wavreader_seek_end(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::seek_end",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::seek_end",1,"DSP::WavReader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::WavReader< SampleType >::seek_end",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavreader_seek_end",1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->seek_end(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_wavreader_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::format",1,"DSP::WavReader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavreader_format",1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_wavreader_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::WavReader< SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavReader< SampleType >::size",1,"DSP::WavReader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavreader_size",1,SWIGTYPE_p_DSP__WavReaderT_SampleType_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_wavreader(void *obj) {
DSP::WavReader< SampleType > *arg1 = (DSP::WavReader< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_wavreader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_wavreader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_wavreader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_float_wavreader_methods[]= {
    { "read", _wrap_float_wavreader_read},
    { "tell", _wrap_float_wavreader_tell},
    { "seek", _wrap_float_wavreader_seek},
    { "seek_begin", _wrap_float_wavreader_seek_begin},
    { "seek_current", _wrap_float_wavreader_seek_current},
    { "seek_end", _wrap_float_wavreader_seek_end},
    { "format", _wrap_float_wavreader_format},
    { "size", _wrap_float_wavreader_size},
    {0,0}
};
static swig_lua_method swig_float_wavreader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_wavreader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_wavreader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_wavreader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_wavreader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_wavreader_Sf_SwigStatic = {
    "float_wavreader",
    swig_float_wavreader_Sf_SwigStatic_methods,
    swig_float_wavreader_Sf_SwigStatic_attributes,
    swig_float_wavreader_Sf_SwigStatic_constants,
    swig_float_wavreader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_wavreader_bases[] = {0};
static const char *swig_float_wavreader_base_names[] = {0};
static swig_lua_class _wrap_class_float_wavreader = { "float_wavreader", "float_wavreader", &SWIGTYPE_p_DSP__WavReaderT_SampleType_t,_proxy__wrap_new_float_wavreader, swig_delete_float_wavreader, swig_float_wavreader_methods, swig_float_wavreader_attributes, &swig_float_wavreader_Sf_SwigStatic, swig_float_wavreader_meta, swig_float_wavreader_bases, swig_float_wavreader_base_names };

static int _wrap_float_wavwriter_writer_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< SampleType > *arg1 = (DSP::WavWriter< SampleType > *) 0 ;
  kfr::audio_writer_wav< SampleType > *arg2 = (kfr::audio_writer_wav< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< SampleType >::writer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< SampleType >::writer",1,"DSP::WavWriter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::WavWriter< SampleType >::writer",2,"kfr::audio_writer_wav< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavwriter_writer_set",1,SWIGTYPE_p_DSP__WavWriterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_writer_wavT_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("float_wavwriter_writer_set",2,SWIGTYPE_p_kfr__audio_writer_wavT_SampleType_t);
  }
  
  if (arg1) (arg1)->writer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_wavwriter_writer_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< SampleType > *arg1 = (DSP::WavWriter< SampleType > *) 0 ;
  kfr::audio_writer_wav< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< SampleType >::writer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< SampleType >::writer",1,"DSP::WavWriter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavwriter_writer_get",1,SWIGTYPE_p_DSP__WavWriterT_SampleType_t);
  }
  
  result = (kfr::audio_writer_wav< SampleType > *) ((arg1)->writer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_writer_wavT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_wavwriter(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::audio_format *arg2 = 0 ;
  DSP::WavWriter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< SampleType >::WavWriter",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::WavWriter< SampleType >::WavWriter",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::WavWriter< SampleType >::WavWriter",2,"DSP::audio_format const &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_format_and_length,0))){
    SWIG_fail_ptr("new_float_wavwriter",2,SWIGTYPE_p_kfr__audio_format_and_length);
  }
  
  result = (DSP::WavWriter< SampleType > *)new DSP::WavWriter< SampleType >((char const *)arg1,(DSP::audio_format const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__WavWriterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_wavwriter_write(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< SampleType > *arg1 = (DSP::WavWriter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< SampleType >::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< SampleType >::write",1,"DSP::WavWriter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::WavWriter< SampleType >::write",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavwriter_write",1,SWIGTYPE_p_DSP__WavWriterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavwriter_write",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->write(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_wavwriter_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::WavWriter< SampleType > *arg1 = (DSP::WavWriter< SampleType > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::WavWriter< SampleType >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::WavWriter< SampleType >::format",1,"DSP::WavWriter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__WavWriterT_SampleType_t,0))){
    SWIG_fail_ptr("float_wavwriter_format",1,SWIGTYPE_p_DSP__WavWriterT_SampleType_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_wavwriter(void *obj) {
DSP::WavWriter< SampleType > *arg1 = (DSP::WavWriter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_wavwriter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_wavwriter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_wavwriter_attributes[] = {
    { "writer", _wrap_float_wavwriter_writer_get, _wrap_float_wavwriter_writer_set },
    {0,0,0}
};
static swig_lua_method swig_float_wavwriter_methods[]= {
    { "write", _wrap_float_wavwriter_write},
    { "format", _wrap_float_wavwriter_format},
    {0,0}
};
static swig_lua_method swig_float_wavwriter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_wavwriter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_wavwriter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_wavwriter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_wavwriter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_wavwriter_Sf_SwigStatic = {
    "float_wavwriter",
    swig_float_wavwriter_Sf_SwigStatic_methods,
    swig_float_wavwriter_Sf_SwigStatic_attributes,
    swig_float_wavwriter_Sf_SwigStatic_constants,
    swig_float_wavwriter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_wavwriter_bases[] = {0};
static const char *swig_float_wavwriter_base_names[] = {0};
static swig_lua_class _wrap_class_float_wavwriter = { "float_wavwriter", "float_wavwriter", &SWIGTYPE_p_DSP__WavWriterT_SampleType_t,_proxy__wrap_new_float_wavwriter, swig_delete_float_wavwriter, swig_float_wavwriter_methods, swig_float_wavwriter_attributes, &swig_float_wavwriter_Sf_SwigStatic, swig_float_wavwriter_meta, swig_float_wavwriter_bases, swig_float_wavwriter_base_names };

static int _wrap_float_mp3_reader_reader_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  kfr::audio_reader_mp3< SampleType > *arg2 = (kfr::audio_reader_mp3< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::reader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::reader",1,"DSP::MP3Reader< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::reader",2,"kfr::audio_reader_mp3< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_mp3_reader_reader_set",1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_reader_mp3T_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("float_mp3_reader_reader_set",2,SWIGTYPE_p_kfr__audio_reader_mp3T_SampleType_t);
  }
  
  if (arg1) (arg1)->reader = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_mp3_reader_reader_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  kfr::audio_reader_mp3< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::reader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::reader",1,"DSP::MP3Reader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_mp3_reader_reader_get",1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t);
  }
  
  result = (kfr::audio_reader_mp3< SampleType > *) ((arg1)->reader);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_reader_mp3T_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_mp3_reader(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::MP3Reader< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::MP3Reader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::MP3Reader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DSP::MP3Reader< SampleType > *)new DSP::MP3Reader< SampleType >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_mp3_reader_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::read",1,"DSP::MP3Reader< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::read",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_mp3_reader_read",1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("float_mp3_reader_read",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = (arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_mp3_reader_tell(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::tell",1,"DSP::MP3Reader< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_mp3_reader_tell",1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t);
  }
  
  result = ((DSP::MP3Reader< SampleType > const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_mp3_reader_seek(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  size_t arg2 ;
  DSP::seek_origin arg3 ;
  bool result;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::seek",1,"DSP::MP3Reader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::seek",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::seek",3,"DSP::seek_origin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_mp3_reader_seek",1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (DSP::seek_origin)(int)lua_tonumber(L, 3);
  result = (bool)(arg1)->seek(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_mp3_reader_seek_begin(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::seek_begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::seek_begin",1,"DSP::MP3Reader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::seek_begin",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_mp3_reader_seek_begin",1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->seek_begin(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_mp3_reader_seek_current(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::seek_current",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::seek_current",1,"DSP::MP3Reader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::seek_current",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_mp3_reader_seek_current",1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->seek_current(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_mp3_reader_seek_end(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::seek_end",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::seek_end",1,"DSP::MP3Reader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::seek_end",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_mp3_reader_seek_end",1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->seek_end(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_mp3_reader_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::format",1,"DSP::MP3Reader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_mp3_reader_format",1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_mp3_reader_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::MP3Reader< SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::MP3Reader< SampleType >::size",1,"DSP::MP3Reader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_mp3_reader_size",1,SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_mp3_reader(void *obj) {
DSP::MP3Reader< SampleType > *arg1 = (DSP::MP3Reader< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_mp3_reader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_mp3_reader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_mp3_reader_attributes[] = {
    { "reader", _wrap_float_mp3_reader_reader_get, _wrap_float_mp3_reader_reader_set },
    {0,0,0}
};
static swig_lua_method swig_float_mp3_reader_methods[]= {
    { "read", _wrap_float_mp3_reader_read},
    { "tell", _wrap_float_mp3_reader_tell},
    { "seek", _wrap_float_mp3_reader_seek},
    { "seek_begin", _wrap_float_mp3_reader_seek_begin},
    { "seek_current", _wrap_float_mp3_reader_seek_current},
    { "seek_end", _wrap_float_mp3_reader_seek_end},
    { "format", _wrap_float_mp3_reader_format},
    { "size", _wrap_float_mp3_reader_size},
    {0,0}
};
static swig_lua_method swig_float_mp3_reader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_mp3_reader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_mp3_reader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_mp3_reader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_mp3_reader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_mp3_reader_Sf_SwigStatic = {
    "float_mp3_reader",
    swig_float_mp3_reader_Sf_SwigStatic_methods,
    swig_float_mp3_reader_Sf_SwigStatic_attributes,
    swig_float_mp3_reader_Sf_SwigStatic_constants,
    swig_float_mp3_reader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_mp3_reader_bases[] = {0};
static const char *swig_float_mp3_reader_base_names[] = {0};
static swig_lua_class _wrap_class_float_mp3_reader = { "float_mp3_reader", "float_mp3_reader", &SWIGTYPE_p_DSP__MP3ReaderT_SampleType_t,_proxy__wrap_new_float_mp3_reader, swig_delete_float_mp3_reader, swig_float_mp3_reader_methods, swig_float_mp3_reader_attributes, &swig_float_mp3_reader_Sf_SwigStatic, swig_float_mp3_reader_meta, swig_float_mp3_reader_bases, swig_float_mp3_reader_base_names };

static int _wrap_float_flac_reader_reader_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  kfr::audio_reader_flac< SampleType > *arg2 = (kfr::audio_reader_flac< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::reader",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::reader",1,"DSP::FlacReader< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FlacReader< SampleType >::reader",2,"kfr::audio_reader_flac< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_flac_reader_reader_set",1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_reader_flacT_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("float_flac_reader_reader_set",2,SWIGTYPE_p_kfr__audio_reader_flacT_SampleType_t);
  }
  
  if (arg1) (arg1)->reader = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_flac_reader_reader_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  kfr::audio_reader_flac< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::reader",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::reader",1,"DSP::FlacReader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_flac_reader_reader_get",1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t);
  }
  
  result = (kfr::audio_reader_flac< SampleType > *) ((arg1)->reader);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_reader_flacT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_float_flac_reader(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  DSP::FlacReader< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::FlacReader",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::FlacReader",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (DSP::FlacReader< SampleType > *)new DSP::FlacReader< SampleType >((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_flac_reader_read(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::read",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::read",1,"DSP::FlacReader< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FlacReader< SampleType >::read",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_flac_reader_read",1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("float_flac_reader_read",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = (arg1)->read(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_flac_reader_tell(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::tell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::tell",1,"DSP::FlacReader< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_flac_reader_tell",1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t);
  }
  
  result = ((DSP::FlacReader< SampleType > const *)arg1)->tell();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_flac_reader_seek(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  size_t arg2 ;
  DSP::seek_origin arg3 ;
  bool result;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::seek",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::seek",1,"DSP::FlacReader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FlacReader< SampleType >::seek",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("DSP::FlacReader< SampleType >::seek",3,"DSP::seek_origin");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_flac_reader_seek",1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (DSP::seek_origin)(int)lua_tonumber(L, 3);
  result = (bool)(arg1)->seek(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_flac_reader_seek_begin(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::seek_begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::seek_begin",1,"DSP::FlacReader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FlacReader< SampleType >::seek_begin",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_flac_reader_seek_begin",1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->seek_begin(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_flac_reader_seek_current(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::seek_current",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::seek_current",1,"DSP::FlacReader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FlacReader< SampleType >::seek_current",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_flac_reader_seek_current",1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->seek_current(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_flac_reader_seek_end(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  size_t arg2 ;
  bool result;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::seek_end",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::seek_end",1,"DSP::FlacReader< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::FlacReader< SampleType >::seek_end",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_flac_reader_seek_end",1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (bool)(arg1)->seek_end(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_flac_reader_format(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  DSP::audio_format *result = 0 ;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::format",1,"DSP::FlacReader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_flac_reader_format",1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t);
  }
  
  result = (DSP::audio_format *) &(arg1)->format();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__audio_format_and_length,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_float_flac_reader_size(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("DSP::FlacReader< SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FlacReader< SampleType >::size",1,"DSP::FlacReader< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t,0))){
    SWIG_fail_ptr("float_flac_reader_size",1,SWIGTYPE_p_DSP__FlacReaderT_SampleType_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_float_flac_reader(void *obj) {
DSP::FlacReader< SampleType > *arg1 = (DSP::FlacReader< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_float_flac_reader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_float_flac_reader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_float_flac_reader_attributes[] = {
    { "reader", _wrap_float_flac_reader_reader_get, _wrap_float_flac_reader_reader_set },
    {0,0,0}
};
static swig_lua_method swig_float_flac_reader_methods[]= {
    { "read", _wrap_float_flac_reader_read},
    { "tell", _wrap_float_flac_reader_tell},
    { "seek", _wrap_float_flac_reader_seek},
    { "seek_begin", _wrap_float_flac_reader_seek_begin},
    { "seek_current", _wrap_float_flac_reader_seek_current},
    { "seek_end", _wrap_float_flac_reader_seek_end},
    { "format", _wrap_float_flac_reader_format},
    { "size", _wrap_float_flac_reader_size},
    {0,0}
};
static swig_lua_method swig_float_flac_reader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_float_flac_reader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_float_flac_reader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_float_flac_reader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_float_flac_reader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_float_flac_reader_Sf_SwigStatic = {
    "float_flac_reader",
    swig_float_flac_reader_Sf_SwigStatic_methods,
    swig_float_flac_reader_Sf_SwigStatic_attributes,
    swig_float_flac_reader_Sf_SwigStatic_constants,
    swig_float_flac_reader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_float_flac_reader_bases[] = {0};
static const char *swig_float_flac_reader_base_names[] = {0};
static swig_lua_class _wrap_class_float_flac_reader = { "float_flac_reader", "float_flac_reader", &SWIGTYPE_p_DSP__FlacReaderT_SampleType_t,_proxy__wrap_new_float_flac_reader, swig_delete_float_flac_reader, swig_float_flac_reader_methods, swig_float_flac_reader_attributes, &swig_float_flac_reader_Sf_SwigStatic, swig_float_flac_reader_meta, swig_float_flac_reader_bases, swig_float_flac_reader_base_names };

static int _wrap_wav_load(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  kfr::audio_format *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("wav_load< SampleType >",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("wav_load< SampleType >",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("wav_load< SampleType >",2,"kfr::audio_format &");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__audio_format,0))){
    SWIG_fail_ptr("wav_load",2,SWIGTYPE_p_kfr__audio_format);
  }
  
  result = wav_load< SampleType >((char const *)arg1,*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_save__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  double arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("wav_write< SampleType >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("wav_write< SampleType >",1,"kfr::univector< SampleType > &");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("wav_write< SampleType >",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("wav_write< SampleType >",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("wav_write< SampleType >",4,"double");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("wav_write< SampleType >",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("wav_save",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  wav_write< SampleType >(*arg1,(char const *)arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_save__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("wav_write< SampleType >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("wav_write< SampleType >",1,"kfr::univector< SampleType > &");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("wav_write< SampleType >",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("wav_write< SampleType >",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("wav_write< SampleType >",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("wav_save",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  wav_write< SampleType >(*arg1,(char const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_wav_save(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_wav_save__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_wav_save__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'wav_save'\n"
    "  Possible C/C++ prototypes are:\n"
    "    wav_write< SampleType >(kfr::univector< SampleType > &,char const *,size_t,double,bool)\n"
    "    wav_write< SampleType >(kfr::univector< SampleType > &,char const *,size_t,double)\n");
  lua_error(L);return 0;
}


static int _wrap_mp3_load(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("mp3_load< SampleType >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("mp3_load< SampleType >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = mp3_load< SampleType >((char const *)arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_flac_load(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("flac_load< SampleType >",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("flac_load< SampleType >",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = flac_load< SampleType >((char const *)arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  kfr::biquad_filter< SampleType > *arg2 = (kfr::biquad_filter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::filter",1,"DSP::Biquad< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::filter",2,"kfr::biquad_filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_filter_set",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__biquad_filterT_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("Biquad_filter_set",2,SWIGTYPE_p_kfr__biquad_filterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  kfr::biquad_filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::filter",1,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_filter_get",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  result = (kfr::biquad_filter< SampleType > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_filterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_init__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  DSP::BiQuadParams< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::init",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::init",2,"DSP::BiQuadParams< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_init",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_init",2,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  (arg1)->init((DSP::BiQuadParams< SampleType > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_init__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  kfr::biquad_params< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::init",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::init",2,"kfr::biquad_params< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_init",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_init",2,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  (arg1)->init((kfr::biquad_params< SampleType > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_init__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< SampleType > > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::init",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::init",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::init",2,"std::vector< kfr::biquad_params< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_init",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("Biquad_init",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  (arg1)->init((std::vector< kfr::biquad_params< SampleType > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_init(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Biquad_init__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Biquad_init__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Biquad_init__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad_init'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Biquad< SampleType >::init(DSP::BiQuadParams< SampleType > const &)\n"
    "    DSP::Biquad< SampleType >::init(kfr::biquad_params< SampleType > const &)\n"
    "    DSP::Biquad< SampleType >::init(std::vector< kfr::biquad_params< SampleType > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_Biquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::Biquad",0,0)
  result = (DSP::Biquad< SampleType > *)new DSP::Biquad< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::Biquad",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::Biquad",1,"kfr::biquad_params< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("new_Biquad",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)new DSP::Biquad< SampleType >((kfr::biquad_params< SampleType > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::Biquad",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::Biquad",1,"DSP::BiQuadParams< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("new_Biquad",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)new DSP::Biquad< SampleType >((DSP::BiQuadParams< SampleType > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Biquad__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Biquad__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Biquad__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Biquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Biquad< SampleType >::Biquad()\n"
    "    DSP::Biquad< SampleType >::Biquad(kfr::biquad_params< SampleType > const &)\n"
    "    DSP::Biquad< SampleType >::Biquad(DSP::BiQuadParams< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_notch(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::notch",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::notch",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::notch",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_notch",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_notch",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_notch",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->notch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::lowpass",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::lowpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::lowpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_lowpass",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::highpass",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::highpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::highpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_highpass",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_peak(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::peak",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::peak",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::peak",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Biquad< SampleType >::peak",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_peak",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_peak",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_peak",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_peak",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  (arg1)->peak(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::lowshelf",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::lowshelf",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::lowshelf",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_lowshelf",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_lowshelf",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_lowshelf",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->lowshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_highshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::highshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::highshelf",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::highshelf",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::highshelf",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_highshelf",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_highshelf",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_highshelf",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->highshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::bandpass",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::bandpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::bandpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_bandpass",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("Biquad_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->bandpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::apply",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_apply",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::apply",1,"DSP::Biquad< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Biquad< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Biquad< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_apply",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Biquad_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BiquadT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Biquad_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Biquad< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::Biquad< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Biquad< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Biquad< SampleType >::reset",1,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("Biquad_reset",1,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Biquad(void *obj) {
DSP::Biquad< SampleType > *arg1 = (DSP::Biquad< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_Biquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Biquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Biquad_attributes[] = {
    { "filter", _wrap_Biquad_filter_get, _wrap_Biquad_filter_set },
    {0,0,0}
};
static swig_lua_method swig_Biquad_methods[]= {
    { "init", _wrap_Biquad_init},
    { "notch", _wrap_Biquad_notch},
    { "lowpass", _wrap_Biquad_lowpass},
    { "highpass", _wrap_Biquad_highpass},
    { "peak", _wrap_Biquad_peak},
    { "lowshelf", _wrap_Biquad_lowshelf},
    { "highshelf", _wrap_Biquad_highshelf},
    { "bandpass", _wrap_Biquad_bandpass},
    { "apply", _wrap_Biquad_apply},
    { "reset", _wrap_Biquad_reset},
    {0,0}
};
static swig_lua_method swig_Biquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Biquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Biquad_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Biquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Biquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Biquad_Sf_SwigStatic = {
    "Biquad",
    swig_Biquad_Sf_SwigStatic_methods,
    swig_Biquad_Sf_SwigStatic_attributes,
    swig_Biquad_Sf_SwigStatic_constants,
    swig_Biquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Biquad_bases[] = {0};
static const char *swig_Biquad_base_names[] = {0};
static swig_lua_class _wrap_class_Biquad = { "Biquad", "Biquad", &SWIGTYPE_p_DSP__BiquadT_SampleType_t,_proxy__wrap_new_Biquad, swig_delete_Biquad, swig_Biquad_methods, swig_Biquad_attributes, &swig_Biquad_Sf_SwigStatic, swig_Biquad_meta, swig_Biquad_bases, swig_Biquad_base_names };

static int _wrap_biquadparams_bq_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< SampleType > > *arg2 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::bq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::bq",1,"DSP::BiQuadParams< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::bq",2,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_bq_set",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquadparams_bq_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  if (arg1) (arg1)->bq = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_bq_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::bq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::bq",1,"DSP::BiQuadParams< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_bq_get",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  result = (std::vector< kfr::biquad_params< SampleType > > *)& ((arg1)->bq);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_biquadparams(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::BiQuadParams",0,0)
  result = (DSP::BiQuadParams< SampleType > *)new DSP::BiQuadParams< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_get_params(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  kfr::biquad_params< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::get_params",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::get_params",1,"DSP::BiQuadParams< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_get_params",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  result = (kfr::biquad_params< SampleType > *)(arg1)->get_params();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_biquad_notch(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_notch",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_notch",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_notch",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_biquad_notch",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_notch",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_notch",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->biquad_notch(arg2,arg3);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_biquad_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_lowpass",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_lowpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_lowpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_biquad_lowpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->biquad_lowpass(arg2,arg3);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_biquad_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_highpass",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_highpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_highpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_biquad_highpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->biquad_highpass(arg2,arg3);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_biquad_peak(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_peak",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_peak",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_peak",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_peak",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_biquad_peak",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_peak",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_peak",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_peak",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (arg1)->biquad_peak(arg2,arg3,arg4);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_biquad_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_lowshelf",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_lowshelf",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_lowshelf",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_biquad_lowshelf",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_lowshelf",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_lowshelf",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->biquad_lowshelf(arg2,arg3);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_biquad_highshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_highshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_highshelf",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_highshelf",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_highshelf",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_biquad_highshelf",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_highshelf",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_highshelf",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->biquad_highshelf(arg2,arg3);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_biquad_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::biquad_bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_bandpass",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_bandpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::biquad_bandpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_biquad_bandpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_biquad_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->biquad_bandpass(arg2,arg3);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_add_notch(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_notch",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_notch",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_notch",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_add_notch",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_notch",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_notch",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->add_notch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_add_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_lowpass",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_lowpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_lowpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_add_lowpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->add_lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_add_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_highpass",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_highpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_highpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_add_highpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->add_highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_add_peak(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_peak",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_peak",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_peak",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_peak",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_add_peak",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_peak",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_peak",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_peak",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  (arg1)->add_peak(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_add_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_lowshelf",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_lowshelf",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_lowshelf",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_add_lowshelf",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_lowshelf",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_lowshelf",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->add_lowshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_add_highself(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_highself",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_highself",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_highself",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_highself",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_add_highself",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_highself",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_highself",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->add_highself(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquadparams_add_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::BiQuadParams< SampleType >::add_bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_bandpass",1,"DSP::BiQuadParams< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_bandpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BiQuadParams< SampleType >::add_bandpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquadparams_add_bandpass",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquadparams_add_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->add_bandpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_biquadparams(void *obj) {
DSP::BiQuadParams< SampleType > *arg1 = (DSP::BiQuadParams< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_biquadparams(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_biquadparams);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_biquadparams_attributes[] = {
    { "bq", _wrap_biquadparams_bq_get, _wrap_biquadparams_bq_set },
    {0,0,0}
};
static swig_lua_method swig_biquadparams_methods[]= {
    { "get_params", _wrap_biquadparams_get_params},
    { "biquad_notch", _wrap_biquadparams_biquad_notch},
    { "biquad_lowpass", _wrap_biquadparams_biquad_lowpass},
    { "biquad_highpass", _wrap_biquadparams_biquad_highpass},
    { "biquad_peak", _wrap_biquadparams_biquad_peak},
    { "biquad_lowshelf", _wrap_biquadparams_biquad_lowshelf},
    { "biquad_highshelf", _wrap_biquadparams_biquad_highshelf},
    { "biquad_bandpass", _wrap_biquadparams_biquad_bandpass},
    { "add_notch", _wrap_biquadparams_add_notch},
    { "add_lowpass", _wrap_biquadparams_add_lowpass},
    { "add_highpass", _wrap_biquadparams_add_highpass},
    { "add_peak", _wrap_biquadparams_add_peak},
    { "add_lowshelf", _wrap_biquadparams_add_lowshelf},
    { "add_highself", _wrap_biquadparams_add_highself},
    { "add_bandpass", _wrap_biquadparams_add_bandpass},
    {0,0}
};
static swig_lua_method swig_biquadparams_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_biquadparams_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_biquadparams_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_biquadparams_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_biquadparams_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_biquadparams_Sf_SwigStatic = {
    "biquadparams",
    swig_biquadparams_Sf_SwigStatic_methods,
    swig_biquadparams_Sf_SwigStatic_attributes,
    swig_biquadparams_Sf_SwigStatic_constants,
    swig_biquadparams_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_biquadparams_bases[] = {0};
static const char *swig_biquadparams_base_names[] = {0};
static swig_lua_class _wrap_class_biquadparams = { "biquadparams", "biquadparams", &SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,_proxy__wrap_new_biquadparams, swig_delete_biquadparams, swig_biquadparams_methods, swig_biquadparams_attributes, &swig_biquadparams_Sf_SwigStatic, swig_biquadparams_meta, swig_biquadparams_bases, swig_biquadparams_base_names };

static int _wrap_biquad(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::biquad< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::biquad< SampleType >",1,"DSP::BiQuadParams< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::biquad< SampleType >",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("biquad",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR biquad< SampleType >((DSP::BiQuadParams< SampleType > const &)*arg1,*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_notch_params(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::notch_params< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::notch_params< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::notch_params< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("notch_params",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("notch_params",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR notch_params< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowpass_params(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::lowpass_params< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lowpass_params< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::lowpass_params< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("lowpass_params",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("lowpass_params",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lowpass_params< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highpass_params(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::highpass_params< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::highpass_params< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::highpass_params< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("highpass_params",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("highpass_params",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR highpass_params< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_peak_params(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::peak_params< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::peak_params< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::peak_params< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::peak_params< SampleType >",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("peak_params",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("peak_params",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("peak_params",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR peak_params< SampleType >(arg1,arg2,arg3);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowshelf_params(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::lowshelf_params< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lowshelf_params< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::lowshelf_params< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("lowshelf_params",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("lowshelf_params",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lowshelf_params< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highshelf_params(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::highshelf_params< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::highshelf_params< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::highshelf_params< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("highshelf_params",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("highshelf_params",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR highshelf_params< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bandpass_params(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("DSP::bandpass_params< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::bandpass_params< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bandpass_params< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bandpass_params",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bandpass_params",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bandpass_params< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_notch_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< SampleType > *arg1 = (DSP::NotchFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *arg2 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::filter",1,"DSP::NotchFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::filter",2,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_SampleType_t,0))){
    SWIG_fail_ptr("notch_filter_filter_set",1,SWIGTYPE_p_DSP__NotchFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("notch_filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_notch_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< SampleType > *arg1 = (DSP::NotchFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::filter",1,"DSP::NotchFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_SampleType_t,0))){
    SWIG_fail_ptr("notch_filter_filter_get",1,SWIGTYPE_p_DSP__NotchFilterT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_notch_filter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::NotchFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< SampleType >::NotchFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::NotchFilter",1,"DSP::BiQuadParams< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::NotchFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::NotchFilter",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("new_notch_filter",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_notch_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_notch_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (DSP::NotchFilter< SampleType > *)new DSP::NotchFilter< SampleType >((DSP::BiQuadParams< SampleType > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__NotchFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_notch_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< SampleType > *arg1 = (DSP::NotchFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::apply",1,"DSP::NotchFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_SampleType_t,0))){
    SWIG_fail_ptr("notch_filter_apply",1,SWIGTYPE_p_DSP__NotchFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("notch_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_notch_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< SampleType > *arg1 = (DSP::NotchFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::apply",1,"DSP::NotchFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_SampleType_t,0))){
    SWIG_fail_ptr("notch_filter_apply",1,SWIGTYPE_p_DSP__NotchFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("notch_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("notch_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_notch_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__NotchFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_notch_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__NotchFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_notch_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'notch_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::NotchFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::NotchFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_notch_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::NotchFilter< SampleType > *arg1 = (DSP::NotchFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::NotchFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::NotchFilter< SampleType >::reset",1,"DSP::NotchFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__NotchFilterT_SampleType_t,0))){
    SWIG_fail_ptr("notch_filter_reset",1,SWIGTYPE_p_DSP__NotchFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_notch_filter(void *obj) {
DSP::NotchFilter< SampleType > *arg1 = (DSP::NotchFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_notch_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_notch_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_notch_filter_attributes[] = {
    { "filter", _wrap_notch_filter_filter_get, _wrap_notch_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_notch_filter_methods[]= {
    { "apply", _wrap_notch_filter_apply},
    { "reset", _wrap_notch_filter_reset},
    {0,0}
};
static swig_lua_method swig_notch_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_notch_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_notch_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_notch_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_notch_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_notch_filter_Sf_SwigStatic = {
    "notch_filter",
    swig_notch_filter_Sf_SwigStatic_methods,
    swig_notch_filter_Sf_SwigStatic_attributes,
    swig_notch_filter_Sf_SwigStatic_constants,
    swig_notch_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_notch_filter_bases[] = {0};
static const char *swig_notch_filter_base_names[] = {0};
static swig_lua_class _wrap_class_notch_filter = { "notch_filter", "notch_filter", &SWIGTYPE_p_DSP__NotchFilterT_SampleType_t,_proxy__wrap_new_notch_filter, swig_delete_notch_filter, swig_notch_filter_methods, swig_notch_filter_attributes, &swig_notch_filter_Sf_SwigStatic, swig_notch_filter_meta, swig_notch_filter_bases, swig_notch_filter_base_names };

static int _wrap_lowpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< SampleType > *arg1 = (DSP::LowPassFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *arg2 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::filter",1,"DSP::LowPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::filter",2,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("lowpass_filter_filter_set",1,SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("lowpass_filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< SampleType > *arg1 = (DSP::LowPassFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::filter",1,"DSP::LowPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("lowpass_filter_filter_get",1,SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_lowpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::LowPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< SampleType >::LowPassFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::LowPassFilter",1,"DSP::BiQuadParams< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::LowPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::LowPassFilter",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("new_lowpass_filter",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_lowpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_lowpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (DSP::LowPassFilter< SampleType > *)new DSP::LowPassFilter< SampleType >((DSP::BiQuadParams< SampleType > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< SampleType > *arg1 = (DSP::LowPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::apply",1,"DSP::LowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("lowpass_filter_apply",1,SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("lowpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< SampleType > *arg1 = (DSP::LowPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::apply",1,"DSP::LowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("lowpass_filter_apply",1,SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("lowpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("lowpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_lowpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_lowpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lowpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::LowPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::LowPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_lowpass_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowPassFilter< SampleType > *arg1 = (DSP::LowPassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::LowPassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowPassFilter< SampleType >::reset",1,"DSP::LowPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("lowpass_filter_reset",1,SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_lowpass_filter(void *obj) {
DSP::LowPassFilter< SampleType > *arg1 = (DSP::LowPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_lowpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_lowpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_lowpass_filter_attributes[] = {
    { "filter", _wrap_lowpass_filter_filter_get, _wrap_lowpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_lowpass_filter_methods[]= {
    { "apply", _wrap_lowpass_filter_apply},
    { "reset", _wrap_lowpass_filter_reset},
    {0,0}
};
static swig_lua_method swig_lowpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_lowpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_lowpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_lowpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_lowpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_lowpass_filter_Sf_SwigStatic = {
    "lowpass_filter",
    swig_lowpass_filter_Sf_SwigStatic_methods,
    swig_lowpass_filter_Sf_SwigStatic_attributes,
    swig_lowpass_filter_Sf_SwigStatic_constants,
    swig_lowpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_lowpass_filter_bases[] = {0};
static const char *swig_lowpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_lowpass_filter = { "lowpass_filter", "lowpass_filter", &SWIGTYPE_p_DSP__LowPassFilterT_SampleType_t,_proxy__wrap_new_lowpass_filter, swig_delete_lowpass_filter, swig_lowpass_filter_methods, swig_lowpass_filter_attributes, &swig_lowpass_filter_Sf_SwigStatic, swig_lowpass_filter_meta, swig_lowpass_filter_bases, swig_lowpass_filter_base_names };

static int _wrap_highpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< SampleType > *arg1 = (DSP::HighPassFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *arg2 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::filter",1,"DSP::HighPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::filter",2,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("highpass_filter_filter_set",1,SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("highpass_filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< SampleType > *arg1 = (DSP::HighPassFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::filter",1,"DSP::HighPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("highpass_filter_filter_get",1,SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_highpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::HighPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< SampleType >::HighPassFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::HighPassFilter",1,"DSP::BiQuadParams< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::HighPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::HighPassFilter",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("new_highpass_filter",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_highpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_highpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (DSP::HighPassFilter< SampleType > *)new DSP::HighPassFilter< SampleType >((DSP::BiQuadParams< SampleType > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< SampleType > *arg1 = (DSP::HighPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::apply",1,"DSP::HighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("highpass_filter_apply",1,SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("highpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< SampleType > *arg1 = (DSP::HighPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::apply",1,"DSP::HighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("highpass_filter_apply",1,SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("highpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("highpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_highpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_highpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'highpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::HighPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::HighPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_highpass_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighPassFilter< SampleType > *arg1 = (DSP::HighPassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::HighPassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighPassFilter< SampleType >::reset",1,"DSP::HighPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("highpass_filter_reset",1,SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_highpass_filter(void *obj) {
DSP::HighPassFilter< SampleType > *arg1 = (DSP::HighPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_highpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_highpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_highpass_filter_attributes[] = {
    { "filter", _wrap_highpass_filter_filter_get, _wrap_highpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_highpass_filter_methods[]= {
    { "apply", _wrap_highpass_filter_apply},
    { "reset", _wrap_highpass_filter_reset},
    {0,0}
};
static swig_lua_method swig_highpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_highpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_highpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_highpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_highpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_highpass_filter_Sf_SwigStatic = {
    "highpass_filter",
    swig_highpass_filter_Sf_SwigStatic_methods,
    swig_highpass_filter_Sf_SwigStatic_attributes,
    swig_highpass_filter_Sf_SwigStatic_constants,
    swig_highpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_highpass_filter_bases[] = {0};
static const char *swig_highpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_highpass_filter = { "highpass_filter", "highpass_filter", &SWIGTYPE_p_DSP__HighPassFilterT_SampleType_t,_proxy__wrap_new_highpass_filter, swig_delete_highpass_filter, swig_highpass_filter_methods, swig_highpass_filter_attributes, &swig_highpass_filter_Sf_SwigStatic, swig_highpass_filter_meta, swig_highpass_filter_bases, swig_highpass_filter_base_names };

static int _wrap_bandpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< SampleType > *arg1 = (DSP::BandPassFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *arg2 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::filter",1,"DSP::BandPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::filter",2,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bandpass_filter_filter_set",1,SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("bandpass_filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bandpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< SampleType > *arg1 = (DSP::BandPassFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::filter",1,"DSP::BandPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bandpass_filter_filter_get",1,SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_bandpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::BandPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< SampleType >::BandPassFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::BandPassFilter",1,"DSP::BiQuadParams< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::BandPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::BandPassFilter",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("new_bandpass_filter",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_bandpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_bandpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (DSP::BandPassFilter< SampleType > *)new DSP::BandPassFilter< SampleType >((DSP::BiQuadParams< SampleType > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bandpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< SampleType > *arg1 = (DSP::BandPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::apply",1,"DSP::BandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bandpass_filter_apply",1,SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bandpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bandpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< SampleType > *arg1 = (DSP::BandPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::apply",1,"DSP::BandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bandpass_filter_apply",1,SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bandpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bandpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bandpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_bandpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_bandpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bandpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BandPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::BandPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_bandpass_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BandPassFilter< SampleType > *arg1 = (DSP::BandPassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::BandPassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BandPassFilter< SampleType >::reset",1,"DSP::BandPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bandpass_filter_reset",1,SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_bandpass_filter(void *obj) {
DSP::BandPassFilter< SampleType > *arg1 = (DSP::BandPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_bandpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bandpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bandpass_filter_attributes[] = {
    { "filter", _wrap_bandpass_filter_filter_get, _wrap_bandpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_bandpass_filter_methods[]= {
    { "apply", _wrap_bandpass_filter_apply},
    { "reset", _wrap_bandpass_filter_reset},
    {0,0}
};
static swig_lua_method swig_bandpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bandpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bandpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bandpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bandpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bandpass_filter_Sf_SwigStatic = {
    "bandpass_filter",
    swig_bandpass_filter_Sf_SwigStatic_methods,
    swig_bandpass_filter_Sf_SwigStatic_attributes,
    swig_bandpass_filter_Sf_SwigStatic_constants,
    swig_bandpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bandpass_filter_bases[] = {0};
static const char *swig_bandpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_bandpass_filter = { "bandpass_filter", "bandpass_filter", &SWIGTYPE_p_DSP__BandPassFilterT_SampleType_t,_proxy__wrap_new_bandpass_filter, swig_delete_bandpass_filter, swig_bandpass_filter_methods, swig_bandpass_filter_attributes, &swig_bandpass_filter_Sf_SwigStatic, swig_bandpass_filter_meta, swig_bandpass_filter_bases, swig_bandpass_filter_base_names };

static int _wrap_peak_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< SampleType > *arg1 = (DSP::PeakFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *arg2 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::filter",1,"DSP::PeakFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::filter",2,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_SampleType_t,0))){
    SWIG_fail_ptr("peak_filter_filter_set",1,SWIGTYPE_p_DSP__PeakFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("peak_filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_peak_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< SampleType > *arg1 = (DSP::PeakFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::filter",1,"DSP::PeakFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_SampleType_t,0))){
    SWIG_fail_ptr("peak_filter_filter_get",1,SWIGTYPE_p_DSP__PeakFilterT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_peak_filter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  DSP::PeakFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< SampleType >::PeakFilter",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::PeakFilter",1,"DSP::BiQuadParams< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::PeakFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::PeakFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::PeakFilter",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("new_peak_filter",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_peak_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_peak_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_peak_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (DSP::PeakFilter< SampleType > *)new DSP::PeakFilter< SampleType >((DSP::BiQuadParams< SampleType > const &)*arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__PeakFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_peak_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< SampleType > *arg1 = (DSP::PeakFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::apply",1,"DSP::PeakFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_SampleType_t,0))){
    SWIG_fail_ptr("peak_filter_apply",1,SWIGTYPE_p_DSP__PeakFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("peak_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_peak_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< SampleType > *arg1 = (DSP::PeakFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::apply",1,"DSP::PeakFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_SampleType_t,0))){
    SWIG_fail_ptr("peak_filter_apply",1,SWIGTYPE_p_DSP__PeakFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("peak_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("peak_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_peak_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__PeakFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_peak_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__PeakFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_peak_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'peak_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::PeakFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::PeakFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_peak_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::PeakFilter< SampleType > *arg1 = (DSP::PeakFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::PeakFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::PeakFilter< SampleType >::reset",1,"DSP::PeakFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__PeakFilterT_SampleType_t,0))){
    SWIG_fail_ptr("peak_filter_reset",1,SWIGTYPE_p_DSP__PeakFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_peak_filter(void *obj) {
DSP::PeakFilter< SampleType > *arg1 = (DSP::PeakFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_peak_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_peak_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_peak_filter_attributes[] = {
    { "filter", _wrap_peak_filter_filter_get, _wrap_peak_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_peak_filter_methods[]= {
    { "apply", _wrap_peak_filter_apply},
    { "reset", _wrap_peak_filter_reset},
    {0,0}
};
static swig_lua_method swig_peak_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_peak_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_peak_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_peak_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_peak_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_peak_filter_Sf_SwigStatic = {
    "peak_filter",
    swig_peak_filter_Sf_SwigStatic_methods,
    swig_peak_filter_Sf_SwigStatic_attributes,
    swig_peak_filter_Sf_SwigStatic_constants,
    swig_peak_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_peak_filter_bases[] = {0};
static const char *swig_peak_filter_base_names[] = {0};
static swig_lua_class _wrap_class_peak_filter = { "peak_filter", "peak_filter", &SWIGTYPE_p_DSP__PeakFilterT_SampleType_t,_proxy__wrap_new_peak_filter, swig_delete_peak_filter, swig_peak_filter_methods, swig_peak_filter_attributes, &swig_peak_filter_Sf_SwigStatic, swig_peak_filter_meta, swig_peak_filter_bases, swig_peak_filter_base_names };

static int _wrap_lowshelf_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< SampleType > *arg1 = (DSP::LowShelfFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *arg2 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::filter",1,"DSP::LowShelfFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::filter",2,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t,0))){
    SWIG_fail_ptr("lowshelf_filter_filter_set",1,SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("lowshelf_filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowshelf_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< SampleType > *arg1 = (DSP::LowShelfFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::filter",1,"DSP::LowShelfFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t,0))){
    SWIG_fail_ptr("lowshelf_filter_filter_get",1,SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_lowshelf_filter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::LowShelfFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< SampleType >::LowShelfFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::LowShelfFilter",1,"DSP::BiQuadParams< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::LowShelfFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::LowShelfFilter",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("new_lowshelf_filter",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_lowshelf_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_lowshelf_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (DSP::LowShelfFilter< SampleType > *)new DSP::LowShelfFilter< SampleType >((DSP::BiQuadParams< SampleType > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowshelf_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< SampleType > *arg1 = (DSP::LowShelfFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::apply",1,"DSP::LowShelfFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t,0))){
    SWIG_fail_ptr("lowshelf_filter_apply",1,SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("lowshelf_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowshelf_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< SampleType > *arg1 = (DSP::LowShelfFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::apply",1,"DSP::LowShelfFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t,0))){
    SWIG_fail_ptr("lowshelf_filter_apply",1,SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("lowshelf_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("lowshelf_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowshelf_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_lowshelf_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_lowshelf_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'lowshelf_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::LowShelfFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::LowShelfFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_lowshelf_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::LowShelfFilter< SampleType > *arg1 = (DSP::LowShelfFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::LowShelfFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::LowShelfFilter< SampleType >::reset",1,"DSP::LowShelfFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t,0))){
    SWIG_fail_ptr("lowshelf_filter_reset",1,SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_lowshelf_filter(void *obj) {
DSP::LowShelfFilter< SampleType > *arg1 = (DSP::LowShelfFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_lowshelf_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_lowshelf_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_lowshelf_filter_attributes[] = {
    { "filter", _wrap_lowshelf_filter_filter_get, _wrap_lowshelf_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_lowshelf_filter_methods[]= {
    { "apply", _wrap_lowshelf_filter_apply},
    { "reset", _wrap_lowshelf_filter_reset},
    {0,0}
};
static swig_lua_method swig_lowshelf_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_lowshelf_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_lowshelf_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_lowshelf_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_lowshelf_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_lowshelf_filter_Sf_SwigStatic = {
    "lowshelf_filter",
    swig_lowshelf_filter_Sf_SwigStatic_methods,
    swig_lowshelf_filter_Sf_SwigStatic_attributes,
    swig_lowshelf_filter_Sf_SwigStatic_constants,
    swig_lowshelf_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_lowshelf_filter_bases[] = {0};
static const char *swig_lowshelf_filter_base_names[] = {0};
static swig_lua_class _wrap_class_lowshelf_filter = { "lowshelf_filter", "lowshelf_filter", &SWIGTYPE_p_DSP__LowShelfFilterT_SampleType_t,_proxy__wrap_new_lowshelf_filter, swig_delete_lowshelf_filter, swig_lowshelf_filter_methods, swig_lowshelf_filter_attributes, &swig_lowshelf_filter_Sf_SwigStatic, swig_lowshelf_filter_meta, swig_lowshelf_filter_bases, swig_lowshelf_filter_base_names };

static int _wrap_highshelf_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< SampleType > *arg1 = (DSP::HighShelfFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *arg2 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::filter",1,"DSP::HighShelfFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::filter",2,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t,0))){
    SWIG_fail_ptr("highshelf_filter_filter_set",1,SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("highshelf_filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highshelf_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< SampleType > *arg1 = (DSP::HighShelfFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::filter",1,"DSP::HighShelfFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t,0))){
    SWIG_fail_ptr("highshelf_filter_filter_get",1,SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_highshelf_filter(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BiQuadParams< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::HighShelfFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< SampleType >::HighShelfFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::HighShelfFilter",1,"DSP::BiQuadParams< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::HighShelfFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::HighShelfFilter",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t,0))){
    SWIG_fail_ptr("new_highshelf_filter",1,SWIGTYPE_p_DSP__BiQuadParamsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_highshelf_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_highshelf_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (DSP::HighShelfFilter< SampleType > *)new DSP::HighShelfFilter< SampleType >((DSP::BiQuadParams< SampleType > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highshelf_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< SampleType > *arg1 = (DSP::HighShelfFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::apply",1,"DSP::HighShelfFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t,0))){
    SWIG_fail_ptr("highshelf_filter_apply",1,SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("highshelf_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highshelf_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< SampleType > *arg1 = (DSP::HighShelfFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::apply",1,"DSP::HighShelfFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t,0))){
    SWIG_fail_ptr("highshelf_filter_apply",1,SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("highshelf_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("highshelf_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highshelf_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_highshelf_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_highshelf_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'highshelf_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::HighShelfFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::HighShelfFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_highshelf_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::HighShelfFilter< SampleType > *arg1 = (DSP::HighShelfFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::HighShelfFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::HighShelfFilter< SampleType >::reset",1,"DSP::HighShelfFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t,0))){
    SWIG_fail_ptr("highshelf_filter_reset",1,SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_highshelf_filter(void *obj) {
DSP::HighShelfFilter< SampleType > *arg1 = (DSP::HighShelfFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_highshelf_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_highshelf_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_highshelf_filter_attributes[] = {
    { "filter", _wrap_highshelf_filter_filter_get, _wrap_highshelf_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_highshelf_filter_methods[]= {
    { "apply", _wrap_highshelf_filter_apply},
    { "reset", _wrap_highshelf_filter_reset},
    {0,0}
};
static swig_lua_method swig_highshelf_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_highshelf_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_highshelf_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_highshelf_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_highshelf_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_highshelf_filter_Sf_SwigStatic = {
    "highshelf_filter",
    swig_highshelf_filter_Sf_SwigStatic_methods,
    swig_highshelf_filter_Sf_SwigStatic_attributes,
    swig_highshelf_filter_Sf_SwigStatic_constants,
    swig_highshelf_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_highshelf_filter_bases[] = {0};
static const char *swig_highshelf_filter_base_names[] = {0};
static swig_lua_class _wrap_class_highshelf_filter = { "highshelf_filter", "highshelf_filter", &SWIGTYPE_p_DSP__HighShelfFilterT_SampleType_t,_proxy__wrap_new_highshelf_filter, swig_delete_highshelf_filter, swig_highshelf_filter_methods, swig_highshelf_filter_attributes, &swig_highshelf_filter_Sf_SwigStatic, swig_highshelf_filter_meta, swig_highshelf_filter_bases, swig_highshelf_filter_base_names };

static int _wrap_normalize_frequency(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  SampleType result;
  
  SWIG_check_num_args("DSP::normalize_frequency< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::normalize_frequency< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::normalize_frequency< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("normalize_frequency",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("normalize_frequency",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR normalize_frequency< SampleType >(arg1,arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowpassfilter(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::lowpassfilter< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lowpassfilter< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::lowpassfilter< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::lowpassfilter< SampleType >",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("lowpassfilter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("lowpassfilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("lowpassfilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lowpassfilter< SampleType >(*arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highpassfilter(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::highpassfilter< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::highpassfilter< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::highpassfilter< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::highpassfilter< SampleType >",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("highpassfilter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("highpassfilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("highpassfilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR highpassfilter< SampleType >(*arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bandpassfilter(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::bandpassfilter< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::bandpassfilter< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bandpassfilter< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::bandpassfilter< SampleType >",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bandpassfilter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bandpassfilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bandpassfilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bandpassfilter< SampleType >(*arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_peakfilter(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::peakfilter< SampleType >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::peakfilter< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::peakfilter< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::peakfilter< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::peakfilter< SampleType >",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("peakfilter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("peakfilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("peakfilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("peakfilter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR peakfilter< SampleType >(*arg1,arg2,arg3,arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_lowshelffilter(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::lowshelffilter< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::lowshelffilter< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::lowshelffilter< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::lowshelffilter< SampleType >",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("lowshelffilter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("lowshelffilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("lowshelffilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR lowshelffilter< SampleType >(*arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_highshelffilter(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::highshelffilter< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::highshelffilter< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::highshelffilter< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::highshelffilter< SampleType >",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("highshelffilter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("highshelffilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("highshelffilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR highshelffilter< SampleType >(*arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_notchfilter(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::notchfilter< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::notchfilter< SampleType >",1,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::notchfilter< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::notchfilter< SampleType >",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("notchfilter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("notchfilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("notchfilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR notchfilter< SampleType >(*arg1,arg2,arg3);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_filter_bqs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< SampleType > > *arg2 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::bqs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bqs",1,"DSP::BesselFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bqs",2,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_bqs_set",1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("bessel_filter_bqs_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  if (arg1) (arg1)->bqs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_filter_bqs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::bqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bqs",1,"DSP::BesselFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_bqs_get",1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  result = (std::vector< kfr::biquad_params< SampleType > > *)& ((arg1)->bqs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *arg2 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::filter",1,"DSP::BesselFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::filter",2,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_filter_set",1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::filter",1,"DSP::BesselFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_filter_get",1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_filter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::order",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_order_set",1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_filter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::order",1,"DSP::BesselFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_order_get",1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_bessel_filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::BesselFilter",0,0)
  result = (DSP::BesselFilter< SampleType > *)new DSP::BesselFilter< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_bessel_filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DSP::BesselFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::BesselFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::BesselFilter",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (DSP::BesselFilter< SampleType > *)new DSP::BesselFilter< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_bessel_filter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_bessel_filter__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_bessel_filter__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_bessel_filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselFilter< SampleType >::BesselFilter()\n"
    "    DSP::BesselFilter< SampleType >::BesselFilter(int)\n");
  lua_error(L);return 0;
}


static int _wrap_bessel_filter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::lowpass",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::lowpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::lowpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_lowpass",1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_filter_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_filter_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_filter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::highpass",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::highpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::highpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_highpass",1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_filter_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_filter_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_filter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandpass",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandpass",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandpass",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_bandpass",1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_filter_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_filter_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_filter_bandpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_filter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandstop",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandstop",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandstop",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::bandstop",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_bandstop",1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_filter_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_filter_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_filter_bandstop",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::apply",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_apply",1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::apply",1,"DSP::BesselFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_apply",1,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_bessel_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_bessel_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bessel_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::BesselFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_bessel_filter(void *obj) {
DSP::BesselFilter< SampleType > *arg1 = (DSP::BesselFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_bessel_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bessel_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bessel_filter_attributes[] = {
    { "bqs", _wrap_bessel_filter_bqs_get, _wrap_bessel_filter_bqs_set },
    { "filter", _wrap_bessel_filter_filter_get, _wrap_bessel_filter_filter_set },
    { "order", _wrap_bessel_filter_order_get, _wrap_bessel_filter_order_set },
    {0,0,0}
};
static swig_lua_method swig_bessel_filter_methods[]= {
    { "lowpass", _wrap_bessel_filter_lowpass},
    { "highpass", _wrap_bessel_filter_highpass},
    { "bandpass", _wrap_bessel_filter_bandpass},
    { "bandstop", _wrap_bessel_filter_bandstop},
    { "apply", _wrap_bessel_filter_apply},
    {0,0}
};
static swig_lua_method swig_bessel_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bessel_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bessel_filter_Sf_SwigStatic_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("maxorder",&DSP::BesselFilter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bessel_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bessel_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bessel_filter_Sf_SwigStatic = {
    "bessel_filter",
    swig_bessel_filter_Sf_SwigStatic_methods,
    swig_bessel_filter_Sf_SwigStatic_attributes,
    swig_bessel_filter_Sf_SwigStatic_constants,
    swig_bessel_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bessel_filter_bases[] = {0};
static const char *swig_bessel_filter_base_names[] = {0};
static swig_lua_class _wrap_class_bessel_filter = { "bessel_filter", "bessel_filter", &SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,_proxy__wrap_new_bessel_filter, swig_delete_bessel_filter, swig_bessel_filter_methods, swig_bessel_filter_attributes, &swig_bessel_filter_Sf_SwigStatic, swig_bessel_filter_meta, swig_bessel_filter_bases, swig_bessel_filter_base_names };

static int _wrap_bessel_lowpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselLowPassFilter< SampleType > *arg1 = (DSP::BesselLowPassFilter< SampleType > *) 0 ;
  DSP::BesselFilter< SampleType > *arg2 = (DSP::BesselFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::filter",1,"DSP::BesselLowPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::filter",2,"DSP::BesselFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_lowpass_filter_filter_set",1,SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_lowpass_filter_filter_set",2,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_lowpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselLowPassFilter< SampleType > *arg1 = (DSP::BesselLowPassFilter< SampleType > *) 0 ;
  DSP::BesselFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::filter",1,"DSP::BesselLowPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_lowpass_filter_filter_get",1,SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t);
  }
  
  result = (DSP::BesselFilter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_bessel_lowpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::BesselLowPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< SampleType >::BesselLowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::BesselLowPassFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::BesselLowPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::BesselLowPassFilter",3,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_bessel_lowpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_bessel_lowpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (DSP::BesselLowPassFilter< SampleType > *)new DSP::BesselLowPassFilter< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_lowpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselLowPassFilter< SampleType > *arg1 = (DSP::BesselLowPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::apply",1,"DSP::BesselLowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_lowpass_filter_apply",1,SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_lowpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_lowpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselLowPassFilter< SampleType > *arg1 = (DSP::BesselLowPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselLowPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::apply",1,"DSP::BesselLowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselLowPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_lowpass_filter_apply",1,SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_lowpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_lowpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_lowpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_bessel_lowpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_bessel_lowpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bessel_lowpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselLowPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::BesselLowPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_bessel_lowpass_filter(void *obj) {
DSP::BesselLowPassFilter< SampleType > *arg1 = (DSP::BesselLowPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_bessel_lowpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bessel_lowpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bessel_lowpass_filter_attributes[] = {
    { "filter", _wrap_bessel_lowpass_filter_filter_get, _wrap_bessel_lowpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_bessel_lowpass_filter_methods[]= {
    { "apply", _wrap_bessel_lowpass_filter_apply},
    {0,0}
};
static swig_lua_method swig_bessel_lowpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bessel_lowpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bessel_lowpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bessel_lowpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bessel_lowpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bessel_lowpass_filter_Sf_SwigStatic = {
    "bessel_lowpass_filter",
    swig_bessel_lowpass_filter_Sf_SwigStatic_methods,
    swig_bessel_lowpass_filter_Sf_SwigStatic_attributes,
    swig_bessel_lowpass_filter_Sf_SwigStatic_constants,
    swig_bessel_lowpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bessel_lowpass_filter_bases[] = {0};
static const char *swig_bessel_lowpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_bessel_lowpass_filter = { "bessel_lowpass_filter", "bessel_lowpass_filter", &SWIGTYPE_p_DSP__BesselLowPassFilterT_SampleType_t,_proxy__wrap_new_bessel_lowpass_filter, swig_delete_bessel_lowpass_filter, swig_bessel_lowpass_filter_methods, swig_bessel_lowpass_filter_attributes, &swig_bessel_lowpass_filter_Sf_SwigStatic, swig_bessel_lowpass_filter_meta, swig_bessel_lowpass_filter_bases, swig_bessel_lowpass_filter_base_names };

static int _wrap_bessel_highpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselHighPassFilter< SampleType > *arg1 = (DSP::BesselHighPassFilter< SampleType > *) 0 ;
  DSP::BesselFilter< SampleType > *arg2 = (DSP::BesselFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::filter",1,"DSP::BesselHighPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::filter",2,"DSP::BesselFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_highpass_filter_filter_set",1,SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_highpass_filter_filter_set",2,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_highpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselHighPassFilter< SampleType > *arg1 = (DSP::BesselHighPassFilter< SampleType > *) 0 ;
  DSP::BesselFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::filter",1,"DSP::BesselHighPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_highpass_filter_filter_get",1,SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t);
  }
  
  result = (DSP::BesselFilter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_bessel_highpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::BesselHighPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< SampleType >::BesselHighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::BesselHighPassFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::BesselHighPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::BesselHighPassFilter",3,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_bessel_highpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_bessel_highpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (DSP::BesselHighPassFilter< SampleType > *)new DSP::BesselHighPassFilter< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_highpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselHighPassFilter< SampleType > *arg1 = (DSP::BesselHighPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::apply",1,"DSP::BesselHighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_highpass_filter_apply",1,SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_highpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_highpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselHighPassFilter< SampleType > *arg1 = (DSP::BesselHighPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselHighPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::apply",1,"DSP::BesselHighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselHighPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_highpass_filter_apply",1,SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_highpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_highpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_highpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_bessel_highpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_bessel_highpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bessel_highpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselHighPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::BesselHighPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_bessel_highpass_filter(void *obj) {
DSP::BesselHighPassFilter< SampleType > *arg1 = (DSP::BesselHighPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_bessel_highpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bessel_highpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bessel_highpass_filter_attributes[] = {
    { "filter", _wrap_bessel_highpass_filter_filter_get, _wrap_bessel_highpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_bessel_highpass_filter_methods[]= {
    { "apply", _wrap_bessel_highpass_filter_apply},
    {0,0}
};
static swig_lua_method swig_bessel_highpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bessel_highpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bessel_highpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bessel_highpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bessel_highpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bessel_highpass_filter_Sf_SwigStatic = {
    "bessel_highpass_filter",
    swig_bessel_highpass_filter_Sf_SwigStatic_methods,
    swig_bessel_highpass_filter_Sf_SwigStatic_attributes,
    swig_bessel_highpass_filter_Sf_SwigStatic_constants,
    swig_bessel_highpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bessel_highpass_filter_bases[] = {0};
static const char *swig_bessel_highpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_bessel_highpass_filter = { "bessel_highpass_filter", "bessel_highpass_filter", &SWIGTYPE_p_DSP__BesselHighPassFilterT_SampleType_t,_proxy__wrap_new_bessel_highpass_filter, swig_delete_bessel_highpass_filter, swig_bessel_highpass_filter_methods, swig_bessel_highpass_filter_attributes, &swig_bessel_highpass_filter_Sf_SwigStatic, swig_bessel_highpass_filter_meta, swig_bessel_highpass_filter_bases, swig_bessel_highpass_filter_base_names };

static int _wrap_bessel_bandpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandPassFilter< SampleType > *arg1 = (DSP::BesselBandPassFilter< SampleType > *) 0 ;
  DSP::BesselFilter< SampleType > *arg2 = (DSP::BesselFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::filter",1,"DSP::BesselBandPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::filter",2,"DSP::BesselFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandpass_filter_filter_set",1,SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandpass_filter_filter_set",2,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandPassFilter< SampleType > *arg1 = (DSP::BesselBandPassFilter< SampleType > *) 0 ;
  DSP::BesselFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::filter",1,"DSP::BesselBandPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandpass_filter_filter_get",1,SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t);
  }
  
  result = (DSP::BesselFilter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_bessel_bandpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  DSP::BesselBandPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< SampleType >::BesselBandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::BesselBandPassFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::BesselBandPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::BesselBandPassFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::BesselBandPassFilter",4,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_bessel_bandpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_bessel_bandpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_bessel_bandpass_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (DSP::BesselBandPassFilter< SampleType > *)new DSP::BesselBandPassFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandPassFilter< SampleType > *arg1 = (DSP::BesselBandPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::apply",1,"DSP::BesselBandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandpass_filter_apply",1,SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandPassFilter< SampleType > *arg1 = (DSP::BesselBandPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::apply",1,"DSP::BesselBandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselBandPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandpass_filter_apply",1,SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_bessel_bandpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_bessel_bandpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bessel_bandpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselBandPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::BesselBandPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_bessel_bandpass_filter(void *obj) {
DSP::BesselBandPassFilter< SampleType > *arg1 = (DSP::BesselBandPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_bessel_bandpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bessel_bandpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bessel_bandpass_filter_attributes[] = {
    { "filter", _wrap_bessel_bandpass_filter_filter_get, _wrap_bessel_bandpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_bessel_bandpass_filter_methods[]= {
    { "apply", _wrap_bessel_bandpass_filter_apply},
    {0,0}
};
static swig_lua_method swig_bessel_bandpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bessel_bandpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bessel_bandpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bessel_bandpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bessel_bandpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bessel_bandpass_filter_Sf_SwigStatic = {
    "bessel_bandpass_filter",
    swig_bessel_bandpass_filter_Sf_SwigStatic_methods,
    swig_bessel_bandpass_filter_Sf_SwigStatic_attributes,
    swig_bessel_bandpass_filter_Sf_SwigStatic_constants,
    swig_bessel_bandpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bessel_bandpass_filter_bases[] = {0};
static const char *swig_bessel_bandpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_bessel_bandpass_filter = { "bessel_bandpass_filter", "bessel_bandpass_filter", &SWIGTYPE_p_DSP__BesselBandPassFilterT_SampleType_t,_proxy__wrap_new_bessel_bandpass_filter, swig_delete_bessel_bandpass_filter, swig_bessel_bandpass_filter_methods, swig_bessel_bandpass_filter_attributes, &swig_bessel_bandpass_filter_Sf_SwigStatic, swig_bessel_bandpass_filter_meta, swig_bessel_bandpass_filter_bases, swig_bessel_bandpass_filter_base_names };

static int _wrap_bessel_bandstop_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandStopFilter< SampleType > *arg1 = (DSP::BesselBandStopFilter< SampleType > *) 0 ;
  DSP::BesselFilter< SampleType > *arg2 = (DSP::BesselFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::filter",1,"DSP::BesselBandStopFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::filter",2,"DSP::BesselFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandstop_filter_filter_set",1,SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandstop_filter_filter_set",2,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandstop_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandStopFilter< SampleType > *arg1 = (DSP::BesselBandStopFilter< SampleType > *) 0 ;
  DSP::BesselFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::filter",1,"DSP::BesselBandStopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandstop_filter_filter_get",1,SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t);
  }
  
  result = (DSP::BesselFilter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_bessel_bandstop_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  DSP::BesselBandStopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< SampleType >::BesselBandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::BesselBandStopFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::BesselBandStopFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::BesselBandStopFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::BesselBandStopFilter",4,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_bessel_bandstop_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_bessel_bandstop_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_bessel_bandstop_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (DSP::BesselBandStopFilter< SampleType > *)new DSP::BesselBandStopFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandstop_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandStopFilter< SampleType > *arg1 = (DSP::BesselBandStopFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::apply",1,"DSP::BesselBandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandstop_filter_apply",1,SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandstop_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandstop_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::BesselBandStopFilter< SampleType > *arg1 = (DSP::BesselBandStopFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::BesselBandStopFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::apply",1,"DSP::BesselBandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::BesselBandStopFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandstop_filter_apply",1,SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandstop_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandstop_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandstop_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_bessel_bandstop_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_bessel_bandstop_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'bessel_bandstop_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::BesselBandStopFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::BesselBandStopFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_bessel_bandstop_filter(void *obj) {
DSP::BesselBandStopFilter< SampleType > *arg1 = (DSP::BesselBandStopFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_bessel_bandstop_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_bessel_bandstop_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_bessel_bandstop_filter_attributes[] = {
    { "filter", _wrap_bessel_bandstop_filter_filter_get, _wrap_bessel_bandstop_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_bessel_bandstop_filter_methods[]= {
    { "apply", _wrap_bessel_bandstop_filter_apply},
    {0,0}
};
static swig_lua_method swig_bessel_bandstop_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_bessel_bandstop_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_bessel_bandstop_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_bessel_bandstop_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_bessel_bandstop_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_bessel_bandstop_filter_Sf_SwigStatic = {
    "bessel_bandstop_filter",
    swig_bessel_bandstop_filter_Sf_SwigStatic_methods,
    swig_bessel_bandstop_filter_Sf_SwigStatic_attributes,
    swig_bessel_bandstop_filter_Sf_SwigStatic_constants,
    swig_bessel_bandstop_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_bessel_bandstop_filter_bases[] = {0};
static const char *swig_bessel_bandstop_filter_base_names[] = {0};
static swig_lua_class _wrap_class_bessel_bandstop_filter = { "bessel_bandstop_filter", "bessel_bandstop_filter", &SWIGTYPE_p_DSP__BesselBandStopFilterT_SampleType_t,_proxy__wrap_new_bessel_bandstop_filter, swig_delete_bessel_bandstop_filter, swig_bessel_bandstop_filter_methods, swig_bessel_bandstop_filter_attributes, &swig_bessel_bandstop_filter_Sf_SwigStatic, swig_bessel_bandstop_filter_meta, swig_bessel_bandstop_filter_bases, swig_bessel_bandstop_filter_base_names };

static int _wrap_butterworth_filter_bqs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< SampleType > > *arg2 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::bqs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bqs",1,"DSP::ButterworthFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bqs",2,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_bqs_set",1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("butterworth_filter_bqs_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  if (arg1) (arg1)->bqs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_filter_bqs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::bqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bqs",1,"DSP::ButterworthFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_bqs_get",1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  result = (std::vector< kfr::biquad_params< SampleType > > *)& ((arg1)->bqs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *arg2 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::filter",1,"DSP::ButterworthFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::filter",2,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_filter_set",1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::filter",1,"DSP::ButterworthFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_filter_get",1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_filter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::order",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_order_set",1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_filter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::order",1,"DSP::ButterworthFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_order_get",1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_butterworth_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  DSP::ButterworthFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::ButterworthFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::ButterworthFilter",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (DSP::ButterworthFilter< SampleType > *)new DSP::ButterworthFilter< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_filter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::lowpass",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::lowpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::lowpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_lowpass",1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_filter_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_filter_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_filter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::highpass",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::highpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::highpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_highpass",1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_filter_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_filter_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_filter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandpass",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandpass",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandpass",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_bandpass",1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_filter_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_filter_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_filter_bandpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_filter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandstop",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandstop",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandstop",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::bandstop",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_bandstop",1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_filter_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_filter_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_filter_bandstop",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::apply",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_apply",1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::apply",1,"DSP::ButterworthFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_apply",1,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_butterworth_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_butterworth_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'butterworth_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::ButterworthFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_butterworth_filter(void *obj) {
DSP::ButterworthFilter< SampleType > *arg1 = (DSP::ButterworthFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_butterworth_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_butterworth_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_butterworth_filter_attributes[] = {
    { "bqs", _wrap_butterworth_filter_bqs_get, _wrap_butterworth_filter_bqs_set },
    { "filter", _wrap_butterworth_filter_filter_get, _wrap_butterworth_filter_filter_set },
    { "order", _wrap_butterworth_filter_order_get, _wrap_butterworth_filter_order_set },
    {0,0,0}
};
static swig_lua_method swig_butterworth_filter_methods[]= {
    { "lowpass", _wrap_butterworth_filter_lowpass},
    { "highpass", _wrap_butterworth_filter_highpass},
    { "bandpass", _wrap_butterworth_filter_bandpass},
    { "bandstop", _wrap_butterworth_filter_bandstop},
    { "apply", _wrap_butterworth_filter_apply},
    {0,0}
};
static swig_lua_method swig_butterworth_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_butterworth_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_butterworth_filter_Sf_SwigStatic_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("maxorder",&DSP::ButterworthFilter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    {0,0,0,0,0,0}
};
static swig_lua_method swig_butterworth_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_butterworth_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_butterworth_filter_Sf_SwigStatic = {
    "butterworth_filter",
    swig_butterworth_filter_Sf_SwigStatic_methods,
    swig_butterworth_filter_Sf_SwigStatic_attributes,
    swig_butterworth_filter_Sf_SwigStatic_constants,
    swig_butterworth_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_butterworth_filter_bases[] = {0};
static const char *swig_butterworth_filter_base_names[] = {0};
static swig_lua_class _wrap_class_butterworth_filter = { "butterworth_filter", "butterworth_filter", &SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,_proxy__wrap_new_butterworth_filter, swig_delete_butterworth_filter, swig_butterworth_filter_methods, swig_butterworth_filter_attributes, &swig_butterworth_filter_Sf_SwigStatic, swig_butterworth_filter_meta, swig_butterworth_filter_bases, swig_butterworth_filter_base_names };

static int _wrap_butterworth_lowpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthLowPassFilter< SampleType > *arg1 = (DSP::ButterworthLowPassFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< SampleType > *arg2 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::filter",1,"DSP::ButterworthLowPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::filter",2,"DSP::ButterworthFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_lowpass_filter_filter_set",1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_lowpass_filter_filter_set",2,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_lowpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthLowPassFilter< SampleType > *arg1 = (DSP::ButterworthLowPassFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::filter",1,"DSP::ButterworthLowPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_lowpass_filter_filter_get",1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t);
  }
  
  result = (DSP::ButterworthFilter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_butterworth_lowpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::ButterworthLowPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< SampleType >::ButterworthLowPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::ButterworthLowPassFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::ButterworthLowPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::ButterworthLowPassFilter",3,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_butterworth_lowpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_butterworth_lowpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (DSP::ButterworthLowPassFilter< SampleType > *)new DSP::ButterworthLowPassFilter< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_lowpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthLowPassFilter< SampleType > *arg1 = (DSP::ButterworthLowPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::apply",1,"DSP::ButterworthLowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_lowpass_filter_apply",1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_lowpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_lowpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthLowPassFilter< SampleType > *arg1 = (DSP::ButterworthLowPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthLowPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::apply",1,"DSP::ButterworthLowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthLowPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_lowpass_filter_apply",1,SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_lowpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_lowpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_lowpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_butterworth_lowpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_butterworth_lowpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'butterworth_lowpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthLowPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::ButterworthLowPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_butterworth_lowpass_filter(void *obj) {
DSP::ButterworthLowPassFilter< SampleType > *arg1 = (DSP::ButterworthLowPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_butterworth_lowpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_butterworth_lowpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_butterworth_lowpass_filter_attributes[] = {
    { "filter", _wrap_butterworth_lowpass_filter_filter_get, _wrap_butterworth_lowpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_butterworth_lowpass_filter_methods[]= {
    { "apply", _wrap_butterworth_lowpass_filter_apply},
    {0,0}
};
static swig_lua_method swig_butterworth_lowpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_butterworth_lowpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_butterworth_lowpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_butterworth_lowpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_butterworth_lowpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_butterworth_lowpass_filter_Sf_SwigStatic = {
    "butterworth_lowpass_filter",
    swig_butterworth_lowpass_filter_Sf_SwigStatic_methods,
    swig_butterworth_lowpass_filter_Sf_SwigStatic_attributes,
    swig_butterworth_lowpass_filter_Sf_SwigStatic_constants,
    swig_butterworth_lowpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_butterworth_lowpass_filter_bases[] = {0};
static const char *swig_butterworth_lowpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_butterworth_lowpass_filter = { "butterworth_lowpass_filter", "butterworth_lowpass_filter", &SWIGTYPE_p_DSP__ButterworthLowPassFilterT_SampleType_t,_proxy__wrap_new_butterworth_lowpass_filter, swig_delete_butterworth_lowpass_filter, swig_butterworth_lowpass_filter_methods, swig_butterworth_lowpass_filter_attributes, &swig_butterworth_lowpass_filter_Sf_SwigStatic, swig_butterworth_lowpass_filter_meta, swig_butterworth_lowpass_filter_bases, swig_butterworth_lowpass_filter_base_names };

static int _wrap_butterworth_highpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthHighPassFilter< SampleType > *arg1 = (DSP::ButterworthHighPassFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< SampleType > *arg2 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::filter",1,"DSP::ButterworthHighPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::filter",2,"DSP::ButterworthFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_highpass_filter_filter_set",1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_highpass_filter_filter_set",2,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_highpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthHighPassFilter< SampleType > *arg1 = (DSP::ButterworthHighPassFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::filter",1,"DSP::ButterworthHighPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_highpass_filter_filter_get",1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t);
  }
  
  result = (DSP::ButterworthFilter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_butterworth_highpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::ButterworthHighPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< SampleType >::ButterworthHighPassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::ButterworthHighPassFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::ButterworthHighPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::ButterworthHighPassFilter",3,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_butterworth_highpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_butterworth_highpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (DSP::ButterworthHighPassFilter< SampleType > *)new DSP::ButterworthHighPassFilter< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_highpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthHighPassFilter< SampleType > *arg1 = (DSP::ButterworthHighPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::apply",1,"DSP::ButterworthHighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_highpass_filter_apply",1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_highpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_highpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthHighPassFilter< SampleType > *arg1 = (DSP::ButterworthHighPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthHighPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::apply",1,"DSP::ButterworthHighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthHighPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_highpass_filter_apply",1,SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_highpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_highpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_highpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_butterworth_highpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_butterworth_highpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'butterworth_highpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthHighPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::ButterworthHighPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_butterworth_highpass_filter(void *obj) {
DSP::ButterworthHighPassFilter< SampleType > *arg1 = (DSP::ButterworthHighPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_butterworth_highpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_butterworth_highpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_butterworth_highpass_filter_attributes[] = {
    { "filter", _wrap_butterworth_highpass_filter_filter_get, _wrap_butterworth_highpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_butterworth_highpass_filter_methods[]= {
    { "apply", _wrap_butterworth_highpass_filter_apply},
    {0,0}
};
static swig_lua_method swig_butterworth_highpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_butterworth_highpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_butterworth_highpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_butterworth_highpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_butterworth_highpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_butterworth_highpass_filter_Sf_SwigStatic = {
    "butterworth_highpass_filter",
    swig_butterworth_highpass_filter_Sf_SwigStatic_methods,
    swig_butterworth_highpass_filter_Sf_SwigStatic_attributes,
    swig_butterworth_highpass_filter_Sf_SwigStatic_constants,
    swig_butterworth_highpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_butterworth_highpass_filter_bases[] = {0};
static const char *swig_butterworth_highpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_butterworth_highpass_filter = { "butterworth_highpass_filter", "butterworth_highpass_filter", &SWIGTYPE_p_DSP__ButterworthHighPassFilterT_SampleType_t,_proxy__wrap_new_butterworth_highpass_filter, swig_delete_butterworth_highpass_filter, swig_butterworth_highpass_filter_methods, swig_butterworth_highpass_filter_attributes, &swig_butterworth_highpass_filter_Sf_SwigStatic, swig_butterworth_highpass_filter_meta, swig_butterworth_highpass_filter_bases, swig_butterworth_highpass_filter_base_names };

static int _wrap_butterworth_bandpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandPassFilter< SampleType > *arg1 = (DSP::ButterworthBandPassFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< SampleType > *arg2 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::filter",1,"DSP::ButterworthBandPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::filter",2,"DSP::ButterworthFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandpass_filter_filter_set",1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandpass_filter_filter_set",2,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandPassFilter< SampleType > *arg1 = (DSP::ButterworthBandPassFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::filter",1,"DSP::ButterworthBandPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandpass_filter_filter_get",1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t);
  }
  
  result = (DSP::ButterworthFilter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_butterworth_bandpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  DSP::ButterworthBandPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< SampleType >::ButterworthBandPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::ButterworthBandPassFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::ButterworthBandPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::ButterworthBandPassFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::ButterworthBandPassFilter",4,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_butterworth_bandpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_butterworth_bandpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_butterworth_bandpass_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (DSP::ButterworthBandPassFilter< SampleType > *)new DSP::ButterworthBandPassFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandPassFilter< SampleType > *arg1 = (DSP::ButterworthBandPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::apply",1,"DSP::ButterworthBandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandpass_filter_apply",1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandPassFilter< SampleType > *arg1 = (DSP::ButterworthBandPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::apply",1,"DSP::ButterworthBandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthBandPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandpass_filter_apply",1,SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_butterworth_bandpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_butterworth_bandpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'butterworth_bandpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthBandPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::ButterworthBandPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_butterworth_bandpass_filter(void *obj) {
DSP::ButterworthBandPassFilter< SampleType > *arg1 = (DSP::ButterworthBandPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_butterworth_bandpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_butterworth_bandpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_butterworth_bandpass_filter_attributes[] = {
    { "filter", _wrap_butterworth_bandpass_filter_filter_get, _wrap_butterworth_bandpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_butterworth_bandpass_filter_methods[]= {
    { "apply", _wrap_butterworth_bandpass_filter_apply},
    {0,0}
};
static swig_lua_method swig_butterworth_bandpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_butterworth_bandpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_butterworth_bandpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_butterworth_bandpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_butterworth_bandpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_butterworth_bandpass_filter_Sf_SwigStatic = {
    "butterworth_bandpass_filter",
    swig_butterworth_bandpass_filter_Sf_SwigStatic_methods,
    swig_butterworth_bandpass_filter_Sf_SwigStatic_attributes,
    swig_butterworth_bandpass_filter_Sf_SwigStatic_constants,
    swig_butterworth_bandpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_butterworth_bandpass_filter_bases[] = {0};
static const char *swig_butterworth_bandpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_butterworth_bandpass_filter = { "butterworth_bandpass_filter", "butterworth_bandpass_filter", &SWIGTYPE_p_DSP__ButterworthBandPassFilterT_SampleType_t,_proxy__wrap_new_butterworth_bandpass_filter, swig_delete_butterworth_bandpass_filter, swig_butterworth_bandpass_filter_methods, swig_butterworth_bandpass_filter_attributes, &swig_butterworth_bandpass_filter_Sf_SwigStatic, swig_butterworth_bandpass_filter_meta, swig_butterworth_bandpass_filter_bases, swig_butterworth_bandpass_filter_base_names };

static int _wrap_butterworth_bandstop_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandStopFilter< SampleType > *arg1 = (DSP::ButterworthBandStopFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< SampleType > *arg2 = (DSP::ButterworthFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::filter",1,"DSP::ButterworthBandStopFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::filter",2,"DSP::ButterworthFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandstop_filter_filter_set",1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandstop_filter_filter_set",2,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandstop_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandStopFilter< SampleType > *arg1 = (DSP::ButterworthBandStopFilter< SampleType > *) 0 ;
  DSP::ButterworthFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::filter",1,"DSP::ButterworthBandStopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandstop_filter_filter_get",1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t);
  }
  
  result = (DSP::ButterworthFilter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_butterworth_bandstop_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  DSP::ButterworthBandStopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< SampleType >::ButterworthBandStopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::ButterworthBandStopFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::ButterworthBandStopFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::ButterworthBandStopFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::ButterworthBandStopFilter",4,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_butterworth_bandstop_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_butterworth_bandstop_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_butterworth_bandstop_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (DSP::ButterworthBandStopFilter< SampleType > *)new DSP::ButterworthBandStopFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandstop_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandStopFilter< SampleType > *arg1 = (DSP::ButterworthBandStopFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::apply",1,"DSP::ButterworthBandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandstop_filter_apply",1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandstop_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandstop_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::ButterworthBandStopFilter< SampleType > *arg1 = (DSP::ButterworthBandStopFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::ButterworthBandStopFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::apply",1,"DSP::ButterworthBandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::ButterworthBandStopFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandstop_filter_apply",1,SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandstop_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandstop_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandstop_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_butterworth_bandstop_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_butterworth_bandstop_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'butterworth_bandstop_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::ButterworthBandStopFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::ButterworthBandStopFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_butterworth_bandstop_filter(void *obj) {
DSP::ButterworthBandStopFilter< SampleType > *arg1 = (DSP::ButterworthBandStopFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_butterworth_bandstop_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_butterworth_bandstop_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_butterworth_bandstop_filter_attributes[] = {
    { "filter", _wrap_butterworth_bandstop_filter_filter_get, _wrap_butterworth_bandstop_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_butterworth_bandstop_filter_methods[]= {
    { "apply", _wrap_butterworth_bandstop_filter_apply},
    {0,0}
};
static swig_lua_method swig_butterworth_bandstop_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_butterworth_bandstop_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_butterworth_bandstop_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_butterworth_bandstop_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_butterworth_bandstop_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_butterworth_bandstop_filter_Sf_SwigStatic = {
    "butterworth_bandstop_filter",
    swig_butterworth_bandstop_filter_Sf_SwigStatic_methods,
    swig_butterworth_bandstop_filter_Sf_SwigStatic_attributes,
    swig_butterworth_bandstop_filter_Sf_SwigStatic_constants,
    swig_butterworth_bandstop_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_butterworth_bandstop_filter_bases[] = {0};
static const char *swig_butterworth_bandstop_filter_base_names[] = {0};
static swig_lua_class _wrap_class_butterworth_bandstop_filter = { "butterworth_bandstop_filter", "butterworth_bandstop_filter", &SWIGTYPE_p_DSP__ButterworthBandStopFilterT_SampleType_t,_proxy__wrap_new_butterworth_bandstop_filter, swig_delete_butterworth_bandstop_filter, swig_butterworth_bandstop_filter_methods, swig_butterworth_bandstop_filter_attributes, &swig_butterworth_bandstop_filter_Sf_SwigStatic, swig_butterworth_bandstop_filter_meta, swig_butterworth_bandstop_filter_bases, swig_butterworth_bandstop_filter_base_names };

static int _wrap_chevyshev1_filter_bqs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< SampleType > > *arg2 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::bqs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bqs",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bqs",2,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_bqs_set",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_bqs_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  if (arg1) (arg1)->bqs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_bqs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::bqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bqs",1,"DSP::Chebyshev1Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_bqs_get",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  result = (std::vector< kfr::biquad_params< SampleType > > *)& ((arg1)->bqs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *arg2 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::filter",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::filter",2,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::filter",1,"DSP::Chebyshev1Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::order",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_order_set",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::order",1,"DSP::Chebyshev1Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_order_get",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_rp_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::rp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::rp",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::rp",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_rp_set",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev1_filter_rp_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->rp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_rp_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::rp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::rp",1,"DSP::Chebyshev1Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_rp_get",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  result =  ((arg1)->rp);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev1_filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::Chebyshev1Filter",0,0)
  result = (DSP::Chebyshev1Filter< SampleType > *)new DSP::Chebyshev1Filter< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev1_filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  DSP::Chebyshev1Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::Chebyshev1Filter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::Chebyshev1Filter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::Chebyshev1Filter",2,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = (DSP::Chebyshev1Filter< SampleType > *)new DSP::Chebyshev1Filter< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev1_filter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_chevyshev1_filter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_chevyshev1_filter__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_chevyshev1_filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1Filter< SampleType >::Chebyshev1Filter()\n"
    "    DSP::Chebyshev1Filter< SampleType >::Chebyshev1Filter(int,SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_chevyshev1_filter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::lowpass",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::lowpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::lowpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_lowpass",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev1_filter_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev1_filter_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::highpass",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::highpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::highpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_highpass",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev1_filter_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev1_filter_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandpass",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandpass",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandpass",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_bandpass",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev1_filter_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev1_filter_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev1_filter_bandpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandstop",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandstop",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandstop",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::bandstop",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_bandstop",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev1_filter_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev1_filter_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev1_filter_bandstop",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::apply",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1Filter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::apply",1,"DSP::Chebyshev1Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1Filter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_chevyshev1_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_chevyshev1_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chevyshev1_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1Filter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::Chebyshev1Filter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_chevyshev1_filter(void *obj) {
DSP::Chebyshev1Filter< SampleType > *arg1 = (DSP::Chebyshev1Filter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_chevyshev1_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_chevyshev1_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_chevyshev1_filter_attributes[] = {
    { "bqs", _wrap_chevyshev1_filter_bqs_get, _wrap_chevyshev1_filter_bqs_set },
    { "filter", _wrap_chevyshev1_filter_filter_get, _wrap_chevyshev1_filter_filter_set },
    { "order", _wrap_chevyshev1_filter_order_get, _wrap_chevyshev1_filter_order_set },
    { "rp", _wrap_chevyshev1_filter_rp_get, _wrap_chevyshev1_filter_rp_set },
    {0,0,0}
};
static swig_lua_method swig_chevyshev1_filter_methods[]= {
    { "lowpass", _wrap_chevyshev1_filter_lowpass},
    { "highpass", _wrap_chevyshev1_filter_highpass},
    { "bandpass", _wrap_chevyshev1_filter_bandpass},
    { "bandstop", _wrap_chevyshev1_filter_bandstop},
    { "apply", _wrap_chevyshev1_filter_apply},
    {0,0}
};
static swig_lua_method swig_chevyshev1_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_chevyshev1_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_chevyshev1_filter_Sf_SwigStatic_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("maxorder",&DSP::Chebyshev1Filter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    {0,0,0,0,0,0}
};
static swig_lua_method swig_chevyshev1_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_chevyshev1_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_chevyshev1_filter_Sf_SwigStatic = {
    "chevyshev1_filter",
    swig_chevyshev1_filter_Sf_SwigStatic_methods,
    swig_chevyshev1_filter_Sf_SwigStatic_attributes,
    swig_chevyshev1_filter_Sf_SwigStatic_constants,
    swig_chevyshev1_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_chevyshev1_filter_bases[] = {0};
static const char *swig_chevyshev1_filter_base_names[] = {0};
static swig_lua_class _wrap_class_chevyshev1_filter = { "chevyshev1_filter", "chevyshev1_filter", &SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,_proxy__wrap_new_chevyshev1_filter, swig_delete_chevyshev1_filter, swig_chevyshev1_filter_methods, swig_chevyshev1_filter_attributes, &swig_chevyshev1_filter_Sf_SwigStatic, swig_chevyshev1_filter_meta, swig_chevyshev1_filter_bases, swig_chevyshev1_filter_base_names };

static int _wrap_chevyshev1_lowpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev1LowPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< SampleType > *arg2 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::filter",1,"DSP::Chebyshev1LowPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::filter",2,"DSP::Chebyshev1Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_lowpass_filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_lowpass_filter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_lowpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev1LowPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::filter",1,"DSP::Chebyshev1LowPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_lowpass_filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t);
  }
  
  result = (DSP::Chebyshev1Filter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev1_lowpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  DSP::Chebyshev1LowPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< SampleType >::Chebyshev1LowPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::Chebyshev1LowPassFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::Chebyshev1LowPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::Chebyshev1LowPassFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::Chebyshev1LowPassFilter",4,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_lowpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_lowpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_lowpass_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (DSP::Chebyshev1LowPassFilter< SampleType > *)new DSP::Chebyshev1LowPassFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_lowpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev1LowPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::apply",1,"DSP::Chebyshev1LowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_lowpass_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_lowpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_lowpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev1LowPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1LowPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::apply",1,"DSP::Chebyshev1LowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1LowPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_lowpass_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_lowpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_lowpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_lowpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_chevyshev1_lowpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_chevyshev1_lowpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chevyshev1_lowpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1LowPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::Chebyshev1LowPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_chevyshev1_lowpass_filter(void *obj) {
DSP::Chebyshev1LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev1LowPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_chevyshev1_lowpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_chevyshev1_lowpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_chevyshev1_lowpass_filter_attributes[] = {
    { "filter", _wrap_chevyshev1_lowpass_filter_filter_get, _wrap_chevyshev1_lowpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_chevyshev1_lowpass_filter_methods[]= {
    { "apply", _wrap_chevyshev1_lowpass_filter_apply},
    {0,0}
};
static swig_lua_method swig_chevyshev1_lowpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_chevyshev1_lowpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_chevyshev1_lowpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_chevyshev1_lowpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_chevyshev1_lowpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_chevyshev1_lowpass_filter_Sf_SwigStatic = {
    "chevyshev1_lowpass_filter",
    swig_chevyshev1_lowpass_filter_Sf_SwigStatic_methods,
    swig_chevyshev1_lowpass_filter_Sf_SwigStatic_attributes,
    swig_chevyshev1_lowpass_filter_Sf_SwigStatic_constants,
    swig_chevyshev1_lowpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_chevyshev1_lowpass_filter_bases[] = {0};
static const char *swig_chevyshev1_lowpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_chevyshev1_lowpass_filter = { "chevyshev1_lowpass_filter", "chevyshev1_lowpass_filter", &SWIGTYPE_p_DSP__Chebyshev1LowPassFilterT_SampleType_t,_proxy__wrap_new_chevyshev1_lowpass_filter, swig_delete_chevyshev1_lowpass_filter, swig_chevyshev1_lowpass_filter_methods, swig_chevyshev1_lowpass_filter_attributes, &swig_chevyshev1_lowpass_filter_Sf_SwigStatic, swig_chevyshev1_lowpass_filter_meta, swig_chevyshev1_lowpass_filter_bases, swig_chevyshev1_lowpass_filter_base_names };

static int _wrap_chevyshev1_highpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev1HighPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< SampleType > *arg2 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::filter",1,"DSP::Chebyshev1HighPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::filter",2,"DSP::Chebyshev1Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_highpass_filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_highpass_filter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_highpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev1HighPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::filter",1,"DSP::Chebyshev1HighPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_highpass_filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t);
  }
  
  result = (DSP::Chebyshev1Filter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev1_highpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  DSP::Chebyshev1HighPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< SampleType >::Chebyshev1HighPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::Chebyshev1HighPassFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::Chebyshev1HighPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::Chebyshev1HighPassFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::Chebyshev1HighPassFilter",4,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_highpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_highpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_highpass_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (DSP::Chebyshev1HighPassFilter< SampleType > *)new DSP::Chebyshev1HighPassFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_highpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev1HighPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::apply",1,"DSP::Chebyshev1HighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_highpass_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_highpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_highpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev1HighPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1HighPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::apply",1,"DSP::Chebyshev1HighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1HighPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_highpass_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_highpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_highpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_highpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_chevyshev1_highpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_chevyshev1_highpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chevyshev1_highpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1HighPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::Chebyshev1HighPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_chevyshev1_highpass_filter(void *obj) {
DSP::Chebyshev1HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev1HighPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_chevyshev1_highpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_chevyshev1_highpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_chevyshev1_highpass_filter_attributes[] = {
    { "filter", _wrap_chevyshev1_highpass_filter_filter_get, _wrap_chevyshev1_highpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_chevyshev1_highpass_filter_methods[]= {
    { "apply", _wrap_chevyshev1_highpass_filter_apply},
    {0,0}
};
static swig_lua_method swig_chevyshev1_highpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_chevyshev1_highpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_chevyshev1_highpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_chevyshev1_highpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_chevyshev1_highpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_chevyshev1_highpass_filter_Sf_SwigStatic = {
    "chevyshev1_highpass_filter",
    swig_chevyshev1_highpass_filter_Sf_SwigStatic_methods,
    swig_chevyshev1_highpass_filter_Sf_SwigStatic_attributes,
    swig_chevyshev1_highpass_filter_Sf_SwigStatic_constants,
    swig_chevyshev1_highpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_chevyshev1_highpass_filter_bases[] = {0};
static const char *swig_chevyshev1_highpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_chevyshev1_highpass_filter = { "chevyshev1_highpass_filter", "chevyshev1_highpass_filter", &SWIGTYPE_p_DSP__Chebyshev1HighPassFilterT_SampleType_t,_proxy__wrap_new_chevyshev1_highpass_filter, swig_delete_chevyshev1_highpass_filter, swig_chevyshev1_highpass_filter_methods, swig_chevyshev1_highpass_filter_attributes, &swig_chevyshev1_highpass_filter_Sf_SwigStatic, swig_chevyshev1_highpass_filter_meta, swig_chevyshev1_highpass_filter_bases, swig_chevyshev1_highpass_filter_base_names };

static int _wrap_chevyshev1_bandpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev1BandPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< SampleType > *arg2 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::filter",1,"DSP::Chebyshev1BandPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::filter",2,"DSP::Chebyshev1Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandpass_filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandpass_filter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_bandpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev1BandPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::filter",1,"DSP::Chebyshev1BandPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandpass_filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t);
  }
  
  result = (DSP::Chebyshev1Filter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev1_bandpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  DSP::Chebyshev1BandPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< SampleType >::Chebyshev1BandPassFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::Chebyshev1BandPassFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::Chebyshev1BandPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::Chebyshev1BandPassFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::Chebyshev1BandPassFilter",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::Chebyshev1BandPassFilter",5,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_bandpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_bandpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_bandpass_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_bandpass_filter",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  result = (DSP::Chebyshev1BandPassFilter< SampleType > *)new DSP::Chebyshev1BandPassFilter< SampleType >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_bandpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev1BandPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::apply",1,"DSP::Chebyshev1BandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandpass_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_bandpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev1BandPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::apply",1,"DSP::Chebyshev1BandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1BandPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandpass_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_bandpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_chevyshev1_bandpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_chevyshev1_bandpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chevyshev1_bandpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1BandPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::Chebyshev1BandPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_chevyshev1_bandpass_filter(void *obj) {
DSP::Chebyshev1BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev1BandPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_chevyshev1_bandpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_chevyshev1_bandpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_chevyshev1_bandpass_filter_attributes[] = {
    { "filter", _wrap_chevyshev1_bandpass_filter_filter_get, _wrap_chevyshev1_bandpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_chevyshev1_bandpass_filter_methods[]= {
    { "apply", _wrap_chevyshev1_bandpass_filter_apply},
    {0,0}
};
static swig_lua_method swig_chevyshev1_bandpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_chevyshev1_bandpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_chevyshev1_bandpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_chevyshev1_bandpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_chevyshev1_bandpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_chevyshev1_bandpass_filter_Sf_SwigStatic = {
    "chevyshev1_bandpass_filter",
    swig_chevyshev1_bandpass_filter_Sf_SwigStatic_methods,
    swig_chevyshev1_bandpass_filter_Sf_SwigStatic_attributes,
    swig_chevyshev1_bandpass_filter_Sf_SwigStatic_constants,
    swig_chevyshev1_bandpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_chevyshev1_bandpass_filter_bases[] = {0};
static const char *swig_chevyshev1_bandpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_chevyshev1_bandpass_filter = { "chevyshev1_bandpass_filter", "chevyshev1_bandpass_filter", &SWIGTYPE_p_DSP__Chebyshev1BandPassFilterT_SampleType_t,_proxy__wrap_new_chevyshev1_bandpass_filter, swig_delete_chevyshev1_bandpass_filter, swig_chevyshev1_bandpass_filter_methods, swig_chevyshev1_bandpass_filter_attributes, &swig_chevyshev1_bandpass_filter_Sf_SwigStatic, swig_chevyshev1_bandpass_filter_meta, swig_chevyshev1_bandpass_filter_bases, swig_chevyshev1_bandpass_filter_base_names };

static int _wrap_chevyshev1_bandptop_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev1BandStopFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< SampleType > *arg2 = (DSP::Chebyshev1Filter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::filter",1,"DSP::Chebyshev1BandStopFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::filter",2,"DSP::Chebyshev1Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandptop_filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandptop_filter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_bandptop_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev1BandStopFilter< SampleType > *) 0 ;
  DSP::Chebyshev1Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::filter",1,"DSP::Chebyshev1BandStopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandptop_filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t);
  }
  
  result = (DSP::Chebyshev1Filter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1FilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev1_bandptop_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  DSP::Chebyshev1BandStopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< SampleType >::Chebyshev1BandStopFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::Chebyshev1BandStopFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::Chebyshev1BandStopFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::Chebyshev1BandStopFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::Chebyshev1BandStopFilter",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::Chebyshev1BandStopFilter",5,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_bandptop_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_bandptop_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_bandptop_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev1_bandptop_filter",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  result = (DSP::Chebyshev1BandStopFilter< SampleType > *)new DSP::Chebyshev1BandStopFilter< SampleType >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_bandptop_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev1BandStopFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::apply",1,"DSP::Chebyshev1BandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandptop_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandptop_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_bandptop_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev1BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev1BandStopFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev1BandStopFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::apply",1,"DSP::Chebyshev1BandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev1BandStopFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandptop_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandptop_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev1_bandptop_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev1_bandptop_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_chevyshev1_bandptop_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_chevyshev1_bandptop_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chevyshev1_bandptop_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev1BandStopFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::Chebyshev1BandStopFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_chevyshev1_bandptop_filter(void *obj) {
DSP::Chebyshev1BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev1BandStopFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_chevyshev1_bandptop_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_chevyshev1_bandptop_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_chevyshev1_bandptop_filter_attributes[] = {
    { "filter", _wrap_chevyshev1_bandptop_filter_filter_get, _wrap_chevyshev1_bandptop_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_chevyshev1_bandptop_filter_methods[]= {
    { "apply", _wrap_chevyshev1_bandptop_filter_apply},
    {0,0}
};
static swig_lua_method swig_chevyshev1_bandptop_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_chevyshev1_bandptop_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_chevyshev1_bandptop_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_chevyshev1_bandptop_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_chevyshev1_bandptop_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_chevyshev1_bandptop_filter_Sf_SwigStatic = {
    "chevyshev1_bandptop_filter",
    swig_chevyshev1_bandptop_filter_Sf_SwigStatic_methods,
    swig_chevyshev1_bandptop_filter_Sf_SwigStatic_attributes,
    swig_chevyshev1_bandptop_filter_Sf_SwigStatic_constants,
    swig_chevyshev1_bandptop_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_chevyshev1_bandptop_filter_bases[] = {0};
static const char *swig_chevyshev1_bandptop_filter_base_names[] = {0};
static swig_lua_class _wrap_class_chevyshev1_bandptop_filter = { "chevyshev1_bandptop_filter", "chevyshev1_bandptop_filter", &SWIGTYPE_p_DSP__Chebyshev1BandStopFilterT_SampleType_t,_proxy__wrap_new_chevyshev1_bandptop_filter, swig_delete_chevyshev1_bandptop_filter, swig_chevyshev1_bandptop_filter_methods, swig_chevyshev1_bandptop_filter_attributes, &swig_chevyshev1_bandptop_filter_Sf_SwigStatic, swig_chevyshev1_bandptop_filter_meta, swig_chevyshev1_bandptop_filter_bases, swig_chevyshev1_bandptop_filter_base_names };

static int _wrap_chevyshev2_filter_bqs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< SampleType > > *arg2 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::bqs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bqs",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bqs",2,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_bqs_set",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_bqs_set",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  if (arg1) (arg1)->bqs = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_bqs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  std::vector< kfr::biquad_params< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::bqs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bqs",1,"DSP::Chebyshev2Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_bqs_get",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  result = (std::vector< kfr::biquad_params< SampleType > > *)& ((arg1)->bqs);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *arg2 = (DSP::Biquad< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::filter",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::filter",2,"DSP::Biquad< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_filter_set",2,SWIGTYPE_p_DSP__BiquadT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  DSP::Biquad< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::filter",1,"DSP::Chebyshev2Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  result = (DSP::Biquad< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__BiquadT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::order",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_order_set",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  int result;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::order",1,"DSP::Chebyshev2Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_order_get",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_rs_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::rs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::rs",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::rs",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_rs_set",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev2_filter_rs_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->rs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_rs_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::rs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::rs",1,"DSP::Chebyshev2Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_rs_get",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  result =  ((arg1)->rs);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev2_filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::Chebyshev2Filter",0,0)
  result = (DSP::Chebyshev2Filter< SampleType > *)new DSP::Chebyshev2Filter< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev2_filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  DSP::Chebyshev2Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::Chebyshev2Filter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::Chebyshev2Filter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::Chebyshev2Filter",2,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = (DSP::Chebyshev2Filter< SampleType > *)new DSP::Chebyshev2Filter< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev2_filter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_chevyshev2_filter__SWIG_0(L);
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_chevyshev2_filter__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_chevyshev2_filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2Filter< SampleType >::Chebyshev2Filter()\n"
    "    DSP::Chebyshev2Filter< SampleType >::Chebyshev2Filter(int,SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_chevyshev2_filter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::lowpass",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::lowpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::lowpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_lowpass",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev2_filter_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev2_filter_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::highpass",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::highpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::highpass",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_highpass",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev2_filter_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev2_filter_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandpass",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandpass",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandpass",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_bandpass",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev2_filter_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev2_filter_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev2_filter_bandpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandstop",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandstop",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandstop",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::bandstop",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_bandstop",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev2_filter_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev2_filter_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chevyshev2_filter_bandstop",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::apply",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2Filter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::apply",1,"DSP::Chebyshev2Filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2Filter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_chevyshev2_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_chevyshev2_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chevyshev2_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2Filter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::Chebyshev2Filter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_chevyshev2_filter(void *obj) {
DSP::Chebyshev2Filter< SampleType > *arg1 = (DSP::Chebyshev2Filter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_chevyshev2_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_chevyshev2_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_chevyshev2_filter_attributes[] = {
    { "bqs", _wrap_chevyshev2_filter_bqs_get, _wrap_chevyshev2_filter_bqs_set },
    { "filter", _wrap_chevyshev2_filter_filter_get, _wrap_chevyshev2_filter_filter_set },
    { "order", _wrap_chevyshev2_filter_order_get, _wrap_chevyshev2_filter_order_set },
    { "rs", _wrap_chevyshev2_filter_rs_get, _wrap_chevyshev2_filter_rs_set },
    {0,0,0}
};
static swig_lua_method swig_chevyshev2_filter_methods[]= {
    { "lowpass", _wrap_chevyshev2_filter_lowpass},
    { "highpass", _wrap_chevyshev2_filter_highpass},
    { "bandpass", _wrap_chevyshev2_filter_bandpass},
    { "bandstop", _wrap_chevyshev2_filter_bandstop},
    { "apply", _wrap_chevyshev2_filter_apply},
    {0,0}
};
static swig_lua_method swig_chevyshev2_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_chevyshev2_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_chevyshev2_filter_Sf_SwigStatic_constants[]= {
    { SWIG_LUA_CONSTTAB_POINTER("maxorder",&DSP::Chebyshev2Filter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    {0,0,0,0,0,0}
};
static swig_lua_method swig_chevyshev2_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_chevyshev2_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_chevyshev2_filter_Sf_SwigStatic = {
    "chevyshev2_filter",
    swig_chevyshev2_filter_Sf_SwigStatic_methods,
    swig_chevyshev2_filter_Sf_SwigStatic_attributes,
    swig_chevyshev2_filter_Sf_SwigStatic_constants,
    swig_chevyshev2_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_chevyshev2_filter_bases[] = {0};
static const char *swig_chevyshev2_filter_base_names[] = {0};
static swig_lua_class _wrap_class_chevyshev2_filter = { "chevyshev2_filter", "chevyshev2_filter", &SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,_proxy__wrap_new_chevyshev2_filter, swig_delete_chevyshev2_filter, swig_chevyshev2_filter_methods, swig_chevyshev2_filter_attributes, &swig_chevyshev2_filter_Sf_SwigStatic, swig_chevyshev2_filter_meta, swig_chevyshev2_filter_bases, swig_chevyshev2_filter_base_names };

static int _wrap_chevyshev2_lowpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev2LowPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< SampleType > *arg2 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::filter",1,"DSP::Chebyshev2LowPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::filter",2,"DSP::Chebyshev2Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_lowpass_filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_lowpass_filter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_lowpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev2LowPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::filter",1,"DSP::Chebyshev2LowPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_lowpass_filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t);
  }
  
  result = (DSP::Chebyshev2Filter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev2_lowpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  DSP::Chebyshev2LowPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< SampleType >::Chebyshev2LowPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::Chebyshev2LowPassFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::Chebyshev2LowPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::Chebyshev2LowPassFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::Chebyshev2LowPassFilter",4,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_lowpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_lowpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_lowpass_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (DSP::Chebyshev2LowPassFilter< SampleType > *)new DSP::Chebyshev2LowPassFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_lowpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev2LowPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::apply",1,"DSP::Chebyshev2LowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_lowpass_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_lowpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_lowpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev2LowPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2LowPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::apply",1,"DSP::Chebyshev2LowPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2LowPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_lowpass_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_lowpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_lowpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_lowpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_chevyshev2_lowpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_chevyshev2_lowpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chevyshev2_lowpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2LowPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::Chebyshev2LowPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_chevyshev2_lowpass_filter(void *obj) {
DSP::Chebyshev2LowPassFilter< SampleType > *arg1 = (DSP::Chebyshev2LowPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_chevyshev2_lowpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_chevyshev2_lowpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_chevyshev2_lowpass_filter_attributes[] = {
    { "filter", _wrap_chevyshev2_lowpass_filter_filter_get, _wrap_chevyshev2_lowpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_chevyshev2_lowpass_filter_methods[]= {
    { "apply", _wrap_chevyshev2_lowpass_filter_apply},
    {0,0}
};
static swig_lua_method swig_chevyshev2_lowpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_chevyshev2_lowpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_chevyshev2_lowpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_chevyshev2_lowpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_chevyshev2_lowpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_chevyshev2_lowpass_filter_Sf_SwigStatic = {
    "chevyshev2_lowpass_filter",
    swig_chevyshev2_lowpass_filter_Sf_SwigStatic_methods,
    swig_chevyshev2_lowpass_filter_Sf_SwigStatic_attributes,
    swig_chevyshev2_lowpass_filter_Sf_SwigStatic_constants,
    swig_chevyshev2_lowpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_chevyshev2_lowpass_filter_bases[] = {0};
static const char *swig_chevyshev2_lowpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_chevyshev2_lowpass_filter = { "chevyshev2_lowpass_filter", "chevyshev2_lowpass_filter", &SWIGTYPE_p_DSP__Chebyshev2LowPassFilterT_SampleType_t,_proxy__wrap_new_chevyshev2_lowpass_filter, swig_delete_chevyshev2_lowpass_filter, swig_chevyshev2_lowpass_filter_methods, swig_chevyshev2_lowpass_filter_attributes, &swig_chevyshev2_lowpass_filter_Sf_SwigStatic, swig_chevyshev2_lowpass_filter_meta, swig_chevyshev2_lowpass_filter_bases, swig_chevyshev2_lowpass_filter_base_names };

static int _wrap_chevyshev2_highpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev2HighPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< SampleType > *arg2 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::filter",1,"DSP::Chebyshev2HighPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::filter",2,"DSP::Chebyshev2Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_highpass_filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_highpass_filter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_highpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev2HighPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::filter",1,"DSP::Chebyshev2HighPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_highpass_filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t);
  }
  
  result = (DSP::Chebyshev2Filter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev2_highpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  DSP::Chebyshev2HighPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< SampleType >::Chebyshev2HighPassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::Chebyshev2HighPassFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::Chebyshev2HighPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::Chebyshev2HighPassFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::Chebyshev2HighPassFilter",4,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_highpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_highpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_highpass_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (DSP::Chebyshev2HighPassFilter< SampleType > *)new DSP::Chebyshev2HighPassFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_highpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev2HighPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::apply",1,"DSP::Chebyshev2HighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_highpass_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_highpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_highpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev2HighPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2HighPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::apply",1,"DSP::Chebyshev2HighPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2HighPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_highpass_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_highpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_highpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_highpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_chevyshev2_highpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_chevyshev2_highpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chevyshev2_highpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2HighPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::Chebyshev2HighPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_chevyshev2_highpass_filter(void *obj) {
DSP::Chebyshev2HighPassFilter< SampleType > *arg1 = (DSP::Chebyshev2HighPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_chevyshev2_highpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_chevyshev2_highpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_chevyshev2_highpass_filter_attributes[] = {
    { "filter", _wrap_chevyshev2_highpass_filter_filter_get, _wrap_chevyshev2_highpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_chevyshev2_highpass_filter_methods[]= {
    { "apply", _wrap_chevyshev2_highpass_filter_apply},
    {0,0}
};
static swig_lua_method swig_chevyshev2_highpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_chevyshev2_highpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_chevyshev2_highpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_chevyshev2_highpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_chevyshev2_highpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_chevyshev2_highpass_filter_Sf_SwigStatic = {
    "chevyshev2_highpass_filter",
    swig_chevyshev2_highpass_filter_Sf_SwigStatic_methods,
    swig_chevyshev2_highpass_filter_Sf_SwigStatic_attributes,
    swig_chevyshev2_highpass_filter_Sf_SwigStatic_constants,
    swig_chevyshev2_highpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_chevyshev2_highpass_filter_bases[] = {0};
static const char *swig_chevyshev2_highpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_chevyshev2_highpass_filter = { "chevyshev2_highpass_filter", "chevyshev2_highpass_filter", &SWIGTYPE_p_DSP__Chebyshev2HighPassFilterT_SampleType_t,_proxy__wrap_new_chevyshev2_highpass_filter, swig_delete_chevyshev2_highpass_filter, swig_chevyshev2_highpass_filter_methods, swig_chevyshev2_highpass_filter_attributes, &swig_chevyshev2_highpass_filter_Sf_SwigStatic, swig_chevyshev2_highpass_filter_meta, swig_chevyshev2_highpass_filter_bases, swig_chevyshev2_highpass_filter_base_names };

static int _wrap_chevyshev2_bandpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev2BandPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< SampleType > *arg2 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::filter",1,"DSP::Chebyshev2BandPassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::filter",2,"DSP::Chebyshev2Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandpass_filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandpass_filter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_bandpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev2BandPassFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::filter",1,"DSP::Chebyshev2BandPassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandpass_filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t);
  }
  
  result = (DSP::Chebyshev2Filter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev2_bandpass_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  DSP::Chebyshev2BandPassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< SampleType >::Chebyshev2BandPassFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::Chebyshev2BandPassFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::Chebyshev2BandPassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::Chebyshev2BandPassFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::Chebyshev2BandPassFilter",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::Chebyshev2BandPassFilter",5,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_bandpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_bandpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_bandpass_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_bandpass_filter",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  result = (DSP::Chebyshev2BandPassFilter< SampleType > *)new DSP::Chebyshev2BandPassFilter< SampleType >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_bandpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev2BandPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::apply",1,"DSP::Chebyshev2BandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandpass_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_bandpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev2BandPassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandPassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::apply",1,"DSP::Chebyshev2BandPassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2BandPassFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandpass_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_bandpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_chevyshev2_bandpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_chevyshev2_bandpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chevyshev2_bandpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2BandPassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::Chebyshev2BandPassFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_chevyshev2_bandpass_filter(void *obj) {
DSP::Chebyshev2BandPassFilter< SampleType > *arg1 = (DSP::Chebyshev2BandPassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_chevyshev2_bandpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_chevyshev2_bandpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_chevyshev2_bandpass_filter_attributes[] = {
    { "filter", _wrap_chevyshev2_bandpass_filter_filter_get, _wrap_chevyshev2_bandpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_chevyshev2_bandpass_filter_methods[]= {
    { "apply", _wrap_chevyshev2_bandpass_filter_apply},
    {0,0}
};
static swig_lua_method swig_chevyshev2_bandpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_chevyshev2_bandpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_chevyshev2_bandpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_chevyshev2_bandpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_chevyshev2_bandpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_chevyshev2_bandpass_filter_Sf_SwigStatic = {
    "chevyshev2_bandpass_filter",
    swig_chevyshev2_bandpass_filter_Sf_SwigStatic_methods,
    swig_chevyshev2_bandpass_filter_Sf_SwigStatic_attributes,
    swig_chevyshev2_bandpass_filter_Sf_SwigStatic_constants,
    swig_chevyshev2_bandpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_chevyshev2_bandpass_filter_bases[] = {0};
static const char *swig_chevyshev2_bandpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_chevyshev2_bandpass_filter = { "chevyshev2_bandpass_filter", "chevyshev2_bandpass_filter", &SWIGTYPE_p_DSP__Chebyshev2BandPassFilterT_SampleType_t,_proxy__wrap_new_chevyshev2_bandpass_filter, swig_delete_chevyshev2_bandpass_filter, swig_chevyshev2_bandpass_filter_methods, swig_chevyshev2_bandpass_filter_attributes, &swig_chevyshev2_bandpass_filter_Sf_SwigStatic, swig_chevyshev2_bandpass_filter_meta, swig_chevyshev2_bandpass_filter_bases, swig_chevyshev2_bandpass_filter_base_names };

static int _wrap_chevyshev2_bandstop_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev2BandStopFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< SampleType > *arg2 = (DSP::Chebyshev2Filter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::filter",1,"DSP::Chebyshev2BandStopFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::filter",2,"DSP::Chebyshev2Filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandstop_filter_filter_set",1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandstop_filter_filter_set",2,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_bandstop_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev2BandStopFilter< SampleType > *) 0 ;
  DSP::Chebyshev2Filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::filter",1,"DSP::Chebyshev2BandStopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandstop_filter_filter_get",1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t);
  }
  
  result = (DSP::Chebyshev2Filter< SampleType > *)& ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2FilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_chevyshev2_bandstop_filter(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  DSP::Chebyshev2BandStopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< SampleType >::Chebyshev2BandStopFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::Chebyshev2BandStopFilter",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::Chebyshev2BandStopFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::Chebyshev2BandStopFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::Chebyshev2BandStopFilter",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::Chebyshev2BandStopFilter",5,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_bandstop_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_bandstop_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_bandstop_filter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_chevyshev2_bandstop_filter",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  result = (DSP::Chebyshev2BandStopFilter< SampleType > *)new DSP::Chebyshev2BandStopFilter< SampleType >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_bandstop_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev2BandStopFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::apply",1,"DSP::Chebyshev2BandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandstop_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandstop_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_bandstop_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::Chebyshev2BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev2BandStopFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::Chebyshev2BandStopFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::apply",1,"DSP::Chebyshev2BandStopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::apply",2,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::Chebyshev2BandStopFilter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandstop_filter_apply",1,SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandstop_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chevyshev2_bandstop_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply((kfr::univector< SampleType > const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chevyshev2_bandstop_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_chevyshev2_bandstop_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_chevyshev2_bandstop_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'chevyshev2_bandstop_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::Chebyshev2BandStopFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::Chebyshev2BandStopFilter< SampleType >::apply(kfr::univector< SampleType > const &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static void swig_delete_chevyshev2_bandstop_filter(void *obj) {
DSP::Chebyshev2BandStopFilter< SampleType > *arg1 = (DSP::Chebyshev2BandStopFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_chevyshev2_bandstop_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_chevyshev2_bandstop_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_chevyshev2_bandstop_filter_attributes[] = {
    { "filter", _wrap_chevyshev2_bandstop_filter_filter_get, _wrap_chevyshev2_bandstop_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_chevyshev2_bandstop_filter_methods[]= {
    { "apply", _wrap_chevyshev2_bandstop_filter_apply},
    {0,0}
};
static swig_lua_method swig_chevyshev2_bandstop_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_chevyshev2_bandstop_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_chevyshev2_bandstop_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_chevyshev2_bandstop_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_chevyshev2_bandstop_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_chevyshev2_bandstop_filter_Sf_SwigStatic = {
    "chevyshev2_bandstop_filter",
    swig_chevyshev2_bandstop_filter_Sf_SwigStatic_methods,
    swig_chevyshev2_bandstop_filter_Sf_SwigStatic_attributes,
    swig_chevyshev2_bandstop_filter_Sf_SwigStatic_constants,
    swig_chevyshev2_bandstop_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_chevyshev2_bandstop_filter_bases[] = {0};
static const char *swig_chevyshev2_bandstop_filter_base_names[] = {0};
static swig_lua_class _wrap_class_chevyshev2_bandstop_filter = { "chevyshev2_bandstop_filter", "chevyshev2_bandstop_filter", &SWIGTYPE_p_DSP__Chebyshev2BandStopFilterT_SampleType_t,_proxy__wrap_new_chevyshev2_bandstop_filter, swig_delete_chevyshev2_bandstop_filter, swig_chevyshev2_bandstop_filter_methods, swig_chevyshev2_bandstop_filter_attributes, &swig_chevyshev2_bandstop_filter_Sf_SwigStatic, swig_chevyshev2_bandstop_filter_meta, swig_chevyshev2_bandstop_filter_bases, swig_chevyshev2_bandstop_filter_base_names };

static int _wrap_bessel_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::univector< SampleType > *arg4 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::bessel_lowpass< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_lowpass< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bessel_lowpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::bessel_lowpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::bessel_lowpass< SampleType >",4,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_lowpass",4,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_lowpass< SampleType >(arg1,arg2,arg3,(kfr::univector< SampleType > const &)*arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_highpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::univector< SampleType > *arg4 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::bessel_highpass< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_highpass< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bessel_highpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::bessel_highpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::bessel_highpass< SampleType >",4,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_highpass",4,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_highpass< SampleType >(arg1,arg2,arg3,(kfr::univector< SampleType > const &)*arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  kfr::univector< SampleType > *arg5 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::bessel_bandpass< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_bandpass< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bessel_bandpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::bessel_bandpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::bessel_bandpass< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::bessel_bandpass< SampleType >",5,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_bandpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandpass",5,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_bandpass< SampleType >(arg1,arg2,arg3,arg4,(kfr::univector< SampleType > const &)*arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  kfr::univector< SampleType > *arg5 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::bessel_bandstop< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::bessel_bandstop< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::bessel_bandstop< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::bessel_bandstop< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::bessel_bandstop< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::bessel_bandstop< SampleType >",5,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("bessel_bandstop",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("bessel_bandstop",5,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR bessel_bandstop< SampleType >(arg1,arg2,arg3,arg4,(kfr::univector< SampleType > const &)*arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::univector< SampleType > *arg4 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::butterworth_lowpass< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_lowpass< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::butterworth_lowpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::butterworth_lowpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::butterworth_lowpass< SampleType >",4,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_lowpass",4,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_lowpass< SampleType >(arg1,arg2,arg3,(kfr::univector< SampleType > const &)*arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_highpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::univector< SampleType > *arg4 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::butterworth_highpass< SampleType >",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_highpass< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::butterworth_highpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::butterworth_highpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::butterworth_highpass< SampleType >",4,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_highpass",4,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_highpass< SampleType >(arg1,arg2,arg3,(kfr::univector< SampleType > const &)*arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  kfr::univector< SampleType > *arg5 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::butterworth_bandpass< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_bandpass< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::butterworth_bandpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::butterworth_bandpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::butterworth_bandpass< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::butterworth_bandpass< SampleType >",5,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_bandpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandpass",5,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_bandpass< SampleType >(arg1,arg2,arg3,arg4,(kfr::univector< SampleType > const &)*arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  kfr::univector< SampleType > *arg5 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::butterworth_bandstop< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::butterworth_bandstop< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::butterworth_bandstop< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::butterworth_bandstop< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::butterworth_bandstop< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::butterworth_bandstop< SampleType >",5,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("butterworth_bandstop",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("butterworth_bandstop",5,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR butterworth_bandstop< SampleType >(arg1,arg2,arg3,arg4,(kfr::univector< SampleType > const &)*arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  kfr::univector< SampleType > *arg5 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::chebyshev1_lowpass< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_lowpass< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::chebyshev1_lowpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::chebyshev1_lowpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::chebyshev1_lowpass< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev1_lowpass< SampleType >",5,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_lowpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chebyshev1_lowpass",5,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_lowpass< SampleType >(arg1,arg2,arg3,arg4,(kfr::univector< SampleType > const &)*arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_highpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  kfr::univector< SampleType > *arg5 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::chebyshev1_highpass< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_highpass< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::chebyshev1_highpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::chebyshev1_highpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::chebyshev1_highpass< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev1_highpass< SampleType >",5,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_highpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chebyshev1_highpass",5,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_highpass< SampleType >(arg1,arg2,arg3,arg4,(kfr::univector< SampleType > const &)*arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  kfr::univector< SampleType > *arg6 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::chebyshev1_bandpass< SampleType >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_bandpass< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::chebyshev1_bandpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::chebyshev1_bandpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::chebyshev1_bandpass< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev1_bandpass< SampleType >",5,"SampleType");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev1_bandpass< SampleType >",6,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_bandpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_bandpass",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chebyshev1_bandpass",6,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_bandpass< SampleType >(arg1,arg2,arg3,arg4,arg5,(kfr::univector< SampleType > const &)*arg6);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev1_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  kfr::univector< SampleType > *arg6 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::chebyshev1_bandstop< SampleType >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev1_bandstop< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::chebyshev1_bandstop< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::chebyshev1_bandstop< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::chebyshev1_bandstop< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev1_bandstop< SampleType >",5,"SampleType");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev1_bandstop< SampleType >",6,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_bandstop",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1_bandstop",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chebyshev1_bandstop",6,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev1_bandstop< SampleType >(arg1,arg2,arg3,arg4,arg5,(kfr::univector< SampleType > const &)*arg6);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  kfr::univector< SampleType > *arg5 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::chebyshev2_lowpass< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_lowpass< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::chebyshev2_lowpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::chebyshev2_lowpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::chebyshev2_lowpass< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev2_lowpass< SampleType >",5,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_lowpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chebyshev2_lowpass",5,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_lowpass< SampleType >(arg1,arg2,arg3,arg4,(kfr::univector< SampleType > const &)*arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_highpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  kfr::univector< SampleType > *arg5 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::chebyshev2_highpass< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_highpass< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::chebyshev2_highpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::chebyshev2_highpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::chebyshev2_highpass< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev2_highpass< SampleType >",5,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_highpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chebyshev2_highpass",5,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_highpass< SampleType >(arg1,arg2,arg3,arg4,(kfr::univector< SampleType > const &)*arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  kfr::univector< SampleType > *arg6 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::chebyshev2_bandpass< SampleType >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_bandpass< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::chebyshev2_bandpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::chebyshev2_bandpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::chebyshev2_bandpass< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev2_bandpass< SampleType >",5,"SampleType");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev2_bandpass< SampleType >",6,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_bandpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_bandpass",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chebyshev2_bandpass",6,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_bandpass< SampleType >(arg1,arg2,arg3,arg4,arg5,(kfr::univector< SampleType > const &)*arg6);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  kfr::univector< SampleType > *arg6 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::chebyshev2_bandstop< SampleType >",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::chebyshev2_bandstop< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::chebyshev2_bandstop< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::chebyshev2_bandstop< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::chebyshev2_bandstop< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::chebyshev2_bandstop< SampleType >",5,"SampleType");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("DSP::chebyshev2_bandstop< SampleType >",6,"kfr::univector< SampleType > const &");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_bandstop",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2_bandstop",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("chebyshev2_bandstop",6,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR chebyshev2_bandstop< SampleType >(arg1,arg2,arg3,arg4,arg5,(kfr::univector< SampleType > const &)*arg6);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_biquad_params__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = 0 ;
  kfr::biquad_params< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::biquad_params",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::biquad_params",1,"kfr::biquad_params< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("new_biquad_params",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  result = (kfr::biquad_params< SampleType > *)new kfr::biquad_params< SampleType >((kfr::biquad_params< SampleType > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_is_pod_get(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::is_pod",0,0)
  result = (bool)kfr::biquad_params< SampleType >::is_pod;
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_biquad_params__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::biquad_params",0,0)
  result = (kfr::biquad_params< SampleType > *)new kfr::biquad_params< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_biquad_params__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  SampleType arg6 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  SampleType *argp6 ;
  kfr::biquad_params< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::biquad_params",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::biquad_params",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::biquad_params< SampleType >::biquad_params",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::biquad_params< SampleType >::biquad_params",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("kfr::biquad_params< SampleType >::biquad_params",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("kfr::biquad_params< SampleType >::biquad_params",5,"SampleType");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("kfr::biquad_params< SampleType >::biquad_params",6,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_biquad_params",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_biquad_params",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_biquad_params",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_biquad_params",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_biquad_params",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_biquad_params",6,SWIGTYPE_p_SampleType);
  }
  arg6 = *argp6;
  
  result = (kfr::biquad_params< SampleType > *)new kfr::biquad_params< SampleType >(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_biquad_params(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_biquad_params__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_biquad_params__SWIG_0(L);
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_new_biquad_params__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_biquad_params'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::biquad_params< SampleType >::biquad_params(kfr::biquad_params< SampleType > const &)\n"
    "    kfr::biquad_params< SampleType >::biquad_params()\n"
    "    kfr::biquad_params< SampleType >::biquad_params(SampleType,SampleType,SampleType,SampleType,SampleType,SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_biquad_params_a0_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::a0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::a0",1,"kfr::biquad_params< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::biquad_params< SampleType >::a0",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_a0_set",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_params_a0_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->a0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_a0_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::a0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::a0",1,"kfr::biquad_params< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_a0_get",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  result =  ((arg1)->a0);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_a1_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::a1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::a1",1,"kfr::biquad_params< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::biquad_params< SampleType >::a1",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_a1_set",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_params_a1_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->a1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_a1_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::a1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::a1",1,"kfr::biquad_params< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_a1_get",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  result =  ((arg1)->a1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_a2_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::a2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::a2",1,"kfr::biquad_params< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::biquad_params< SampleType >::a2",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_a2_set",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_params_a2_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->a2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_a2_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::a2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::a2",1,"kfr::biquad_params< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_a2_get",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  result =  ((arg1)->a2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_b0_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::b0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::b0",1,"kfr::biquad_params< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::biquad_params< SampleType >::b0",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_b0_set",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_params_b0_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->b0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_b0_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::b0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::b0",1,"kfr::biquad_params< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_b0_get",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  result =  ((arg1)->b0);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_b1_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::b1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::b1",1,"kfr::biquad_params< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::biquad_params< SampleType >::b1",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_b1_set",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_params_b1_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->b1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_b1_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::b1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::b1",1,"kfr::biquad_params< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_b1_get",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  result =  ((arg1)->b1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_b2_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::b2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::b2",1,"kfr::biquad_params< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::biquad_params< SampleType >::b2",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_b2_set",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_params_b2_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->b2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_b2_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::b2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::b2",1,"kfr::biquad_params< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_b2_get",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  result =  ((arg1)->b2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_normalized_a0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::normalized_a0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::normalized_a0",1,"kfr::biquad_params< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_normalized_a0",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  result = ((kfr::biquad_params< SampleType > const *)arg1)->normalized_a0();
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_normalized_b0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::normalized_b0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::normalized_b0",1,"kfr::biquad_params< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_normalized_b0",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  result = ((kfr::biquad_params< SampleType > const *)arg1)->normalized_b0();
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_normalized_all(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("kfr::biquad_params< SampleType >::normalized_all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::biquad_params< SampleType >::normalized_all",1,"kfr::biquad_params< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_normalized_all",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  result = ((kfr::biquad_params< SampleType > const *)arg1)->normalized_all();
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_biquad_params(void *obj) {
kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_biquad_params(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_biquad_params);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_biquad_params_attributes[] = {
    { "a0", _wrap_biquad_params_a0_get, _wrap_biquad_params_a0_set },
    { "a1", _wrap_biquad_params_a1_get, _wrap_biquad_params_a1_set },
    { "a2", _wrap_biquad_params_a2_get, _wrap_biquad_params_a2_set },
    { "b0", _wrap_biquad_params_b0_get, _wrap_biquad_params_b0_set },
    { "b1", _wrap_biquad_params_b1_get, _wrap_biquad_params_b1_set },
    { "b2", _wrap_biquad_params_b2_get, _wrap_biquad_params_b2_set },
    {0,0,0}
};
static swig_lua_method swig_biquad_params_methods[]= {
    { "normalized_a0", _wrap_biquad_params_normalized_a0},
    { "normalized_b0", _wrap_biquad_params_normalized_b0},
    { "normalized_all", _wrap_biquad_params_normalized_all},
    {0,0}
};
static swig_lua_method swig_biquad_params_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_biquad_params_Sf_SwigStatic_attributes[] = {
    { "is_pod", _wrap_biquad_params_is_pod_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_biquad_params_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_biquad_params_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_biquad_params_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_biquad_params_Sf_SwigStatic = {
    "biquad_params",
    swig_biquad_params_Sf_SwigStatic_methods,
    swig_biquad_params_Sf_SwigStatic_attributes,
    swig_biquad_params_Sf_SwigStatic_constants,
    swig_biquad_params_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_biquad_params_bases[] = {0};
static const char *swig_biquad_params_base_names[] = {0};
static swig_lua_class _wrap_class_biquad_params = { "biquad_params", "biquad_params", &SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,_proxy__wrap_new_biquad_params, swig_delete_biquad_params, swig_biquad_params_methods, swig_biquad_params_attributes, &swig_biquad_params_Sf_SwigStatic, swig_biquad_params_meta, swig_biquad_params_bases, swig_biquad_params_base_names };

static int _wrap_new_biquad_filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< SampleType > *arg1 = (kfr::biquad_params< SampleType > *) 0 ;
  size_t arg2 ;
  kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::biquad_filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::biquad_filter",1,"kfr::biquad_params< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::biquad_filter",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("new_biquad_filter",1,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *)new kfr::CMT_ARCH_NAME::biquad_filter< SampleType >((kfr::biquad_params< SampleType > const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_biquad_filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = 0 ;
  kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::biquad_filter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::biquad_filter",1,"std::vector< kfr::biquad_params< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("new_biquad_filter",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  result = (kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *)new kfr::CMT_ARCH_NAME::biquad_filter< SampleType >((std::vector< kfr::biquad_params< SampleType > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_biquad_filter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_biquad_filter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_biquad_filter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_biquad_filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::biquad_filter(kfr::biquad_params< SampleType > const *,size_t)\n"
    "    kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::biquad_filter(std::vector< kfr::biquad_params< SampleType > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_biquad_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",1,"kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t,0))){
    SWIG_fail_ptr("biquad_filter_apply",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",1,"kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t,0))){
    SWIG_fail_ptr("biquad_filter_apply",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_filter_apply__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  SampleType *arg3 = (SampleType *) 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",1,"kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",2,"SampleType *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",3,"SampleType const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t,0))){
    SWIG_fail_ptr("biquad_filter_apply",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_filter_apply",2,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_filter_apply",3,SWIGTYPE_p_SampleType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->apply(arg2,(SampleType const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_filter_apply__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",1,"kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",2,"SampleType *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t,0))){
    SWIG_fail_ptr("biquad_filter_apply",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_filter_apply",2,SWIGTYPE_p_SampleType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->apply(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_filter_apply(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_biquad_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_biquad_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_biquad_filter_apply__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_biquad_filter_apply__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'biquad_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply(kfr::univector< SampleType > &,kfr::univector< SampleType > const &)\n"
    "    kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply(SampleType *,SampleType const *,size_t)\n"
    "    kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::apply(SampleType *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_biquad_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *) 0 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_filter< SampleType >::reset",1,"kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t,0))){
    SWIG_fail_ptr("biquad_filter_reset",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_biquad_filter(void *obj) {
kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_biquad_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_biquad_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_biquad_filter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_biquad_filter_methods[]= {
    { "apply", _wrap_biquad_filter_apply},
    { "reset", _wrap_biquad_filter_reset},
    {0,0}
};
static swig_lua_method swig_biquad_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_biquad_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_biquad_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_biquad_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_biquad_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_biquad_filter_Sf_SwigStatic = {
    "biquad_filter",
    swig_biquad_filter_Sf_SwigStatic_methods,
    swig_biquad_filter_Sf_SwigStatic_attributes,
    swig_biquad_filter_Sf_SwigStatic_constants,
    swig_biquad_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_biquad_filter_bases[] = {0};
static const char *swig_biquad_filter_base_names[] = {0};
static swig_lua_class _wrap_class_biquad_filter = { "biquad_filter", "biquad_filter", &SWIGTYPE_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t,_proxy__wrap_new_biquad_filter, swig_delete_biquad_filter, swig_biquad_filter_methods, swig_biquad_filter_attributes, &swig_biquad_filter_Sf_SwigStatic, swig_biquad_filter_meta, swig_biquad_filter_bases, swig_biquad_filter_base_names };

static int _wrap_biquad_allpass(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_allpass< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_allpass< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_allpass< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_allpass",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_allpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR biquad_allpass< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_lowpass< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_lowpass< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_lowpass< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_lowpass",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR biquad_lowpass< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_highpass(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_highpass< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_highpass< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_highpass< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_highpass",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR biquad_highpass< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_bandpass< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_bandpass< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_bandpass< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_bandpass",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR biquad_bandpass< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_notch(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_notch< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_notch< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_notch< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_notch",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_notch",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR biquad_notch< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_peak(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_peak< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_peak< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_peak< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_peak< SampleType >",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_peak",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_peak",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_peak",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR biquad_peak< SampleType >(arg1,arg2,arg3);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_lowshelf< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_lowshelf< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_lowshelf< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_lowshelf",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_lowshelf",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR biquad_lowshelf< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_highshelf(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::biquad_highshelf< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_highshelf< SampleType >",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::biquad_highshelf< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_highshelf",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("biquad_highshelf",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR biquad_highshelf< SampleType >(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zpk_z_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = (kfr::zpk< SampleType > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  
  SWIG_check_num_args("kfr::zpk< SampleType >::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::zpk< SampleType >::z",1,"kfr::zpk< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::zpk< SampleType >::z",2,"kfr::univector< kfr::complex< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("zpk_z_set",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("zpk_z_set",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  if (arg1) (arg1)->z = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zpk_z_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = (kfr::zpk< SampleType > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("kfr::zpk< SampleType >::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::zpk< SampleType >::z",1,"kfr::zpk< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("zpk_z_get",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  result = (kfr::univector< kfr::complex< SampleType > > *)& ((arg1)->z);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zpk_p_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = (kfr::zpk< SampleType > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  
  SWIG_check_num_args("kfr::zpk< SampleType >::p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::zpk< SampleType >::p",1,"kfr::zpk< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::zpk< SampleType >::p",2,"kfr::univector< kfr::complex< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("zpk_p_set",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("zpk_p_set",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  if (arg1) (arg1)->p = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zpk_p_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = (kfr::zpk< SampleType > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("kfr::zpk< SampleType >::p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::zpk< SampleType >::p",1,"kfr::zpk< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("zpk_p_get",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  result = (kfr::univector< kfr::complex< SampleType > > *)& ((arg1)->p);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zpk_k_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = (kfr::zpk< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("kfr::zpk< SampleType >::k",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::zpk< SampleType >::k",1,"kfr::zpk< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::zpk< SampleType >::k",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("zpk_k_set",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("zpk_k_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->k = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_zpk_k_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = (kfr::zpk< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("kfr::zpk< SampleType >::k",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::zpk< SampleType >::k",1,"kfr::zpk< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("zpk_k_get",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  result =  ((arg1)->k);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_zpk(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::zpk< SampleType >::zpk",0,0)
  result = (kfr::zpk< SampleType > *)new kfr::zpk< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_zpk(void *obj) {
kfr::zpk< SampleType > *arg1 = (kfr::zpk< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_zpk(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_zpk);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_zpk_attributes[] = {
    { "z", _wrap_zpk_z_get, _wrap_zpk_z_set },
    { "p", _wrap_zpk_p_get, _wrap_zpk_p_set },
    { "k", _wrap_zpk_k_get, _wrap_zpk_k_set },
    {0,0,0}
};
static swig_lua_method swig_zpk_methods[]= {
    {0,0}
};
static swig_lua_method swig_zpk_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_zpk_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_zpk_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_zpk_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_zpk_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_zpk_Sf_SwigStatic = {
    "zpk",
    swig_zpk_Sf_SwigStatic_methods,
    swig_zpk_Sf_SwigStatic_attributes,
    swig_zpk_Sf_SwigStatic_constants,
    swig_zpk_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_zpk_bases[] = {0};
static const char *swig_zpk_base_names[] = {0};
static swig_lua_class _wrap_class_zpk = { "zpk", "zpk", &SWIGTYPE_p_kfr__zpkT_SampleType_t,_proxy__wrap_new_zpk, swig_delete_zpk, swig_zpk_methods, swig_zpk_attributes, &swig_zpk_Sf_SwigStatic, swig_zpk_meta, swig_zpk_bases, swig_zpk_base_names };

static int _wrap_chebyshev1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  kfr::zpk< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::chebyshev1< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::chebyshev1< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::chebyshev1< SampleType >",2,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev1",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR chebyshev1< SampleType >(arg1,arg2);
  {
    kfr::zpk< SampleType > * resultptr = new kfr::zpk< SampleType >((const kfr::zpk< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_chebyshev2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  kfr::zpk< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::chebyshev2< SampleType >",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::chebyshev2< SampleType >",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::chebyshev2< SampleType >",2,"SampleType");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("chebyshev2",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR chebyshev2< SampleType >(arg1,arg2);
  {
    kfr::zpk< SampleType > * resultptr = new kfr::zpk< SampleType >((const kfr::zpk< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_butterworth(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  kfr::zpk< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::butterworth< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::butterworth< SampleType >",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR butterworth< SampleType >(arg1);
  {
    kfr::zpk< SampleType > * resultptr = new kfr::zpk< SampleType >((const kfr::zpk< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_bessel(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  kfr::zpk< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::bessel< SampleType >",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::bessel< SampleType >",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR bessel< SampleType >(arg1);
  {
    kfr::zpk< SampleType > * resultptr = new kfr::zpk< SampleType >((const kfr::zpk< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_iir_lowpass__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::zpk< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::iir_lowpass< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_lowpass< SampleType >",1,"kfr::zpk< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_lowpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_lowpass< SampleType >",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("iir_lowpass",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR iir_lowpass< SampleType >((kfr::zpk< SampleType > const &)*arg1,arg2,arg3);
  {
    kfr::zpk< SampleType > * resultptr = new kfr::zpk< SampleType >((const kfr::zpk< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_iir_lowpass__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  kfr::zpk< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::iir_lowpass< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_lowpass< SampleType >",1,"kfr::zpk< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_lowpass< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("iir_lowpass",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR iir_lowpass< SampleType >((kfr::zpk< SampleType > const &)*arg1,arg2);
  {
    kfr::zpk< SampleType > * resultptr = new kfr::zpk< SampleType >((const kfr::zpk< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_iir_lowpass(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__zpkT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_iir_lowpass__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__zpkT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_iir_lowpass__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'iir_lowpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::CMT_ARCH_NAME::iir_lowpass< SampleType >(kfr::zpk< SampleType > const &,SampleType,SampleType)\n"
    "    kfr::CMT_ARCH_NAME::iir_lowpass< SampleType >(kfr::zpk< SampleType > const &,SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_iir_highpass__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::zpk< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::iir_highpass< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_highpass< SampleType >",1,"kfr::zpk< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_highpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_highpass< SampleType >",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("iir_highpass",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR iir_highpass< SampleType >((kfr::zpk< SampleType > const &)*arg1,arg2,arg3);
  {
    kfr::zpk< SampleType > * resultptr = new kfr::zpk< SampleType >((const kfr::zpk< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_iir_highpass__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  kfr::zpk< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::iir_highpass< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_highpass< SampleType >",1,"kfr::zpk< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_highpass< SampleType >",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("iir_highpass",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR iir_highpass< SampleType >((kfr::zpk< SampleType > const &)*arg1,arg2);
  {
    kfr::zpk< SampleType > * resultptr = new kfr::zpk< SampleType >((const kfr::zpk< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_iir_highpass(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__zpkT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_iir_highpass__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__zpkT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_iir_highpass__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'iir_highpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::CMT_ARCH_NAME::iir_highpass< SampleType >(kfr::zpk< SampleType > const &,SampleType,SampleType)\n"
    "    kfr::CMT_ARCH_NAME::iir_highpass< SampleType >(kfr::zpk< SampleType > const &,SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_iir_bandpass__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::zpk< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::iir_bandpass< SampleType >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandpass< SampleType >",1,"kfr::zpk< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandpass< SampleType >",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("iir_bandpass",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_bandpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR iir_bandpass< SampleType >((kfr::zpk< SampleType > const &)*arg1,arg2,arg3,arg4);
  {
    kfr::zpk< SampleType > * resultptr = new kfr::zpk< SampleType >((const kfr::zpk< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_iir_bandpass__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::zpk< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::iir_bandpass< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandpass< SampleType >",1,"kfr::zpk< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandpass< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandpass< SampleType >",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("iir_bandpass",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR iir_bandpass< SampleType >((kfr::zpk< SampleType > const &)*arg1,arg2,arg3);
  {
    kfr::zpk< SampleType > * resultptr = new kfr::zpk< SampleType >((const kfr::zpk< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_iir_bandpass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__zpkT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_iir_bandpass__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__zpkT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_iir_bandpass__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'iir_bandpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::CMT_ARCH_NAME::iir_bandpass< SampleType >(kfr::zpk< SampleType > const &,SampleType,SampleType,SampleType)\n"
    "    kfr::CMT_ARCH_NAME::iir_bandpass< SampleType >(kfr::zpk< SampleType > const &,SampleType,SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_iir_bandstop__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::zpk< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::iir_bandstop< SampleType >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandstop< SampleType >",1,"kfr::zpk< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandstop< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandstop< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandstop< SampleType >",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("iir_bandstop",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_bandstop",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR iir_bandstop< SampleType >((kfr::zpk< SampleType > const &)*arg1,arg2,arg3,arg4);
  {
    kfr::zpk< SampleType > * resultptr = new kfr::zpk< SampleType >((const kfr::zpk< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_iir_bandstop__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  kfr::zpk< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::iir_bandstop< SampleType >",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandstop< SampleType >",1,"kfr::zpk< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandstop< SampleType >",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::iir_bandstop< SampleType >",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("iir_bandstop",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("iir_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR iir_bandstop< SampleType >((kfr::zpk< SampleType > const &)*arg1,arg2,arg3);
  {
    kfr::zpk< SampleType > * resultptr = new kfr::zpk< SampleType >((const kfr::zpk< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__zpkT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_iir_bandstop(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__zpkT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_iir_bandstop__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__zpkT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_iir_bandstop__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'iir_bandstop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::CMT_ARCH_NAME::iir_bandstop< SampleType >(kfr::zpk< SampleType > const &,SampleType,SampleType,SampleType)\n"
    "    kfr::CMT_ARCH_NAME::iir_bandstop< SampleType >(kfr::zpk< SampleType > const &,SampleType,SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_to_sos(lua_State* L) {
  int SWIG_arg = 0;
  kfr::zpk< SampleType > *arg1 = 0 ;
  SwigValueWrapper< std::vector< kfr::biquad_params< SampleType > > > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::to_sos< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::to_sos< SampleType >",1,"kfr::zpk< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__zpkT_SampleType_t,0))){
    SWIG_fail_ptr("to_sos",1,SWIGTYPE_p_kfr__zpkT_SampleType_t);
  }
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR to_sos< SampleType >((kfr::zpk< SampleType > const &)*arg1);
  {
    std::vector< kfr::biquad_params< SampleType > > * resultptr = new std::vector< kfr::biquad_params< SampleType > >((const std::vector< kfr::biquad_params< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_biquad_params_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::biquad_params< SampleType > *arg2 = 0 ;
  std::vector< kfr::biquad_params< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::vector",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::vector",2,"kfr::biquad_params< SampleType > const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("new_biquad_params_vector",2,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  result = (std::vector< kfr::biquad_params< SampleType > > *)new std::vector< kfr::biquad_params< SampleType > >(arg1,(kfr::biquad_params< SampleType > const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_biquad_params_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  std::vector< kfr::biquad_params< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::vector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (std::vector< kfr::biquad_params< SampleType > > *)new std::vector< kfr::biquad_params< SampleType > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_biquad_params_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = 0 ;
  std::vector< kfr::biquad_params< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::vector",1,"std::vector< kfr::biquad_params< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("new_biquad_params_vector",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  result = (std::vector< kfr::biquad_params< SampleType > > *)new std::vector< kfr::biquad_params< SampleType > >((std::vector< kfr::biquad_params< SampleType > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_biquad_params_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_biquad_params_vector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_biquad_params_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_biquad_params_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_biquad_params_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< kfr::biquad_params< SampleType > >::vector(size_t,kfr::biquad_params< SampleType > const &)\n"
    "    std::vector< kfr::biquad_params< SampleType > >::vector(size_t)\n"
    "    std::vector< kfr::biquad_params< SampleType > >::vector(std::vector< kfr::biquad_params< SampleType > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_biquad_params_vector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  size_t arg2 ;
  kfr::biquad_params< SampleType > result;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::__getitem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::__getitem",1,"std::vector< kfr::biquad_params< SampleType > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::__getitem",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector___getitem",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = std_vector_Sl_kfr_biquad_params_Sl_SampleType_Sg__Sg____getitem__SWIG(arg1,arg2);
  {
    kfr::biquad_params< SampleType > * resultptr = new kfr::biquad_params< SampleType >((const kfr::biquad_params< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  size_t arg2 ;
  kfr::biquad_params< SampleType > arg3 ;
  kfr::biquad_params< SampleType > *argp3 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::__setitem",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::__setitem",1,"std::vector< kfr::biquad_params< SampleType > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::__setitem",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::__setitem",3,"kfr::biquad_params< SampleType >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector___setitem",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_vector___setitem",3,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  arg3 = *argp3;
  
  std_vector_Sl_kfr_biquad_params_Sl_SampleType_Sg__Sg____setitem__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_begin(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< kfr::biquad_params< SampleType > > > result;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::begin",1,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_begin",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  result = std_vector_Sl_kfr_biquad_params_Sl_SampleType_Sg__Sg__begin__SWIG(arg1);
  {
    std::vector_iterator< kfr::biquad_params< SampleType > > * resultptr = new std::vector_iterator< kfr::biquad_params< SampleType > >((const std::vector_iterator< kfr::biquad_params< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_kfr__biquad_paramsT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_c_end(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  SwigValueWrapper< std::vector_iterator< kfr::biquad_params< SampleType > > > result;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::end",1,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_c_end",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  result = std_vector_Sl_kfr_biquad_params_Sl_SampleType_Sg__Sg__end__SWIG(arg1);
  {
    std::vector_iterator< kfr::biquad_params< SampleType > > * resultptr = new std::vector_iterator< kfr::biquad_params< SampleType > >((const std::vector_iterator< kfr::biquad_params< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vector_iteratorT_kfr__biquad_paramsT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::erase",1,"std::vector< kfr::biquad_params< SampleType > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_erase",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  std_vector_Sl_kfr_biquad_params_Sl_SampleType_Sg__Sg__erase__SWIG_0(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::erase",1,"std::vector< kfr::biquad_params< SampleType > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_erase",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  std_vector_Sl_kfr_biquad_params_Sl_SampleType_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_biquad_params_vector_erase__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_biquad_params_vector_erase__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'biquad_params_vector_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< kfr::biquad_params< SampleType > >::erase(size_t)\n"
    "    std::vector< kfr::biquad_params< SampleType > >::erase(size_t,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_biquad_params_vector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  kfr::biquad_params< SampleType > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::front",1,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_front",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  result = (kfr::biquad_params< SampleType > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  kfr::biquad_params< SampleType > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::back",1,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_back",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  result = (kfr::biquad_params< SampleType > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  kfr::biquad_params< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::push_back",1,"std::vector< kfr::biquad_params< SampleType > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::push_back",2,"kfr::biquad_params< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_push_back",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_vector_push_back",2,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  (arg1)->push_back((kfr::biquad_params< SampleType > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::pop_back",1,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_pop_back",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_at(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  size_t arg2 ;
  kfr::biquad_params< SampleType > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::at",1,"std::vector< kfr::biquad_params< SampleType > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_at",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (kfr::biquad_params< SampleType > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  size_t arg2 ;
  kfr::biquad_params< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::assign",1,"std::vector< kfr::biquad_params< SampleType > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::assign",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::assign",3,"kfr::biquad_params< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_assign",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0))){
    SWIG_fail_ptr("biquad_params_vector_assign",3,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t);
  }
  
  (arg1)->assign(arg2,(kfr::biquad_params< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_data(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  kfr::biquad_params< SampleType > *result = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::data",1,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_data",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  result = (kfr::biquad_params< SampleType > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__biquad_paramsT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::size",1,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_size",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::empty",1,"std::vector< kfr::biquad_params< SampleType > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_empty",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  result = (bool)((std::vector< kfr::biquad_params< SampleType > > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::resize",1,"std::vector< kfr::biquad_params< SampleType > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_resize",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::clear",1,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_clear",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_swap(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  std::vector< kfr::biquad_params< SampleType > > *arg2 = 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::swap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::swap",1,"std::vector< kfr::biquad_params< SampleType > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::swap",2,"std::vector< kfr::biquad_params< SampleType > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_swap",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_swap",2,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  (arg1)->swap(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_shrink_to_fit(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::shrink_to_fit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::shrink_to_fit",1,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_shrink_to_fit",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  (arg1)->shrink_to_fit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_reserve(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::reserve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::reserve",1,"std::vector< kfr::biquad_params< SampleType > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::reserve",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_reserve",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->reserve(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::max_size",1,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_max_size",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  result = (arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_biquad_params_vector_capacity(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::vector< kfr::biquad_params< SampleType > >::capacity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< kfr::biquad_params< SampleType > >::capacity",1,"std::vector< kfr::biquad_params< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,0))){
    SWIG_fail_ptr("biquad_params_vector_capacity",1,SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t);
  }
  
  result = (arg1)->capacity();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_biquad_params_vector(void *obj) {
std::vector< kfr::biquad_params< SampleType > > *arg1 = (std::vector< kfr::biquad_params< SampleType > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_biquad_params_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_biquad_params_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_biquad_params_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_biquad_params_vector_methods[]= {
    { "__getitem", _wrap_biquad_params_vector___getitem},
    { "__setitem", _wrap_biquad_params_vector___setitem},
    { "begin", _wrap_biquad_params_vector_begin},
    { "c_end", _wrap_biquad_params_vector_c_end},
    { "erase", _wrap_biquad_params_vector_erase},
    { "front", _wrap_biquad_params_vector_front},
    { "back", _wrap_biquad_params_vector_back},
    { "push_back", _wrap_biquad_params_vector_push_back},
    { "pop_back", _wrap_biquad_params_vector_pop_back},
    { "at", _wrap_biquad_params_vector_at},
    { "assign", _wrap_biquad_params_vector_assign},
    { "data", _wrap_biquad_params_vector_data},
    { "size", _wrap_biquad_params_vector_size},
    { "empty", _wrap_biquad_params_vector_empty},
    { "resize", _wrap_biquad_params_vector_resize},
    { "clear", _wrap_biquad_params_vector_clear},
    { "swap", _wrap_biquad_params_vector_swap},
    { "shrink_to_fit", _wrap_biquad_params_vector_shrink_to_fit},
    { "reserve", _wrap_biquad_params_vector_reserve},
    { "max_size", _wrap_biquad_params_vector_max_size},
    { "capacity", _wrap_biquad_params_vector_capacity},
    {0,0}
};
static swig_lua_method swig_biquad_params_vector_meta[] = {
    { "__getitem", _wrap_biquad_params_vector___getitem},
    { "__setitem", _wrap_biquad_params_vector___setitem},
    {0,0}
};

static swig_lua_attribute swig_biquad_params_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_biquad_params_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_biquad_params_vector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_biquad_params_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_biquad_params_vector_Sf_SwigStatic = {
    "biquad_params_vector",
    swig_biquad_params_vector_Sf_SwigStatic_methods,
    swig_biquad_params_vector_Sf_SwigStatic_attributes,
    swig_biquad_params_vector_Sf_SwigStatic_constants,
    swig_biquad_params_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_biquad_params_vector_bases[] = {0};
static const char *swig_biquad_params_vector_base_names[] = {0};
static swig_lua_class _wrap_class_biquad_params_vector = { "biquad_params_vector", "biquad_params_vector", &SWIGTYPE_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,_proxy__wrap_new_biquad_params_vector, swig_delete_biquad_params_vector, swig_biquad_params_vector_methods, swig_biquad_params_vector_attributes, &swig_biquad_params_vector_Sf_SwigStatic, swig_biquad_params_vector_meta, swig_biquad_params_vector_bases, swig_biquad_params_vector_base_names };

static int _wrap_new_convolve_filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  kfr::convolve_filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< SampleType >::convolve_filter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::convolve_filter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::convolve_filter",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (kfr::convolve_filter< SampleType > *)new kfr::convolve_filter< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_convolve_filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::convolve_filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< SampleType >::convolve_filter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::convolve_filter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (kfr::convolve_filter< SampleType > *)new kfr::convolve_filter< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_convolve_filter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t arg2 ;
  kfr::convolve_filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< SampleType >::convolve_filter",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::convolve_filter",1,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::convolve_filter",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("new_convolve_filter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (kfr::convolve_filter< SampleType > *)new kfr::convolve_filter< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_convolve_filter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::convolve_filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< SampleType >::convolve_filter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::convolve_filter",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("new_convolve_filter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = (kfr::convolve_filter< SampleType > *)new kfr::convolve_filter< SampleType >((kfr::univector< SampleType > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_convolve_filter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_convolve_filter__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_convolve_filter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_convolve_filter__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_convolve_filter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_convolve_filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::convolve_filter< SampleType >::convolve_filter(size_t,size_t)\n"
    "    kfr::convolve_filter< SampleType >::convolve_filter(size_t)\n"
    "    kfr::convolve_filter< SampleType >::convolve_filter(kfr::univector< SampleType > const &,size_t)\n"
    "    kfr::convolve_filter< SampleType >::convolve_filter(kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_convolve_filter_set_data(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< SampleType > *arg1 = (kfr::convolve_filter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< SampleType >::set_data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::set_data",1,"kfr::convolve_filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::set_data",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,0))){
    SWIG_fail_ptr("convolve_filter_set_data",1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("convolve_filter_set_data",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->set_data((kfr::univector< SampleType > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convolve_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< SampleType > *arg1 = (kfr::convolve_filter< SampleType > *) 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::reset",1,"kfr::convolve_filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,0))){
    SWIG_fail_ptr("convolve_filter_reset",1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convolve_filter_input_block_size(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< SampleType > *arg1 = (kfr::convolve_filter< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("kfr::convolve_filter< SampleType >::input_block_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::input_block_size",1,"kfr::convolve_filter< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,0))){
    SWIG_fail_ptr("convolve_filter_input_block_size",1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t);
  }
  
  result = ((kfr::convolve_filter< SampleType > const *)arg1)->input_block_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convolve_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< SampleType > *arg1 = (kfr::convolve_filter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::apply",1,"kfr::convolve_filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,0))){
    SWIG_fail_ptr("convolve_filter_apply",1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("convolve_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convolve_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< SampleType > *arg1 = (kfr::convolve_filter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::apply",1,"kfr::convolve_filter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::apply",3,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,0))){
    SWIG_fail_ptr("convolve_filter_apply",1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("convolve_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("convolve_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convolve_filter_apply__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< SampleType > *arg1 = (kfr::convolve_filter< SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("kfr::convolve_filter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::apply",1,"kfr::convolve_filter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::apply",2,"SampleType *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::apply",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,0))){
    SWIG_fail_ptr("convolve_filter_apply",1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("convolve_filter_apply",2,SWIGTYPE_p_SampleType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->apply(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convolve_filter_apply__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< SampleType > *arg1 = (kfr::convolve_filter< SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  SampleType *arg3 = (SampleType *) 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("kfr::convolve_filter< SampleType >::apply",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::apply",1,"kfr::convolve_filter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::apply",2,"SampleType *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::apply",3,"SampleType *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("kfr::convolve_filter< SampleType >::apply",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,0))){
    SWIG_fail_ptr("convolve_filter_apply",1,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("convolve_filter_apply",2,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("convolve_filter_apply",3,SWIGTYPE_p_SampleType);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->apply(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_convolve_filter_apply(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__convolve_filterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_convolve_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__convolve_filterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_convolve_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__convolve_filterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_convolve_filter_apply__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__convolve_filterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_convolve_filter_apply__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'convolve_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::convolve_filter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    kfr::convolve_filter< SampleType >::apply(kfr::univector< SampleType > &,kfr::univector< SampleType > &)\n"
    "    kfr::convolve_filter< SampleType >::apply(SampleType *,size_t)\n"
    "    kfr::convolve_filter< SampleType >::apply(SampleType *,SampleType *,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_convolve_filter(void *obj) {
kfr::convolve_filter< SampleType > *arg1 = (kfr::convolve_filter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_convolve_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_convolve_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_convolve_filter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_convolve_filter_methods[]= {
    { "set_data", _wrap_convolve_filter_set_data},
    { "reset", _wrap_convolve_filter_reset},
    { "input_block_size", _wrap_convolve_filter_input_block_size},
    { "apply", _wrap_convolve_filter_apply},
    {0,0}
};
static swig_lua_method swig_convolve_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_convolve_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_convolve_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_convolve_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_convolve_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_convolve_filter_Sf_SwigStatic = {
    "convolve_filter",
    swig_convolve_filter_Sf_SwigStatic_methods,
    swig_convolve_filter_Sf_SwigStatic_attributes,
    swig_convolve_filter_Sf_SwigStatic_constants,
    swig_convolve_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_convolve_filter_bases[] = {0};
static const char *swig_convolve_filter_base_names[] = {0};
static swig_lua_class _wrap_class_convolve_filter = { "convolve_filter", "convolve_filter", &SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,_proxy__wrap_new_convolve_filter, swig_delete_convolve_filter, swig_convolve_filter_methods, swig_convolve_filter_attributes, &swig_convolve_filter_Sf_SwigStatic, swig_convolve_filter_meta, swig_convolve_filter_bases, swig_convolve_filter_base_names };

static int _wrap_new_complex_convolve_filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  size_t arg2 ;
  kfr::convolve_filter< kfr::complex< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter",2,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (kfr::convolve_filter< kfr::complex< SampleType > > *)new kfr::convolve_filter< kfr::complex< SampleType > >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_convolve_filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::convolve_filter< kfr::complex< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (kfr::convolve_filter< kfr::complex< SampleType > > *)new kfr::convolve_filter< kfr::complex< SampleType > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_convolve_filter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = 0 ;
  size_t arg2 ;
  kfr::convolve_filter< kfr::complex< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter",1,"kfr::univector< kfr::complex< SampleType > > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("new_complex_convolve_filter",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (kfr::convolve_filter< kfr::complex< SampleType > > *)new kfr::convolve_filter< kfr::complex< SampleType > >((kfr::univector< kfr::complex< SampleType > > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_convolve_filter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = 0 ;
  kfr::convolve_filter< kfr::complex< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter",1,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("new_complex_convolve_filter",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = (kfr::convolve_filter< kfr::complex< SampleType > > *)new kfr::convolve_filter< kfr::complex< SampleType > >((kfr::univector< kfr::complex< SampleType > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_complex_convolve_filter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_complex_convolve_filter__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_complex_convolve_filter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_complex_convolve_filter__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_complex_convolve_filter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_complex_convolve_filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter(size_t,size_t)\n"
    "    kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter(size_t)\n"
    "    kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter(kfr::univector< kfr::complex< SampleType > > const &,size_t)\n"
    "    kfr::convolve_filter< kfr::complex< SampleType > >::convolve_filter(kfr::univector< kfr::complex< SampleType > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_complex_convolve_filter_set_data(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< kfr::complex< SampleType > > *arg1 = (kfr::convolve_filter< kfr::complex< SampleType > > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< kfr::complex< SampleType > >::set_data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::set_data",1,"kfr::convolve_filter< kfr::complex< SampleType > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::set_data",2,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_set_data",1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_set_data",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  (arg1)->set_data((kfr::univector< kfr::complex< SampleType > > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_convolve_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< kfr::complex< SampleType > > *arg1 = (kfr::convolve_filter< kfr::complex< SampleType > > *) 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< kfr::complex< SampleType > >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::reset",1,"kfr::convolve_filter< kfr::complex< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_reset",1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_convolve_filter_input_block_size(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< kfr::complex< SampleType > > *arg1 = (kfr::convolve_filter< kfr::complex< SampleType > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("kfr::convolve_filter< kfr::complex< SampleType > >::input_block_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::input_block_size",1,"kfr::convolve_filter< kfr::complex< SampleType > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_input_block_size",1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t);
  }
  
  result = ((kfr::convolve_filter< kfr::complex< SampleType > > const *)arg1)->input_block_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_convolve_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< kfr::complex< SampleType > > *arg1 = (kfr::convolve_filter< kfr::complex< SampleType > > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< kfr::complex< SampleType > >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::apply",1,"kfr::convolve_filter< kfr::complex< SampleType > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::apply",2,"kfr::univector< kfr::complex< SampleType > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_apply",1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_apply",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_convolve_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< kfr::complex< SampleType > > *arg1 = (kfr::convolve_filter< kfr::complex< SampleType > > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg3 = 0 ;
  
  SWIG_check_num_args("kfr::convolve_filter< kfr::complex< SampleType > >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::apply",1,"kfr::convolve_filter< kfr::complex< SampleType > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::apply",2,"kfr::univector< kfr::complex< SampleType > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::apply",3,"kfr::univector< kfr::complex< SampleType > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_apply",1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_apply",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_apply",3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  (arg1)->apply(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_convolve_filter_apply__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< kfr::complex< SampleType > > *arg1 = (kfr::convolve_filter< kfr::complex< SampleType > > *) 0 ;
  kfr::complex< SampleType > *arg2 = (kfr::complex< SampleType > *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("kfr::convolve_filter< kfr::complex< SampleType > >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::apply",1,"kfr::convolve_filter< kfr::complex< SampleType > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::apply",2,"kfr::complex< SampleType > *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::apply",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_apply",1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_apply",2,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->apply(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_convolve_filter_apply__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::convolve_filter< kfr::complex< SampleType > > *arg1 = (kfr::convolve_filter< kfr::complex< SampleType > > *) 0 ;
  kfr::complex< SampleType > *arg2 = (kfr::complex< SampleType > *) 0 ;
  kfr::complex< SampleType > *arg3 = (kfr::complex< SampleType > *) 0 ;
  size_t arg4 ;
  
  SWIG_check_num_args("kfr::convolve_filter< kfr::complex< SampleType > >::apply",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::apply",1,"kfr::convolve_filter< kfr::complex< SampleType > > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::apply",2,"kfr::complex< SampleType > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::apply",3,"kfr::complex< SampleType > *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("kfr::convolve_filter< kfr::complex< SampleType > >::apply",4,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_apply",1,SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_apply",2,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("complex_convolve_filter_apply",3,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative");
  arg4 = (size_t)lua_tonumber(L, 4);
  (arg1)->apply(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_convolve_filter_apply(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_complex_convolve_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_complex_convolve_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_SampleType_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_complex_convolve_filter_apply__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_SampleType_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__complexT_SampleType_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_complex_convolve_filter_apply__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'complex_convolve_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::convolve_filter< kfr::complex< SampleType > >::apply(kfr::univector< kfr::complex< SampleType > > &)\n"
    "    kfr::convolve_filter< kfr::complex< SampleType > >::apply(kfr::univector< kfr::complex< SampleType > > &,kfr::univector< kfr::complex< SampleType > > &)\n"
    "    kfr::convolve_filter< kfr::complex< SampleType > >::apply(kfr::complex< SampleType > *,size_t)\n"
    "    kfr::convolve_filter< kfr::complex< SampleType > >::apply(kfr::complex< SampleType > *,kfr::complex< SampleType > *,size_t)\n");
  lua_error(L);return 0;
}


static void swig_delete_complex_convolve_filter(void *obj) {
kfr::convolve_filter< kfr::complex< SampleType > > *arg1 = (kfr::convolve_filter< kfr::complex< SampleType > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_complex_convolve_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_complex_convolve_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_complex_convolve_filter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_complex_convolve_filter_methods[]= {
    { "set_data", _wrap_complex_convolve_filter_set_data},
    { "reset", _wrap_complex_convolve_filter_reset},
    { "input_block_size", _wrap_complex_convolve_filter_input_block_size},
    { "apply", _wrap_complex_convolve_filter_apply},
    {0,0}
};
static swig_lua_method swig_complex_convolve_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_complex_convolve_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_complex_convolve_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_complex_convolve_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_complex_convolve_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_complex_convolve_filter_Sf_SwigStatic = {
    "complex_convolve_filter",
    swig_complex_convolve_filter_Sf_SwigStatic_methods,
    swig_complex_convolve_filter_Sf_SwigStatic_attributes,
    swig_complex_convolve_filter_Sf_SwigStatic_constants,
    swig_complex_convolve_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_complex_convolve_filter_bases[] = {0};
static const char *swig_complex_convolve_filter_base_names[] = {0};
static swig_lua_class _wrap_class_complex_convolve_filter = { "complex_convolve_filter", "complex_convolve_filter", &SWIGTYPE_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,_proxy__wrap_new_complex_convolve_filter, swig_delete_complex_convolve_filter, swig_complex_convolve_filter_methods, swig_complex_convolve_filter_attributes, &swig_complex_convolve_filter_Sf_SwigStatic, swig_complex_convolve_filter_meta, swig_complex_convolve_filter_bases, swig_complex_convolve_filter_base_names };

static int _wrap_make_convolve_filter(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t arg2 ;
  kfr::filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::make_convolve_filter< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::make_convolve_filter< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::make_convolve_filter< SampleType >",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("make_convolve_filter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (kfr::filter< SampleType > *)kfr::SWIGTEMPLATEDISAMBIGUATOR make_convolve_filter< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__filterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_conv(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::convolve< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::convolve< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::convolve< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("conv",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("conv",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR convolve< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_conv(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::convolve< kfr::complex< SampleType > >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::convolve< kfr::complex< SampleType > >",1,"kfr::univector< kfr::complex< SampleType > > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::convolve< kfr::complex< SampleType > >",2,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_conv",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_conv",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR convolve< kfr::complex< SampleType > >((kfr::univector< kfr::complex< SampleType > > const &)*arg1,(kfr::univector< kfr::complex< SampleType > > const &)*arg2);
  {
    kfr::univector< kfr::complex< SampleType > > * resultptr = new kfr::univector< kfr::complex< SampleType > >((const kfr::univector< kfr::complex< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_acorr(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::autocorrelate< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::autocorrelate< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("acorr",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR autocorrelate< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_acorr(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = 0 ;
  kfr::univector< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::autocorrelate< kfr::complex< SampleType > >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::autocorrelate< kfr::complex< SampleType > >",1,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_acorr",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR autocorrelate< kfr::complex< SampleType > >((kfr::univector< kfr::complex< SampleType > > const &)*arg1);
  {
    kfr::univector< kfr::complex< SampleType > > * resultptr = new kfr::univector< kfr::complex< SampleType > >((const kfr::univector< kfr::complex< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_xcorr(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::correlate< SampleType >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::correlate< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::correlate< SampleType >",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("xcorr",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("xcorr",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR correlate< SampleType >((kfr::univector< SampleType > const &)*arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_complex_xcorr(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::correlate< kfr::complex< SampleType > >",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::correlate< kfr::complex< SampleType > >",1,"kfr::univector< kfr::complex< SampleType > > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::correlate< kfr::complex< SampleType > >",2,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_xcorr",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("complex_xcorr",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR correlate< kfr::complex< SampleType > >((kfr::univector< kfr::complex< SampleType > > const &)*arg1,(kfr::univector< kfr::complex< SampleType > > const &)*arg2);
  {
    kfr::univector< kfr::complex< SampleType > > * resultptr = new kfr::univector< kfr::complex< SampleType > >((const kfr::univector< kfr::complex< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_size_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan< SampleType > *arg1 = (kfr::dft_plan< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::size",1,"kfr::dft_plan< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::dft_plan< SampleType >::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_planT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_size_set",1,SWIGTYPE_p_kfr__dft_planT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_size_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan< SampleType > *arg1 = (kfr::dft_plan< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::size",1,"kfr::dft_plan< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_planT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_size_get",1,SWIGTYPE_p_kfr__dft_planT_SampleType_t);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_temp_size_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan< SampleType > *arg1 = (kfr::dft_plan< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::temp_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::temp_size",1,"kfr::dft_plan< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::dft_plan< SampleType >::temp_size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_planT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_temp_size_set",1,SWIGTYPE_p_kfr__dft_planT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->temp_size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_temp_size_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan< SampleType > *arg1 = (kfr::dft_plan< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::temp_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::temp_size",1,"kfr::dft_plan< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_planT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_temp_size_get",1,SWIGTYPE_p_kfr__dft_planT_SampleType_t);
  }
  
  result =  ((arg1)->temp_size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dft_plan__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::dft_order arg2 ;
  kfr::dft_plan< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::dft_plan",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::dft_plan",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::dft_plan< SampleType >::dft_plan",2,"kfr::dft_order");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (kfr::dft_order)(int)lua_tonumber(L, 2);
  result = (kfr::dft_plan< SampleType > *)new kfr::dft_plan< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__dft_planT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dft_plan__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::dft_plan< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::dft_plan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::dft_plan",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (kfr::dft_plan< SampleType > *)new kfr::dft_plan< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__dft_planT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dft_plan(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_dft_plan__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_dft_plan__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_dft_plan'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::dft_plan< SampleType >::dft_plan(size_t,kfr::dft_order)\n"
    "    kfr::dft_plan< SampleType >::dft_plan(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dft_plan_dump(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan< SampleType > *arg1 = (kfr::dft_plan< SampleType > *) 0 ;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::dump",1,"kfr::dft_plan< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_planT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_dump",1,SWIGTYPE_p_kfr__dft_planT_SampleType_t);
  }
  
  ((kfr::dft_plan< SampleType > const *)arg1)->dump();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_execute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan< SampleType > *arg1 = (kfr::dft_plan< SampleType > *) 0 ;
  kfr::complex< SampleType > *arg2 = (kfr::complex< SampleType > *) 0 ;
  kfr::complex< SampleType > *arg3 = (kfr::complex< SampleType > *) 0 ;
  kfr::u8 *arg4 = (kfr::u8 *) 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::execute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",1,"kfr::dft_plan< SampleType > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",2,"kfr::complex< SampleType > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",3,"kfr::complex< SampleType > const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",4,"kfr::u8 *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_planT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_execute",1,SWIGTYPE_p_kfr__dft_planT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_execute",2,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_execute",3,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("dft_plan_execute",4,SWIGTYPE_p_unsigned_char);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  ((kfr::dft_plan< SampleType > const *)arg1)->execute(arg2,(kfr::complex< SampleType > const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_execute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan< SampleType > *arg1 = (kfr::dft_plan< SampleType > *) 0 ;
  kfr::complex< SampleType > *arg2 = (kfr::complex< SampleType > *) 0 ;
  kfr::complex< SampleType > *arg3 = (kfr::complex< SampleType > *) 0 ;
  kfr::u8 *arg4 = (kfr::u8 *) 0 ;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",1,"kfr::dft_plan< SampleType > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",2,"kfr::complex< SampleType > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",3,"kfr::complex< SampleType > const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",4,"kfr::u8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_planT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_execute",1,SWIGTYPE_p_kfr__dft_planT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_execute",2,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_execute",3,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("dft_plan_execute",4,SWIGTYPE_p_unsigned_char);
  }
  
  ((kfr::dft_plan< SampleType > const *)arg1)->execute(arg2,(kfr::complex< SampleType > const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_execute__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan< SampleType > *arg1 = (kfr::dft_plan< SampleType > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg3 = 0 ;
  kfr::univector< kfr::u8 > *arg4 = 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::execute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",1,"kfr::dft_plan< SampleType > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",2,"kfr::univector< kfr::complex< SampleType > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",3,"kfr::univector< kfr::complex< SampleType > > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",4,"kfr::univector< kfr::u8 > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_planT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_execute",1,SWIGTYPE_p_kfr__dft_planT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("dft_plan_execute",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("dft_plan_execute",3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__univectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("dft_plan_execute",4,SWIGTYPE_p_kfr__univectorT_unsigned_char_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  ((kfr::dft_plan< SampleType > const *)arg1)->execute(*arg2,(kfr::univector< kfr::complex< SampleType > > const &)*arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_execute__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan< SampleType > *arg1 = (kfr::dft_plan< SampleType > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg3 = 0 ;
  kfr::univector< kfr::u8 > *arg4 = 0 ;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",1,"kfr::dft_plan< SampleType > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",2,"kfr::univector< kfr::complex< SampleType > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",3,"kfr::univector< kfr::complex< SampleType > > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("kfr::dft_plan< SampleType >::execute",4,"kfr::univector< kfr::u8 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_planT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_execute",1,SWIGTYPE_p_kfr__dft_planT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("dft_plan_execute",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("dft_plan_execute",3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__univectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("dft_plan_execute",4,SWIGTYPE_p_kfr__univectorT_unsigned_char_t);
  }
  
  ((kfr::dft_plan< SampleType > const *)arg1)->execute(*arg2,(kfr::univector< kfr::complex< SampleType > > const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_execute(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__dft_planT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_SampleType_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__complexT_SampleType_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_dft_plan_execute__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__dft_planT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_dft_plan_execute__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__dft_planT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_dft_plan_execute__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__dft_planT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_SampleType_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__complexT_SampleType_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_dft_plan_execute__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dft_plan_execute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::dft_plan< SampleType >::execute(kfr::complex< SampleType > *,kfr::complex< SampleType > const *,kfr::u8 *,bool) const\n"
    "    kfr::dft_plan< SampleType >::execute(kfr::complex< SampleType > *,kfr::complex< SampleType > const *,kfr::u8 *) const\n"
    "    kfr::dft_plan< SampleType >::execute(kfr::univector< kfr::complex< SampleType > > &,kfr::univector< kfr::complex< SampleType > > const &,kfr::univector< kfr::u8 > &,bool) const\n"
    "    kfr::dft_plan< SampleType >::execute(kfr::univector< kfr::complex< SampleType > > &,kfr::univector< kfr::complex< SampleType > > const &,kfr::univector< kfr::u8 > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_dft_plan_data_size_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan< SampleType > *arg1 = (kfr::dft_plan< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::data_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::data_size",1,"kfr::dft_plan< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::dft_plan< SampleType >::data_size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_planT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_data_size_set",1,SWIGTYPE_p_kfr__dft_planT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->data_size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_data_size_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan< SampleType > *arg1 = (kfr::dft_plan< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("kfr::dft_plan< SampleType >::data_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan< SampleType >::data_size",1,"kfr::dft_plan< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_planT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_data_size_get",1,SWIGTYPE_p_kfr__dft_planT_SampleType_t);
  }
  
  result =  ((arg1)->data_size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_dft_plan(void *obj) {
kfr::dft_plan< SampleType > *arg1 = (kfr::dft_plan< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_dft_plan(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_dft_plan);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_dft_plan_attributes[] = {
    { "size", _wrap_dft_plan_size_get, _wrap_dft_plan_size_set },
    { "temp_size", _wrap_dft_plan_temp_size_get, _wrap_dft_plan_temp_size_set },
    { "data_size", _wrap_dft_plan_data_size_get, _wrap_dft_plan_data_size_set },
    {0,0,0}
};
static swig_lua_method swig_dft_plan_methods[]= {
    { "dump", _wrap_dft_plan_dump},
    { "execute", _wrap_dft_plan_execute},
    {0,0}
};
static swig_lua_method swig_dft_plan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_dft_plan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_dft_plan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_dft_plan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_dft_plan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_dft_plan_Sf_SwigStatic = {
    "dft_plan",
    swig_dft_plan_Sf_SwigStatic_methods,
    swig_dft_plan_Sf_SwigStatic_attributes,
    swig_dft_plan_Sf_SwigStatic_constants,
    swig_dft_plan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_dft_plan_bases[] = {0};
static const char *swig_dft_plan_base_names[] = {0};
static swig_lua_class _wrap_class_dft_plan = { "dft_plan", "dft_plan", &SWIGTYPE_p_kfr__dft_planT_SampleType_t,_proxy__wrap_new_dft_plan, swig_delete_dft_plan, swig_dft_plan_methods, swig_dft_plan_attributes, &swig_dft_plan_Sf_SwigStatic, swig_dft_plan_meta, swig_dft_plan_bases, swig_dft_plan_base_names };

static int _wrap_dft_plan_real_size_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan_real< SampleType > *arg1 = (kfr::dft_plan_real< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("kfr::dft_plan_real< SampleType >::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::size",1,"kfr::dft_plan_real< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_real_size_set",1,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_real_size_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan_real< SampleType > *arg1 = (kfr::dft_plan_real< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("kfr::dft_plan_real< SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::size",1,"kfr::dft_plan_real< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_real_size_get",1,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t);
  }
  
  result =  ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dft_plan_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::dft_pack_format arg2 ;
  kfr::dft_plan_real< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::dft_plan_real< SampleType >::dft_plan_real",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::dft_plan_real",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::dft_plan_real",2,"kfr::dft_pack_format");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (kfr::dft_pack_format)(int)lua_tonumber(L, 2);
  result = (kfr::dft_plan_real< SampleType > *)new kfr::dft_plan_real< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dft_plan_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::dft_plan_real< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::dft_plan_real< SampleType >::dft_plan_real",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::dft_plan_real",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (kfr::dft_plan_real< SampleType > *)new kfr::dft_plan_real< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dft_plan_real(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_dft_plan_real__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_dft_plan_real__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_dft_plan_real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::dft_plan_real< SampleType >::dft_plan_real(size_t,kfr::dft_pack_format)\n"
    "    kfr::dft_plan_real< SampleType >::dft_plan_real(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_dft_plan_real_execute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan_real< SampleType > *arg1 = (kfr::dft_plan_real< SampleType > *) 0 ;
  kfr::complex< SampleType > *arg2 = (kfr::complex< SampleType > *) 0 ;
  SampleType *arg3 = (SampleType *) 0 ;
  kfr::u8 *arg4 = (kfr::u8 *) 0 ;
  
  SWIG_check_num_args("kfr::dft_plan_real< SampleType >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",1,"kfr::dft_plan_real< SampleType > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",2,"kfr::complex< SampleType > *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",3,"SampleType const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",4,"kfr::u8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_real_execute",1,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_real_execute",2,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("dft_plan_real_execute",3,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("dft_plan_real_execute",4,SWIGTYPE_p_unsigned_char);
  }
  
  ((kfr::dft_plan_real< SampleType > const *)arg1)->execute(arg2,(SampleType const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_real_execute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan_real< SampleType > *arg1 = (kfr::dft_plan_real< SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  kfr::complex< SampleType > *arg3 = (kfr::complex< SampleType > *) 0 ;
  kfr::u8 *arg4 = (kfr::u8 *) 0 ;
  
  SWIG_check_num_args("kfr::dft_plan_real< SampleType >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",1,"kfr::dft_plan_real< SampleType > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",2,"SampleType *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",3,"kfr::complex< SampleType > const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",4,"kfr::u8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_real_execute",1,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("dft_plan_real_execute",2,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_real_execute",3,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("dft_plan_real_execute",4,SWIGTYPE_p_unsigned_char);
  }
  
  ((kfr::dft_plan_real< SampleType > const *)arg1)->execute(arg2,(kfr::complex< SampleType > const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_real_execute__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan_real< SampleType > *arg1 = (kfr::dft_plan_real< SampleType > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  kfr::univector< kfr::u8 > *arg4 = 0 ;
  
  SWIG_check_num_args("kfr::dft_plan_real< SampleType >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",1,"kfr::dft_plan_real< SampleType > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",2,"kfr::univector< kfr::complex< SampleType > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",3,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",4,"kfr::univector< kfr::u8 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_real_execute",1,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("dft_plan_real_execute",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_real_execute",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__univectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("dft_plan_real_execute",4,SWIGTYPE_p_kfr__univectorT_unsigned_char_t);
  }
  
  ((kfr::dft_plan_real< SampleType > const *)arg1)->execute(*arg2,(kfr::univector< SampleType > const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_real_execute__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dft_plan_real< SampleType > *arg1 = (kfr::dft_plan_real< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg3 = 0 ;
  kfr::univector< kfr::u8 > *arg4 = 0 ;
  
  SWIG_check_num_args("kfr::dft_plan_real< SampleType >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",1,"kfr::dft_plan_real< SampleType > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",3,"kfr::univector< kfr::complex< SampleType > > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("kfr::dft_plan_real< SampleType >::execute",4,"kfr::univector< kfr::u8 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_real_execute",1,SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("dft_plan_real_execute",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("dft_plan_real_execute",3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__univectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("dft_plan_real_execute",4,SWIGTYPE_p_kfr__univectorT_unsigned_char_t);
  }
  
  ((kfr::dft_plan_real< SampleType > const *)arg1)->execute(*arg2,(kfr::univector< kfr::complex< SampleType > > const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_plan_real_execute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__complexT_SampleType_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_dft_plan_real_execute__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__complexT_SampleType_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_dft_plan_real_execute__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_dft_plan_real_execute__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_dft_plan_real_execute__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dft_plan_real_execute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::dft_plan_real< SampleType >::execute(kfr::complex< SampleType > *,SampleType const *,kfr::u8 *) const\n"
    "    kfr::dft_plan_real< SampleType >::execute(SampleType *,kfr::complex< SampleType > const *,kfr::u8 *) const\n"
    "    kfr::dft_plan_real< SampleType >::execute(kfr::univector< kfr::complex< SampleType > > &,kfr::univector< SampleType > const &,kfr::univector< kfr::u8 > &) const\n"
    "    kfr::dft_plan_real< SampleType >::execute(kfr::univector< SampleType > &,kfr::univector< kfr::complex< SampleType > > const &,kfr::univector< kfr::u8 > &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_dft_plan_real(void *obj) {
kfr::dft_plan_real< SampleType > *arg1 = (kfr::dft_plan_real< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_dft_plan_real(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_dft_plan_real);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_dft_plan_real_attributes[] = {
    { "size", _wrap_dft_plan_real_size_get, _wrap_dft_plan_real_size_set },
    {0,0,0}
};
static swig_lua_method swig_dft_plan_real_methods[]= {
    { "execute", _wrap_dft_plan_real_execute},
    {0,0}
};
static swig_lua_method swig_dft_plan_real_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_dft_plan_real_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_dft_plan_real_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_dft_plan_real_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_dft_plan_real_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_dft_plan_real_Sf_SwigStatic = {
    "dft_plan_real",
    swig_dft_plan_real_Sf_SwigStatic_methods,
    swig_dft_plan_real_Sf_SwigStatic_attributes,
    swig_dft_plan_real_Sf_SwigStatic_constants,
    swig_dft_plan_real_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_dft_plan_real_bases[] = {0};
static const char *swig_dft_plan_real_base_names[] = {0};
static swig_lua_class _wrap_class_dft_plan_real = { "dft_plan_real", "dft_plan_real", &SWIGTYPE_p_kfr__dft_plan_realT_SampleType_t,_proxy__wrap_new_dft_plan_real, swig_delete_dft_plan_real, swig_dft_plan_real_methods, swig_dft_plan_real_attributes, &swig_dft_plan_real_Sf_SwigStatic, swig_dft_plan_real_meta, swig_dft_plan_real_bases, swig_dft_plan_real_base_names };

static int _wrap_new_dct_plan(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::dct_plan< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::dct_plan< SampleType >::dct_plan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::dct_plan< SampleType >::dct_plan",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (kfr::dct_plan< SampleType > *)new kfr::dct_plan< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__dct_planT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dct_plan_execute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dct_plan< SampleType > *arg1 = (kfr::dct_plan< SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  SampleType *arg3 = (SampleType *) 0 ;
  kfr::u8 *arg4 = (kfr::u8 *) 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("kfr::dct_plan< SampleType >::execute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",1,"kfr::dct_plan< SampleType > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",2,"SampleType *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",3,"SampleType const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",4,"kfr::u8 *");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dct_planT_SampleType_t,0))){
    SWIG_fail_ptr("dct_plan_execute",1,SWIGTYPE_p_kfr__dct_planT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("dct_plan_execute",2,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("dct_plan_execute",3,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("dct_plan_execute",4,SWIGTYPE_p_unsigned_char);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  ((kfr::dct_plan< SampleType > const *)arg1)->execute(arg2,(SampleType const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dct_plan_execute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dct_plan< SampleType > *arg1 = (kfr::dct_plan< SampleType > *) 0 ;
  SampleType *arg2 = (SampleType *) 0 ;
  SampleType *arg3 = (SampleType *) 0 ;
  kfr::u8 *arg4 = (kfr::u8 *) 0 ;
  
  SWIG_check_num_args("kfr::dct_plan< SampleType >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",1,"kfr::dct_plan< SampleType > const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",2,"SampleType *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",3,"SampleType const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",4,"kfr::u8 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dct_planT_SampleType_t,0))){
    SWIG_fail_ptr("dct_plan_execute",1,SWIGTYPE_p_kfr__dct_planT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("dct_plan_execute",2,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("dct_plan_execute",3,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("dct_plan_execute",4,SWIGTYPE_p_unsigned_char);
  }
  
  ((kfr::dct_plan< SampleType > const *)arg1)->execute(arg2,(SampleType const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dct_plan_execute__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dct_plan< SampleType > *arg1 = (kfr::dct_plan< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  kfr::univector< kfr::u8 > *arg4 = 0 ;
  bool arg5 ;
  
  SWIG_check_num_args("kfr::dct_plan< SampleType >::execute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",1,"kfr::dct_plan< SampleType > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",3,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",4,"kfr::univector< kfr::u8 > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dct_planT_SampleType_t,0))){
    SWIG_fail_ptr("dct_plan_execute",1,SWIGTYPE_p_kfr__dct_planT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("dct_plan_execute",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("dct_plan_execute",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__univectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("dct_plan_execute",4,SWIGTYPE_p_kfr__univectorT_unsigned_char_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  ((kfr::dct_plan< SampleType > const *)arg1)->execute(*arg2,(kfr::univector< SampleType > const &)*arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dct_plan_execute__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::dct_plan< SampleType > *arg1 = (kfr::dct_plan< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  kfr::univector< kfr::u8 > *arg4 = 0 ;
  
  SWIG_check_num_args("kfr::dct_plan< SampleType >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",1,"kfr::dct_plan< SampleType > const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",3,"kfr::univector< SampleType > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("kfr::dct_plan< SampleType >::execute",4,"kfr::univector< kfr::u8 > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__dct_planT_SampleType_t,0))){
    SWIG_fail_ptr("dct_plan_execute",1,SWIGTYPE_p_kfr__dct_planT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("dct_plan_execute",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("dct_plan_execute",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__univectorT_unsigned_char_t,0))){
    SWIG_fail_ptr("dct_plan_execute",4,SWIGTYPE_p_kfr__univectorT_unsigned_char_t);
  }
  
  ((kfr::dct_plan< SampleType > const *)arg1)->execute(*arg2,(kfr::univector< SampleType > const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dct_plan_execute(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__dct_planT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_dct_plan_execute__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__dct_planT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_dct_plan_execute__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__dct_planT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_dct_plan_execute__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__dct_planT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_dct_plan_execute__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dct_plan_execute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::dct_plan< SampleType >::execute(SampleType *,SampleType const *,kfr::u8 *,bool) const\n"
    "    kfr::dct_plan< SampleType >::execute(SampleType *,SampleType const *,kfr::u8 *) const\n"
    "    kfr::dct_plan< SampleType >::execute(kfr::univector< SampleType > &,kfr::univector< SampleType > const &,kfr::univector< kfr::u8 > &,bool) const\n"
    "    kfr::dct_plan< SampleType >::execute(kfr::univector< SampleType > &,kfr::univector< SampleType > const &,kfr::univector< kfr::u8 > &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_dct_plan(void *obj) {
kfr::dct_plan< SampleType > *arg1 = (kfr::dct_plan< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_dct_plan(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_dct_plan);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_dct_plan_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_dct_plan_methods[]= {
    { "execute", _wrap_dct_plan_execute},
    {0,0}
};
static swig_lua_method swig_dct_plan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_dct_plan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_dct_plan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_dct_plan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_dct_plan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_dct_plan_Sf_SwigStatic = {
    "dct_plan",
    swig_dct_plan_Sf_SwigStatic_methods,
    swig_dct_plan_Sf_SwigStatic_attributes,
    swig_dct_plan_Sf_SwigStatic_constants,
    swig_dct_plan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_dct_plan_bases[] = {0};
static const char *swig_dct_plan_base_names[] = {0};
static swig_lua_class _wrap_class_dct_plan = { "dct_plan", "dct_plan", &SWIGTYPE_p_kfr__dct_planT_SampleType_t,_proxy__wrap_new_dct_plan, swig_delete_dct_plan, swig_dct_plan_methods, swig_dct_plan_attributes, &swig_dct_plan_Sf_SwigStatic, swig_dct_plan_meta, swig_dct_plan_bases, swig_dct_plan_base_names };

static int _wrap_dft(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = 0 ;
  kfr::univector< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("DSP::run_dft< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_dft< SampleType >",1,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("dft",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_dft< SampleType >((kfr::univector< kfr::complex< SampleType > > const &)*arg1);
  {
    kfr::univector< kfr::complex< SampleType > > * resultptr = new kfr::univector< kfr::complex< SampleType > >((const kfr::univector< kfr::complex< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dft_real(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("DSP::run_realdft< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_realdft< SampleType >",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("dft_real",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_realdft< SampleType >((kfr::univector< SampleType > const &)*arg1);
  {
    kfr::univector< kfr::complex< SampleType > > * resultptr = new kfr::univector< kfr::complex< SampleType > >((const kfr::univector< kfr::complex< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_idft(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = 0 ;
  kfr::univector< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("DSP::run_idft< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_idft< SampleType >",1,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("idft",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_idft< SampleType >((kfr::univector< kfr::complex< SampleType > > const &)*arg1);
  {
    kfr::univector< kfr::complex< SampleType > > * resultptr = new kfr::univector< kfr::complex< SampleType > >((const kfr::univector< kfr::complex< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_idft_real(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::run_irealdft< SampleType >",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::run_irealdft< SampleType >",1,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("idft_real",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR run_irealdft< SampleType >((kfr::univector< kfr::complex< SampleType > > const &)*arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DCTPlan(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::DCTPlan< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::DCTPlan< SampleType >::DCTPlan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::DCTPlan",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::DCTPlan< SampleType > *)new DSP::DCTPlan< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__DCTPlanT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCTPlan_execute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DCTPlan< SampleType > *arg1 = (DSP::DCTPlan< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("DSP::DCTPlan< SampleType >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",1,"DSP::DCTPlan< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",3,"kfr::univector< SampleType > const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DCTPlanT_SampleType_t,0))){
    SWIG_fail_ptr("DCTPlan_execute",1,SWIGTYPE_p_DSP__DCTPlanT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("DCTPlan_execute",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("DCTPlan_execute",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->execute(*arg2,(kfr::univector< SampleType > const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCTPlan_execute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DCTPlan< SampleType > *arg1 = (DSP::DCTPlan< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::DCTPlan< SampleType >::execute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",1,"DSP::DCTPlan< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DCTPlan< SampleType >::execute",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DCTPlanT_SampleType_t,0))){
    SWIG_fail_ptr("DCTPlan_execute",1,SWIGTYPE_p_DSP__DCTPlanT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("DCTPlan_execute",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("DCTPlan_execute",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->execute(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DCTPlan_execute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__DCTPlanT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DCTPlan_execute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__DCTPlanT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_DCTPlan_execute__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DCTPlan_execute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::DCTPlan< SampleType >::execute(kfr::univector< SampleType > &,kfr::univector< SampleType > const &,bool)\n"
    "    DSP::DCTPlan< SampleType >::execute(kfr::univector< SampleType > &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_DCTPlan(void *obj) {
DSP::DCTPlan< SampleType > *arg1 = (DSP::DCTPlan< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DCTPlan(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DCTPlan);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DCTPlan_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DCTPlan_methods[]= {
    { "execute", _wrap_DCTPlan_execute},
    {0,0}
};
static swig_lua_method swig_DCTPlan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DCTPlan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DCTPlan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DCTPlan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DCTPlan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DCTPlan_Sf_SwigStatic = {
    "DCTPlan",
    swig_DCTPlan_Sf_SwigStatic_methods,
    swig_DCTPlan_Sf_SwigStatic_attributes,
    swig_DCTPlan_Sf_SwigStatic_constants,
    swig_DCTPlan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DCTPlan_bases[] = {0};
static const char *swig_DCTPlan_base_names[] = {0};
static swig_lua_class _wrap_class_DCTPlan = { "DCTPlan", "DCTPlan", &SWIGTYPE_p_DSP__DCTPlanT_SampleType_t,_proxy__wrap_new_DCTPlan, swig_delete_DCTPlan, swig_DCTPlan_methods, swig_DCTPlan_attributes, &swig_DCTPlan_Sf_SwigStatic, swig_DCTPlan_meta, swig_DCTPlan_bases, swig_DCTPlan_base_names };

static int _wrap_new_DFTPlan(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::DFTPlan< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::DFTPlan< SampleType >::DFTPlan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::DFTPlan",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::DFTPlan< SampleType > *)new DSP::DFTPlan< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__DFTPlanT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTPlan_dump(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTPlan< SampleType > *arg1 = (DSP::DFTPlan< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::DFTPlan< SampleType >::dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::dump",1,"DSP::DFTPlan< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTPlanT_SampleType_t,0))){
    SWIG_fail_ptr("DFTPlan_dump",1,SWIGTYPE_p_DSP__DFTPlanT_SampleType_t);
  }
  
  ((DSP::DFTPlan< SampleType > const *)arg1)->dump();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTPlan_execute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTPlan< SampleType > *arg1 = (DSP::DFTPlan< SampleType > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg3 = 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("DSP::DFTPlan< SampleType >::execute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",1,"DSP::DFTPlan< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",2,"kfr::univector< kfr::complex< SampleType > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",3,"kfr::univector< kfr::complex< SampleType > > const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTPlanT_SampleType_t,0))){
    SWIG_fail_ptr("DFTPlan_execute",1,SWIGTYPE_p_DSP__DFTPlanT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("DFTPlan_execute",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("DFTPlan_execute",3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->execute(*arg2,(kfr::univector< kfr::complex< SampleType > > const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTPlan_execute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTPlan< SampleType > *arg1 = (DSP::DFTPlan< SampleType > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::DFTPlan< SampleType >::execute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",1,"DSP::DFTPlan< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",2,"kfr::univector< kfr::complex< SampleType > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DFTPlan< SampleType >::execute",3,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTPlanT_SampleType_t,0))){
    SWIG_fail_ptr("DFTPlan_execute",1,SWIGTYPE_p_DSP__DFTPlanT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("DFTPlan_execute",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("DFTPlan_execute",3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  (arg1)->execute(*arg2,(kfr::univector< kfr::complex< SampleType > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTPlan_execute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__DFTPlanT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DFTPlan_execute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__DFTPlanT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_DFTPlan_execute__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DFTPlan_execute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::DFTPlan< SampleType >::execute(kfr::univector< kfr::complex< SampleType > > &,kfr::univector< kfr::complex< SampleType > > const &,bool)\n"
    "    DSP::DFTPlan< SampleType >::execute(kfr::univector< kfr::complex< SampleType > > &,kfr::univector< kfr::complex< SampleType > > const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_DFTPlan(void *obj) {
DSP::DFTPlan< SampleType > *arg1 = (DSP::DFTPlan< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DFTPlan(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DFTPlan);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DFTPlan_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DFTPlan_methods[]= {
    { "dump", _wrap_DFTPlan_dump},
    { "execute", _wrap_DFTPlan_execute},
    {0,0}
};
static swig_lua_method swig_DFTPlan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DFTPlan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DFTPlan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DFTPlan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DFTPlan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DFTPlan_Sf_SwigStatic = {
    "DFTPlan",
    swig_DFTPlan_Sf_SwigStatic_methods,
    swig_DFTPlan_Sf_SwigStatic_attributes,
    swig_DFTPlan_Sf_SwigStatic_constants,
    swig_DFTPlan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DFTPlan_bases[] = {0};
static const char *swig_DFTPlan_base_names[] = {0};
static swig_lua_class _wrap_class_DFTPlan = { "DFTPlan", "DFTPlan", &SWIGTYPE_p_DSP__DFTPlanT_SampleType_t,_proxy__wrap_new_DFTPlan, swig_delete_DFTPlan, swig_DFTPlan_methods, swig_DFTPlan_attributes, &swig_DFTPlan_Sf_SwigStatic, swig_DFTPlan_meta, swig_DFTPlan_bases, swig_DFTPlan_base_names };

static int _wrap_new_DFTRealPlan(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::DFTRealPlan< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::DFTRealPlan< SampleType >::DFTRealPlan",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::DFTRealPlan",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::DFTRealPlan< SampleType > *)new DSP::DFTRealPlan< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__DFTRealPlanT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTRealPlan_dump(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTRealPlan< SampleType > *arg1 = (DSP::DFTRealPlan< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::DFTRealPlan< SampleType >::dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::dump",1,"DSP::DFTRealPlan< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTRealPlanT_SampleType_t,0))){
    SWIG_fail_ptr("DFTRealPlan_dump",1,SWIGTYPE_p_DSP__DFTRealPlanT_SampleType_t);
  }
  
  ((DSP::DFTRealPlan< SampleType > const *)arg1)->dump();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTRealPlan_execute_forward(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTRealPlan< SampleType > *arg1 = (DSP::DFTRealPlan< SampleType > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::DFTRealPlan< SampleType >::execute_forward",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::execute_forward",1,"DSP::DFTRealPlan< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::execute_forward",2,"kfr::univector< kfr::complex< SampleType > > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::execute_forward",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTRealPlanT_SampleType_t,0))){
    SWIG_fail_ptr("DFTRealPlan_execute_forward",1,SWIGTYPE_p_DSP__DFTRealPlanT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("DFTRealPlan_execute_forward",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("DFTRealPlan_execute_forward",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->execute_forward(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DFTRealPlan_execute_reverse(lua_State* L) {
  int SWIG_arg = 0;
  DSP::DFTRealPlan< SampleType > *arg1 = (DSP::DFTRealPlan< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::DFTRealPlan< SampleType >::execute_reverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::execute_reverse",1,"DSP::DFTRealPlan< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::execute_reverse",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::DFTRealPlan< SampleType >::execute_reverse",3,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__DFTRealPlanT_SampleType_t,0))){
    SWIG_fail_ptr("DFTRealPlan_execute_reverse",1,SWIGTYPE_p_DSP__DFTRealPlanT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("DFTRealPlan_execute_reverse",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("DFTRealPlan_execute_reverse",3,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  (arg1)->execute_reverse(*arg2,(kfr::univector< kfr::complex< SampleType > > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DFTRealPlan(void *obj) {
DSP::DFTRealPlan< SampleType > *arg1 = (DSP::DFTRealPlan< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DFTRealPlan(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DFTRealPlan);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DFTRealPlan_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DFTRealPlan_methods[]= {
    { "dump", _wrap_DFTRealPlan_dump},
    { "execute_forward", _wrap_DFTRealPlan_execute_forward},
    { "execute_reverse", _wrap_DFTRealPlan_execute_reverse},
    {0,0}
};
static swig_lua_method swig_DFTRealPlan_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DFTRealPlan_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DFTRealPlan_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DFTRealPlan_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DFTRealPlan_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DFTRealPlan_Sf_SwigStatic = {
    "DFTRealPlan",
    swig_DFTRealPlan_Sf_SwigStatic_methods,
    swig_DFTRealPlan_Sf_SwigStatic_attributes,
    swig_DFTRealPlan_Sf_SwigStatic_constants,
    swig_DFTRealPlan_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DFTRealPlan_bases[] = {0};
static const char *swig_DFTRealPlan_base_names[] = {0};
static swig_lua_class _wrap_class_DFTRealPlan = { "DFTRealPlan", "DFTRealPlan", &SWIGTYPE_p_DSP__DFTRealPlanT_SampleType_t,_proxy__wrap_new_DFTRealPlan, swig_delete_DFTRealPlan, swig_DFTRealPlan_methods, swig_DFTRealPlan_attributes, &swig_DFTRealPlan_Sf_SwigStatic, swig_DFTRealPlan_meta, swig_DFTRealPlan_bases, swig_DFTRealPlan_base_names };

static int _wrap_new_fir_filter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  DSP::FIRFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::FIRFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::FIRFilter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (DSP::FIRFilter< SampleType > *)new DSP::FIRFilter< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_filter_bandpass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  bool arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::bandpass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",4,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_bandpass",1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_filter_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_filter_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_bandpass",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->bandpass(arg2,arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_filter_bandpass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandpass",4,"kfr::expression_pointer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_bandpass",1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_filter_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_filter_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_bandpass",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  (arg1)->bandpass(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_filter_bandpass(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_fir_filter_bandpass__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_fir_filter_bandpass__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_filter_bandpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< SampleType >::bandpass(SampleType,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    DSP::FIRFilter< SampleType >::bandpass(SampleType,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_filter_bandstop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  bool arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::bandstop",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",4,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_bandstop",1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_filter_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_filter_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_bandstop",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->bandstop(arg2,arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_filter_bandstop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::bandstop",4,"kfr::expression_pointer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_bandstop",1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_filter_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_filter_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_bandstop",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  (arg1)->bandstop(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_filter_bandstop(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_fir_filter_bandstop__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_fir_filter_bandstop__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_filter_bandstop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< SampleType >::bandstop(SampleType,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    DSP::FIRFilter< SampleType >::bandstop(SampleType,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_filter_highpass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  bool arg4 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::highpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",3,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_highpass",1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_filter_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_highpass",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->highpass(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_filter_highpass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::highpass",3,"kfr::expression_pointer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_highpass",1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_filter_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_highpass",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  (arg1)->highpass(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_filter_highpass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fir_filter_highpass__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_fir_filter_highpass__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_filter_highpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< SampleType >::highpass(SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    DSP::FIRFilter< SampleType >::highpass(SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_filter_lowpass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  bool arg4 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::lowpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",3,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_lowpass",1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_filter_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_lowpass",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->lowpass(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_filter_lowpass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::lowpass",3,"kfr::expression_pointer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_lowpass",1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_filter_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_lowpass",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  (arg1)->lowpass(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_filter_lowpass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fir_filter_lowpass__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_fir_filter_lowpass__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_filter_lowpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< SampleType >::lowpass(SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    DSP::FIRFilter< SampleType >::lowpass(SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::apply",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_apply",1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::apply",1,"DSP::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::apply",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_apply",1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fir_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fir_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::FIRFilter< SampleType >::apply(kfr::univector< SampleType > &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRFilter< SampleType >::reset",1,"DSP::FIRFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_filter_reset",1,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_fir_filter(void *obj) {
DSP::FIRFilter< SampleType > *arg1 = (DSP::FIRFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_fir_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_fir_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_fir_filter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_fir_filter_methods[]= {
    { "bandpass", _wrap_fir_filter_bandpass},
    { "bandstop", _wrap_fir_filter_bandstop},
    { "highpass", _wrap_fir_filter_highpass},
    { "lowpass", _wrap_fir_filter_lowpass},
    { "apply", _wrap_fir_filter_apply},
    { "reset", _wrap_fir_filter_reset},
    {0,0}
};
static swig_lua_method swig_fir_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_fir_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_fir_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_fir_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_fir_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_fir_filter_Sf_SwigStatic = {
    "fir_filter",
    swig_fir_filter_Sf_SwigStatic_methods,
    swig_fir_filter_Sf_SwigStatic_attributes,
    swig_fir_filter_Sf_SwigStatic_constants,
    swig_fir_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_fir_filter_bases[] = {0};
static const char *swig_fir_filter_base_names[] = {0};
static swig_lua_class _wrap_class_fir_filter = { "fir_filter", "fir_filter", &SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,_proxy__wrap_new_fir_filter, swig_delete_fir_filter, swig_fir_filter_methods, swig_fir_filter_attributes, &swig_fir_filter_Sf_SwigStatic, swig_fir_filter_meta, swig_fir_filter_bases, swig_fir_filter_base_names };

static int _wrap_fir_bandpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< SampleType > *arg1 = (DSP::FIRBandpassFilter< SampleType > *) 0 ;
  DSP::FIRFilter< SampleType > *arg2 = (DSP::FIRFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::filter",1,"DSP::FIRBandpassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::filter",2,"DSP::FIRFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandpass_filter_filter_set",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("fir_bandpass_filter_filter_set",2,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< SampleType > *arg1 = (DSP::FIRBandpassFilter< SampleType > *) 0 ;
  DSP::FIRFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::filter",1,"DSP::FIRBandpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandpass_filter_filter_get",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t);
  }
  
  result = (DSP::FIRFilter< SampleType > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fir_bandpass_filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  bool arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::FIRBandpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",4,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",5,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_fir_bandpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_fir_bandpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_fir_bandpass_filter",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (DSP::FIRBandpassFilter< SampleType > *)new DSP::FIRBandpassFilter< SampleType >(arg1,arg2,arg3,*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fir_bandpass_filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::FIRBandpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter",4,"kfr::expression_pointer< SampleType > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_fir_bandpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_fir_bandpass_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_fir_bandpass_filter",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  result = (DSP::FIRBandpassFilter< SampleType > *)new DSP::FIRBandpassFilter< SampleType >(arg1,arg2,arg3,*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fir_bandpass_filter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_fir_bandpass_filter__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_fir_bandpass_filter__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_fir_bandpass_filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter(size_t,SampleType,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    DSP::FIRBandpassFilter< SampleType >::FIRBandpassFilter(size_t,SampleType,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_bandpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< SampleType > *arg1 = (DSP::FIRBandpassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::apply",1,"DSP::FIRBandpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandpass_filter_apply",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< SampleType > *arg1 = (DSP::FIRBandpassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::apply",1,"DSP::FIRBandpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::apply",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandpass_filter_apply",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fir_bandpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fir_bandpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_bandpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRBandpassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::FIRBandpassFilter< SampleType >::apply(kfr::univector< SampleType > &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_bandpass_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandpassFilter< SampleType > *arg1 = (DSP::FIRBandpassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRBandpassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandpassFilter< SampleType >::reset",1,"DSP::FIRBandpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandpass_filter_reset",1,SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_fir_bandpass_filter(void *obj) {
DSP::FIRBandpassFilter< SampleType > *arg1 = (DSP::FIRBandpassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_fir_bandpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_fir_bandpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_fir_bandpass_filter_attributes[] = {
    { "filter", _wrap_fir_bandpass_filter_filter_get, _wrap_fir_bandpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_fir_bandpass_filter_methods[]= {
    { "apply", _wrap_fir_bandpass_filter_apply},
    { "reset", _wrap_fir_bandpass_filter_reset},
    {0,0}
};
static swig_lua_method swig_fir_bandpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_fir_bandpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_fir_bandpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_fir_bandpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_fir_bandpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_fir_bandpass_filter_Sf_SwigStatic = {
    "fir_bandpass_filter",
    swig_fir_bandpass_filter_Sf_SwigStatic_methods,
    swig_fir_bandpass_filter_Sf_SwigStatic_attributes,
    swig_fir_bandpass_filter_Sf_SwigStatic_constants,
    swig_fir_bandpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_fir_bandpass_filter_bases[] = {0};
static const char *swig_fir_bandpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_fir_bandpass_filter = { "fir_bandpass_filter", "fir_bandpass_filter", &SWIGTYPE_p_DSP__FIRBandpassFilterT_SampleType_t,_proxy__wrap_new_fir_bandpass_filter, swig_delete_fir_bandpass_filter, swig_fir_bandpass_filter_methods, swig_fir_bandpass_filter_attributes, &swig_fir_bandpass_filter_Sf_SwigStatic, swig_fir_bandpass_filter_meta, swig_fir_bandpass_filter_bases, swig_fir_bandpass_filter_base_names };

static int _wrap_fir_lowpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< SampleType > *arg1 = (DSP::FIRLowpassFilter< SampleType > *) 0 ;
  DSP::FIRFilter< SampleType > *arg2 = (DSP::FIRFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::filter",1,"DSP::FIRLowpassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::filter",2,"DSP::FIRFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_lowpass_filter_filter_set",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("fir_lowpass_filter_filter_set",2,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_lowpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< SampleType > *arg1 = (DSP::FIRLowpassFilter< SampleType > *) 0 ;
  DSP::FIRFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::filter",1,"DSP::FIRLowpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_lowpass_filter_filter_get",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t);
  }
  
  result = (DSP::FIRFilter< SampleType > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fir_lowpass_filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  bool arg4 ;
  SampleType *argp2 ;
  DSP::FIRLowpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",3,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",4,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_fir_lowpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_fir_lowpass_filter",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (DSP::FIRLowpassFilter< SampleType > *)new DSP::FIRLowpassFilter< SampleType >(arg1,arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fir_lowpass_filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  SampleType *argp2 ;
  DSP::FIRLowpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter",3,"kfr::expression_pointer< SampleType > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_fir_lowpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_fir_lowpass_filter",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  result = (DSP::FIRLowpassFilter< SampleType > *)new DSP::FIRLowpassFilter< SampleType >(arg1,arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fir_lowpass_filter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_fir_lowpass_filter__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_fir_lowpass_filter__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_fir_lowpass_filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter(size_t,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    DSP::FIRLowpassFilter< SampleType >::FIRLowpassFilter(size_t,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_lowpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< SampleType > *arg1 = (DSP::FIRLowpassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::apply",1,"DSP::FIRLowpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_lowpass_filter_apply",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_lowpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_lowpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< SampleType > *arg1 = (DSP::FIRLowpassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::apply",1,"DSP::FIRLowpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::apply",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_lowpass_filter_apply",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_lowpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_lowpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_lowpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fir_lowpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fir_lowpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_lowpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRLowpassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::FIRLowpassFilter< SampleType >::apply(kfr::univector< SampleType > &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_lowpass_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRLowpassFilter< SampleType > *arg1 = (DSP::FIRLowpassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRLowpassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRLowpassFilter< SampleType >::reset",1,"DSP::FIRLowpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_lowpass_filter_reset",1,SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_fir_lowpass_filter(void *obj) {
DSP::FIRLowpassFilter< SampleType > *arg1 = (DSP::FIRLowpassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_fir_lowpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_fir_lowpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_fir_lowpass_filter_attributes[] = {
    { "filter", _wrap_fir_lowpass_filter_filter_get, _wrap_fir_lowpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_fir_lowpass_filter_methods[]= {
    { "apply", _wrap_fir_lowpass_filter_apply},
    { "reset", _wrap_fir_lowpass_filter_reset},
    {0,0}
};
static swig_lua_method swig_fir_lowpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_fir_lowpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_fir_lowpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_fir_lowpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_fir_lowpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_fir_lowpass_filter_Sf_SwigStatic = {
    "fir_lowpass_filter",
    swig_fir_lowpass_filter_Sf_SwigStatic_methods,
    swig_fir_lowpass_filter_Sf_SwigStatic_attributes,
    swig_fir_lowpass_filter_Sf_SwigStatic_constants,
    swig_fir_lowpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_fir_lowpass_filter_bases[] = {0};
static const char *swig_fir_lowpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_fir_lowpass_filter = { "fir_lowpass_filter", "fir_lowpass_filter", &SWIGTYPE_p_DSP__FIRLowpassFilterT_SampleType_t,_proxy__wrap_new_fir_lowpass_filter, swig_delete_fir_lowpass_filter, swig_fir_lowpass_filter_methods, swig_fir_lowpass_filter_attributes, &swig_fir_lowpass_filter_Sf_SwigStatic, swig_fir_lowpass_filter_meta, swig_fir_lowpass_filter_bases, swig_fir_lowpass_filter_base_names };

static int _wrap_fir_highpass_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< SampleType > *arg1 = (DSP::FIRHighpassFilter< SampleType > *) 0 ;
  DSP::FIRFilter< SampleType > *arg2 = (DSP::FIRFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::filter",1,"DSP::FIRHighpassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::filter",2,"DSP::FIRFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_highpass_filter_filter_set",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("fir_highpass_filter_filter_set",2,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_highpass_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< SampleType > *arg1 = (DSP::FIRHighpassFilter< SampleType > *) 0 ;
  DSP::FIRFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::filter",1,"DSP::FIRHighpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_highpass_filter_filter_get",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t);
  }
  
  result = (DSP::FIRFilter< SampleType > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fir_highpass_filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  bool arg4 ;
  SampleType *argp2 ;
  DSP::FIRHighpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",3,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",4,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_fir_highpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_fir_highpass_filter",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (DSP::FIRHighpassFilter< SampleType > *)new DSP::FIRHighpassFilter< SampleType >(arg1,arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fir_highpass_filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  SampleType *argp2 ;
  DSP::FIRHighpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter",3,"kfr::expression_pointer< SampleType > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_fir_highpass_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_fir_highpass_filter",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  result = (DSP::FIRHighpassFilter< SampleType > *)new DSP::FIRHighpassFilter< SampleType >(arg1,arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fir_highpass_filter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_fir_highpass_filter__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_fir_highpass_filter__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_fir_highpass_filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter(size_t,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    DSP::FIRHighpassFilter< SampleType >::FIRHighpassFilter(size_t,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_highpass_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< SampleType > *arg1 = (DSP::FIRHighpassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::apply",1,"DSP::FIRHighpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_highpass_filter_apply",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_highpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_highpass_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< SampleType > *arg1 = (DSP::FIRHighpassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::apply",1,"DSP::FIRHighpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::apply",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_highpass_filter_apply",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_highpass_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_highpass_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_highpass_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fir_highpass_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fir_highpass_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_highpass_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRHighpassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::FIRHighpassFilter< SampleType >::apply(kfr::univector< SampleType > &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_highpass_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRHighpassFilter< SampleType > *arg1 = (DSP::FIRHighpassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRHighpassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRHighpassFilter< SampleType >::reset",1,"DSP::FIRHighpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_highpass_filter_reset",1,SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_fir_highpass_filter(void *obj) {
DSP::FIRHighpassFilter< SampleType > *arg1 = (DSP::FIRHighpassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_fir_highpass_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_fir_highpass_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_fir_highpass_filter_attributes[] = {
    { "filter", _wrap_fir_highpass_filter_filter_get, _wrap_fir_highpass_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_fir_highpass_filter_methods[]= {
    { "apply", _wrap_fir_highpass_filter_apply},
    { "reset", _wrap_fir_highpass_filter_reset},
    {0,0}
};
static swig_lua_method swig_fir_highpass_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_fir_highpass_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_fir_highpass_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_fir_highpass_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_fir_highpass_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_fir_highpass_filter_Sf_SwigStatic = {
    "fir_highpass_filter",
    swig_fir_highpass_filter_Sf_SwigStatic_methods,
    swig_fir_highpass_filter_Sf_SwigStatic_attributes,
    swig_fir_highpass_filter_Sf_SwigStatic_constants,
    swig_fir_highpass_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_fir_highpass_filter_bases[] = {0};
static const char *swig_fir_highpass_filter_base_names[] = {0};
static swig_lua_class _wrap_class_fir_highpass_filter = { "fir_highpass_filter", "fir_highpass_filter", &SWIGTYPE_p_DSP__FIRHighpassFilterT_SampleType_t,_proxy__wrap_new_fir_highpass_filter, swig_delete_fir_highpass_filter, swig_fir_highpass_filter_methods, swig_fir_highpass_filter_attributes, &swig_fir_highpass_filter_Sf_SwigStatic, swig_fir_highpass_filter_meta, swig_fir_highpass_filter_bases, swig_fir_highpass_filter_base_names };

static int _wrap_fir_bandstop_filter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< SampleType > *arg1 = (DSP::FIRBandstopFilter< SampleType > *) 0 ;
  DSP::FIRFilter< SampleType > *arg2 = (DSP::FIRFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::filter",1,"DSP::FIRBandstopFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::filter",2,"DSP::FIRFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandstop_filter_filter_set",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("fir_bandstop_filter_filter_set",2,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandstop_filter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< SampleType > *arg1 = (DSP::FIRBandstopFilter< SampleType > *) 0 ;
  DSP::FIRFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::filter",1,"DSP::FIRBandstopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandstop_filter_filter_get",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t);
  }
  
  result = (DSP::FIRFilter< SampleType > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fir_bandstop_filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  bool arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::FIRBandstopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",4,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",5,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_fir_bandstop_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_fir_bandstop_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_fir_bandstop_filter",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (DSP::FIRBandstopFilter< SampleType > *)new DSP::FIRBandstopFilter< SampleType >(arg1,arg2,arg3,*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fir_bandstop_filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  DSP::FIRBandstopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter",4,"kfr::expression_pointer< SampleType > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_fir_bandstop_filter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_fir_bandstop_filter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_fir_bandstop_filter",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  result = (DSP::FIRBandstopFilter< SampleType > *)new DSP::FIRBandstopFilter< SampleType >(arg1,arg2,arg3,*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_fir_bandstop_filter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_fir_bandstop_filter__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_fir_bandstop_filter__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_fir_bandstop_filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter(size_t,SampleType,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    DSP::FIRBandstopFilter< SampleType >::FIRBandstopFilter(size_t,SampleType,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_bandstop_filter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< SampleType > *arg1 = (DSP::FIRBandstopFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::apply",1,"DSP::FIRBandstopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandstop_filter_apply",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandstop_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandstop_filter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< SampleType > *arg1 = (DSP::FIRBandstopFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::apply",1,"DSP::FIRBandstopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::apply",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandstop_filter_apply",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandstop_filter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandstop_filter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandstop_filter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_fir_bandstop_filter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_fir_bandstop_filter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_bandstop_filter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::FIRBandstopFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    DSP::FIRBandstopFilter< SampleType >::apply(kfr::univector< SampleType > &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_bandstop_filter_reset(lua_State* L) {
  int SWIG_arg = 0;
  DSP::FIRBandstopFilter< SampleType > *arg1 = (DSP::FIRBandstopFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("DSP::FIRBandstopFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("DSP::FIRBandstopFilter< SampleType >::reset",1,"DSP::FIRBandstopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandstop_filter_reset",1,SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_fir_bandstop_filter(void *obj) {
DSP::FIRBandstopFilter< SampleType > *arg1 = (DSP::FIRBandstopFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_fir_bandstop_filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_fir_bandstop_filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_fir_bandstop_filter_attributes[] = {
    { "filter", _wrap_fir_bandstop_filter_filter_get, _wrap_fir_bandstop_filter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_fir_bandstop_filter_methods[]= {
    { "apply", _wrap_fir_bandstop_filter_apply},
    { "reset", _wrap_fir_bandstop_filter_reset},
    {0,0}
};
static swig_lua_method swig_fir_bandstop_filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_fir_bandstop_filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_fir_bandstop_filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_fir_bandstop_filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_fir_bandstop_filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_fir_bandstop_filter_Sf_SwigStatic = {
    "fir_bandstop_filter",
    swig_fir_bandstop_filter_Sf_SwigStatic_methods,
    swig_fir_bandstop_filter_Sf_SwigStatic_attributes,
    swig_fir_bandstop_filter_Sf_SwigStatic_constants,
    swig_fir_bandstop_filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_fir_bandstop_filter_bases[] = {0};
static const char *swig_fir_bandstop_filter_base_names[] = {0};
static swig_lua_class _wrap_class_fir_bandstop_filter = { "fir_bandstop_filter", "fir_bandstop_filter", &SWIGTYPE_p_DSP__FIRBandstopFilterT_SampleType_t,_proxy__wrap_new_fir_bandstop_filter, swig_delete_fir_bandstop_filter, swig_fir_bandstop_filter_methods, swig_fir_bandstop_filter_attributes, &swig_fir_bandstop_filter_Sf_SwigStatic, swig_fir_bandstop_filter_meta, swig_fir_bandstop_filter_bases, swig_fir_bandstop_filter_base_names };

static int _wrap_fir_lowpass__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  bool arg5 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::fir_lowpass< SampleType >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",4,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_lowpass",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_lowpass",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_lowpass< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2,arg3,*arg4,arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_lowpass__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::fir_lowpass< SampleType >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_lowpass< SampleType >",4,"kfr::expression_pointer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_lowpass",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_lowpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_lowpass",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_lowpass< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2,arg3,*arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_lowpass(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_fir_lowpass__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_fir_lowpass__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_lowpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::fir_lowpass< SampleType >(kfr::univector< SampleType > const &,size_t,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    DSP::fir_lowpass< SampleType >(kfr::univector< SampleType > const &,size_t,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_highpass__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  bool arg5 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::fir_highpass< SampleType >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",4,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_highpass",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_highpass",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_highpass< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2,arg3,*arg4,arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_highpass__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  SampleType *argp3 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::fir_highpass< SampleType >",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_highpass< SampleType >",4,"kfr::expression_pointer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_highpass",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_highpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_highpass",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_highpass< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2,arg3,*arg4);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_highpass(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_fir_highpass__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_fir_highpass__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_highpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::fir_highpass< SampleType >(kfr::univector< SampleType > const &,size_t,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    DSP::fir_highpass< SampleType >(kfr::univector< SampleType > const &,size_t,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_bandpass__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  kfr::expression_pointer< SampleType > *arg5 = 0 ;
  bool arg6 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::fir_bandpass< SampleType >",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",5,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandpass",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_bandpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandpass",5,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_bandpass< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2,arg3,arg4,*arg5,arg6);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandpass__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  kfr::expression_pointer< SampleType > *arg5 = 0 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::fir_bandpass< SampleType >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::fir_bandpass< SampleType >",5,"kfr::expression_pointer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandpass",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_bandpass",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandpass",5,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_bandpass< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2,arg3,arg4,*arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandpass(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_fir_bandpass__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_fir_bandpass__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_bandpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::fir_bandpass< SampleType >(kfr::univector< SampleType > const &,size_t,SampleType,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    DSP::fir_bandpass< SampleType >(kfr::univector< SampleType > const &,size_t,SampleType,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_fir_bandstop__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  kfr::expression_pointer< SampleType > *arg5 = 0 ;
  bool arg6 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::fir_bandstop< SampleType >",6,6)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",5,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandstop",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_bandstop",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandstop",5,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg6 = (lua_toboolean(L, 6)!=0);
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_bandstop< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2,arg3,arg4,*arg5,arg6);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandstop__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  kfr::expression_pointer< SampleType > *arg5 = 0 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("DSP::fir_bandstop< SampleType >",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",1,"kfr::univector< SampleType > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("DSP::fir_bandstop< SampleType >",5,"kfr::expression_pointer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandstop",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("fir_bandstop",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("fir_bandstop",5,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  result = DSP::SWIGTEMPLATEDISAMBIGUATOR fir_bandstop< SampleType >((kfr::univector< SampleType > const &)*arg1,arg2,arg3,arg4,*arg5);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_fir_bandstop(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_fir_bandstop__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_fir_bandstop__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'fir_bandstop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    DSP::fir_bandstop< SampleType >(kfr::univector< SampleType > const &,size_t,SampleType,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    DSP::fir_bandstop< SampleType >(kfr::univector< SampleType > const &,size_t,SampleType,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_samplerate_converter_filter_order(lua_State* L) {
  int SWIG_arg = 0;
  kfr::sample_rate_conversion_quality arg1 ;
  size_t result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::filter_order",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::filter_order",1,"kfr::sample_rate_conversion_quality");
  arg1 = (kfr::sample_rate_conversion_quality)(int)lua_tonumber(L, 1);
  result = kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::SWIGTEMPLATEDISAMBIGUATOR filter_order(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_sidelobe_attenuation(lua_State* L) {
  int SWIG_arg = 0;
  kfr::sample_rate_conversion_quality arg1 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::sidelobe_attenuation",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::sidelobe_attenuation",1,"kfr::sample_rate_conversion_quality");
  arg1 = (kfr::sample_rate_conversion_quality)(int)lua_tonumber(L, 1);
  result = kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::SWIGTEMPLATEDISAMBIGUATOR sidelobe_attenuation(arg1);
  {
    kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype * resultptr = new kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype((const kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_subtypeT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_transition_width(lua_State* L) {
  int SWIG_arg = 0;
  kfr::sample_rate_conversion_quality arg1 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::transition_width",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::transition_width",1,"kfr::sample_rate_conversion_quality");
  arg1 = (kfr::sample_rate_conversion_quality)(int)lua_tonumber(L, 1);
  result = kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::SWIGTEMPLATEDISAMBIGUATOR transition_width(arg1);
  {
    kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype * resultptr = new kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype((const kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_subtypeT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_window_param(lua_State* L) {
  int SWIG_arg = 0;
  kfr::sample_rate_conversion_quality arg1 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::window_param",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::window_param",1,"kfr::sample_rate_conversion_quality");
  arg1 = (kfr::sample_rate_conversion_quality)(int)lua_tonumber(L, 1);
  result = kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::SWIGTEMPLATEDISAMBIGUATOR window_param(arg1);
  {
    kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype * resultptr = new kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype((const kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_subtypeT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_samplerate_converter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::sample_rate_conversion_quality arg1 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg3 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype arg4 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype arg5 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype *argp4 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype *argp5 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",1,"kfr::sample_rate_conversion_quality");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",3,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",4,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",5,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype");
  arg1 = (kfr::sample_rate_conversion_quality)(int)lua_tonumber(L, 1);
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  arg3 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_subtypeT_SampleType_t,0))){
    SWIG_fail_ptr("new_samplerate_converter",4,SWIGTYPE_p_subtypeT_SampleType_t);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_subtypeT_SampleType_t,0))){
    SWIG_fail_ptr("new_samplerate_converter",5,SWIGTYPE_p_subtypeT_SampleType_t);
  }
  arg5 = *argp5;
  
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *)new kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_samplerate_converter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::sample_rate_conversion_quality arg1 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg3 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype arg4 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype *argp4 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",1,"kfr::sample_rate_conversion_quality");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",3,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",4,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype");
  arg1 = (kfr::sample_rate_conversion_quality)(int)lua_tonumber(L, 1);
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  arg3 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_subtypeT_SampleType_t,0))){
    SWIG_fail_ptr("new_samplerate_converter",4,SWIGTYPE_p_subtypeT_SampleType_t);
  }
  arg4 = *argp4;
  
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *)new kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_samplerate_converter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::sample_rate_conversion_quality arg1 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg3 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",1,"kfr::sample_rate_conversion_quality");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter",3,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  arg1 = (kfr::sample_rate_conversion_quality)(int)lua_tonumber(L, 1);
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  arg3 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 3);
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *)new kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_samplerate_converter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_samplerate_converter__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_subtypeT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_samplerate_converter__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_subtypeT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_subtypeT_SampleType_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_samplerate_converter__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_samplerate_converter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter(kfr::sample_rate_conversion_quality,kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype,kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype,kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype,kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype)\n"
    "    kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter(kfr::sample_rate_conversion_quality,kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype,kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype,kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype)\n"
    "    kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::samplerate_converter(kfr::sample_rate_conversion_quality,kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype,kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)\n");
  lua_error(L);return 0;
}


static int _wrap_samplerate_converter_input_position_to_intermediate(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_position_to_intermediate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_position_to_intermediate",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_position_to_intermediate",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_input_position_to_intermediate",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)((kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *)arg1)->input_position_to_intermediate(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_output_position_to_intermediate(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_position_to_intermediate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_position_to_intermediate",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_position_to_intermediate",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_output_position_to_intermediate",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)((kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *)arg1)->output_position_to_intermediate(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_input_position_to_output(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_position_to_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_position_to_output",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_position_to_output",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_input_position_to_output",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)((kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *)arg1)->input_position_to_output(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_output_position_to_input(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_position_to_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_position_to_input",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_position_to_input",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_output_position_to_input",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)((kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *)arg1)->output_position_to_input(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_output_size_for_input(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_size_for_input",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_size_for_input",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_size_for_input",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_output_size_for_input",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)((kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *)arg1)->output_size_for_input(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_input_size_for_output(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_size_for_output",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_size_for_output",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_size_for_output",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_input_size_for_output",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)((kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *)arg1)->input_size_for_output(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_skip(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  size_t arg2 ;
  kfr::univector< SampleType > arg3 ;
  kfr::univector< SampleType > *argp3 ;
  size_t result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::skip",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::skip",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::skip",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::skip",3,"kfr::univector< SampleType >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_skip",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_skip",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->skip(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_process(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::univector< SampleType > arg2 ;
  kfr::univector< SampleType > arg3 ;
  kfr::univector< SampleType > *argp2 ;
  kfr::univector< SampleType > *argp3 ;
  size_t result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::process",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::process",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::process",2,"kfr::univector< SampleType >");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::process",3,"kfr::univector< SampleType >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_process",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_process",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_process",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  arg3 = *argp3;
  
  result = (arg1)->process(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_get_fractional_delay(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  double result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::get_fractional_delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::get_fractional_delay",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_get_fractional_delay",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  result = (double)((kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *)arg1)->get_fractional_delay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_get_delay(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::get_delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::get_delay",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_get_delay",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  result = ((kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > const *)arg1)->get_delay();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_kaiser_beta_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype arg2 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype *argp2 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::kaiser_beta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::kaiser_beta",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::kaiser_beta",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_kaiser_beta_set",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_subtypeT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_kaiser_beta_set",2,SWIGTYPE_p_subtypeT_SampleType_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->kaiser_beta = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_kaiser_beta_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::kaiser_beta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::kaiser_beta",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_kaiser_beta_get",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  result =  ((arg1)->kaiser_beta);
  {
    kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype * resultptr = new kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype((const kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_subtypeT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_depth_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::depth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::depth",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::depth",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_depth_set",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  if (arg1) (arg1)->depth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_depth_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::depth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::depth",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_depth_get",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype) ((arg1)->depth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_taps_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::taps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::taps",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::taps",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_taps_set",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  if (arg1) (arg1)->taps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_taps_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::taps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::taps",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_taps_get",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype) ((arg1)->taps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::order",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_order_set",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::order",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_order_get",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  result =  ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_interpolation_factor_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::interpolation_factor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::interpolation_factor",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::interpolation_factor",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_interpolation_factor_set",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  if (arg1) (arg1)->interpolation_factor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_interpolation_factor_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::interpolation_factor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::interpolation_factor",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_interpolation_factor_get",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype) ((arg1)->interpolation_factor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_decimation_factor_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::decimation_factor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::decimation_factor",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::decimation_factor",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_decimation_factor_set",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  if (arg1) (arg1)->decimation_factor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_decimation_factor_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::decimation_factor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::decimation_factor",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_decimation_factor_get",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype) ((arg1)->decimation_factor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_input_position_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_position",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_position",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_input_position_set",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  if (arg1) (arg1)->input_position = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_input_position_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::input_position",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_input_position_get",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype) ((arg1)->input_position);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_output_position_set(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype arg2 ;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_position",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_position",2,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_output_position_set",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  arg2 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype)lua_tonumber(L, 2);
  if (arg1) (arg1)->output_position = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_samplerate_converter_output_position_get(lua_State* L) {
  int SWIG_arg = 0;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) 0 ;
  kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::output_position",1,"kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,0))){
    SWIG_fail_ptr("samplerate_converter_output_position_get",1,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t);
  }
  
  result = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::itype) ((arg1)->output_position);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_samplerate_converter(void *obj) {
kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *arg1 = (kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_samplerate_converter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_samplerate_converter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_samplerate_converter_attributes[] = {
    { "kaiser_beta", _wrap_samplerate_converter_kaiser_beta_get, _wrap_samplerate_converter_kaiser_beta_set },
    { "depth", _wrap_samplerate_converter_depth_get, _wrap_samplerate_converter_depth_set },
    { "taps", _wrap_samplerate_converter_taps_get, _wrap_samplerate_converter_taps_set },
    { "order", _wrap_samplerate_converter_order_get, _wrap_samplerate_converter_order_set },
    { "interpolation_factor", _wrap_samplerate_converter_interpolation_factor_get, _wrap_samplerate_converter_interpolation_factor_set },
    { "decimation_factor", _wrap_samplerate_converter_decimation_factor_get, _wrap_samplerate_converter_decimation_factor_set },
    { "input_position", _wrap_samplerate_converter_input_position_get, _wrap_samplerate_converter_input_position_set },
    { "output_position", _wrap_samplerate_converter_output_position_get, _wrap_samplerate_converter_output_position_set },
    {0,0,0}
};
static swig_lua_method swig_samplerate_converter_methods[]= {
    { "input_position_to_intermediate", _wrap_samplerate_converter_input_position_to_intermediate},
    { "output_position_to_intermediate", _wrap_samplerate_converter_output_position_to_intermediate},
    { "input_position_to_output", _wrap_samplerate_converter_input_position_to_output},
    { "output_position_to_input", _wrap_samplerate_converter_output_position_to_input},
    { "output_size_for_input", _wrap_samplerate_converter_output_size_for_input},
    { "input_size_for_output", _wrap_samplerate_converter_input_size_for_output},
    { "skip", _wrap_samplerate_converter_skip},
    { "process", _wrap_samplerate_converter_process},
    { "get_fractional_delay", _wrap_samplerate_converter_get_fractional_delay},
    { "get_delay", _wrap_samplerate_converter_get_delay},
    {0,0}
};
static swig_lua_method swig_samplerate_converter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_samplerate_converter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_samplerate_converter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_samplerate_converter_Sf_SwigStatic_methods[]= {
    { "filter_order", _wrap_samplerate_converter_filter_order},
    { "sidelobe_attenuation", _wrap_samplerate_converter_sidelobe_attenuation},
    { "transition_width", _wrap_samplerate_converter_transition_width},
    { "window_param", _wrap_samplerate_converter_window_param},
    {0,0}
};
static swig_lua_class* swig_samplerate_converter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_samplerate_converter_Sf_SwigStatic = {
    "samplerate_converter",
    swig_samplerate_converter_Sf_SwigStatic_methods,
    swig_samplerate_converter_Sf_SwigStatic_attributes,
    swig_samplerate_converter_Sf_SwigStatic_constants,
    swig_samplerate_converter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_samplerate_converter_bases[] = {0};
static const char *swig_samplerate_converter_base_names[] = {0};
static swig_lua_class _wrap_class_samplerate_converter = { "samplerate_converter", "samplerate_converter", &SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,_proxy__wrap_new_samplerate_converter, swig_delete_samplerate_converter, swig_samplerate_converter_methods, swig_samplerate_converter_attributes, &swig_samplerate_converter_Sf_SwigStatic, swig_samplerate_converter_meta, swig_samplerate_converter_bases, swig_samplerate_converter_base_names };

static int _wrap_resampler(lua_State* L) {
  int SWIG_arg = 0;
  kfr::sample_rate_conversion_quality arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  SwigValueWrapper< kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > > result;
  
  SWIG_check_num_args("kfr::CMT_ARCH_NAME::resampler< SampleType >",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::resampler< SampleType >",1,"kfr::sample_rate_conversion_quality");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::resampler< SampleType >",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::resampler< SampleType >",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::resampler< SampleType >",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("kfr::CMT_ARCH_NAME::resampler< SampleType >",5,"SampleType");
  arg1 = (kfr::sample_rate_conversion_quality)(int)lua_tonumber(L, 1);
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("resampler",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("resampler",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  result = kfr::CMT_ARCH_NAME::SWIGTEMPLATEDISAMBIGUATOR resampler< SampleType >(arg1,arg2,arg3,arg4,arg5);
  {
    kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > * resultptr = new kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >((const kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_fft_forward(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< kfr::univector< float > > arg1 ;
  kfr::univector< float > *argp1 ;
  SwigValueWrapper< kfr::univector< kfr::complex< float > > > result;
  
  SWIG_check_num_args("KfrDSP1::audio_fft_forward",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::audio_fft_forward",1,"kfr::univector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_kfr__univectorT_float_t,0))){
    SWIG_fail_ptr("audio_fft_forward",1,SWIGTYPE_p_kfr__univectorT_float_t);
  }
  arg1 = *argp1;
  
  result = KfrDSP1::audio_fft_forward(arg1);
  {
    kfr::univector< kfr::complex< float > > * resultptr = new kfr::univector< kfr::complex< float > >((const kfr::univector< kfr::complex< float > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_fft_inverse(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< kfr::univector< kfr::complex< float > > > arg1 ;
  kfr::univector< kfr::complex< float > > *argp1 ;
  SwigValueWrapper< kfr::univector< float > > result;
  
  SWIG_check_num_args("KfrDSP1::audio_fft_inverse",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::audio_fft_inverse",1,"kfr::univector< kfr::complex< float > >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_float_t_t,0))){
    SWIG_fail_ptr("audio_fft_inverse",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_float_t_t);
  }
  arg1 = *argp1;
  
  result = KfrDSP1::audio_fft_inverse(arg1);
  {
    kfr::univector< float > * resultptr = new kfr::univector< float >((const kfr::univector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_audio_convolve(lua_State* L) {
  int SWIG_arg = 0;
  SwigValueWrapper< kfr::univector< float > > arg1 ;
  size_t arg2 ;
  SwigValueWrapper< kfr::univector< float > > arg3 ;
  kfr::univector< float > *argp1 ;
  kfr::univector< float > *argp3 ;
  SwigValueWrapper< kfr::univector< float > > result;
  
  SWIG_check_num_args("KfrDSP1::audio_convolve",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::audio_convolve",1,"kfr::univector< float >");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::audio_convolve",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::audio_convolve",3,"kfr::univector< float >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_kfr__univectorT_float_t,0))){
    SWIG_fail_ptr("audio_convolve",1,SWIGTYPE_p_kfr__univectorT_float_t);
  }
  arg1 = *argp1;
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_kfr__univectorT_float_t,0))){
    SWIG_fail_ptr("audio_convolve",3,SWIGTYPE_p_kfr__univectorT_float_t);
  }
  arg3 = *argp3;
  
  result = KfrDSP1::audio_convolve(arg1,arg2,arg3);
  {
    kfr::univector< float > * resultptr = new kfr::univector< float >((const kfr::univector< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WhiteNoise(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("KfrDSP1::WhiteNoise",0,0)
  result = (double)KfrDSP1::WhiteNoise();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PinkNoise(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::PinkNoise *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::PinkNoise::PinkNoise",0,0)
  result = (KfrDSP1::PinkNoise *)new KfrDSP1::PinkNoise();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__PinkNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PinkNoise_clear(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::PinkNoise *arg1 = (KfrDSP1::PinkNoise *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::PinkNoise::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::PinkNoise::clear",1,"KfrDSP1::PinkNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__PinkNoise,0))){
    SWIG_fail_ptr("PinkNoise_clear",1,SWIGTYPE_p_KfrDSP1__PinkNoise);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PinkNoise_tick(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::PinkNoise *arg1 = (KfrDSP1::PinkNoise *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::PinkNoise::tick",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::PinkNoise::tick",1,"KfrDSP1::PinkNoise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__PinkNoise,0))){
    SWIG_fail_ptr("PinkNoise_tick",1,SWIGTYPE_p_KfrDSP1__PinkNoise);
  }
  
  result = (double)(arg1)->tick();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PinkNoise(void *obj) {
KfrDSP1::PinkNoise *arg1 = (KfrDSP1::PinkNoise *) obj;
delete arg1;
}
static int _proxy__wrap_new_PinkNoise(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PinkNoise);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PinkNoise_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PinkNoise_methods[]= {
    { "clear", _wrap_PinkNoise_clear},
    { "tick", _wrap_PinkNoise_tick},
    {0,0}
};
static swig_lua_method swig_PinkNoise_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PinkNoise_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PinkNoise_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PinkNoise_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PinkNoise_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PinkNoise_Sf_SwigStatic = {
    "PinkNoise",
    swig_PinkNoise_Sf_SwigStatic_methods,
    swig_PinkNoise_Sf_SwigStatic_attributes,
    swig_PinkNoise_Sf_SwigStatic_constants,
    swig_PinkNoise_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PinkNoise_bases[] = {0};
static const char *swig_PinkNoise_base_names[] = {0};
static swig_lua_class _wrap_class_PinkNoise = { "PinkNoise", "PinkNoise", &SWIGTYPE_p_KfrDSP1__PinkNoise,_proxy__wrap_new_PinkNoise, swig_delete_PinkNoise, swig_PinkNoise_methods, swig_PinkNoise_attributes, &swig_PinkNoise_Sf_SwigStatic, swig_PinkNoise_meta, swig_PinkNoise_bases, swig_PinkNoise_base_names };

static int _wrap_Pink(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Pink",0,0)
  result = (double)KfrDSP1::Pink();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussianWhiteNoise(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("KfrDSP1::GaussianWhiteNoise",0,0)
  result = (double)KfrDSP1::GaussianWhiteNoise();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GaussRand(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::GaussRand",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::GaussRand",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::GaussRand",2,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)KfrDSP1::GaussRand(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PinkingFilter(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::PinkingFilter *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::PinkingFilter::PinkingFilter",0,0)
  result = (KfrDSP1::PinkingFilter *)new KfrDSP1::PinkingFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__PinkingFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PinkingFilter_process(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::PinkingFilter *arg1 = (KfrDSP1::PinkingFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::PinkingFilter::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::PinkingFilter::process",1,"KfrDSP1::PinkingFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::PinkingFilter::process",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__PinkingFilter,0))){
    SWIG_fail_ptr("PinkingFilter_process",1,SWIGTYPE_p_KfrDSP1__PinkingFilter);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (double)(arg1)->process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PinkingFilter(void *obj) {
KfrDSP1::PinkingFilter *arg1 = (KfrDSP1::PinkingFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_PinkingFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PinkingFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PinkingFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PinkingFilter_methods[]= {
    { "process", _wrap_PinkingFilter_process},
    {0,0}
};
static swig_lua_method swig_PinkingFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PinkingFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PinkingFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PinkingFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PinkingFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PinkingFilter_Sf_SwigStatic = {
    "PinkingFilter",
    swig_PinkingFilter_Sf_SwigStatic_methods,
    swig_PinkingFilter_Sf_SwigStatic_attributes,
    swig_PinkingFilter_Sf_SwigStatic_constants,
    swig_PinkingFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PinkingFilter_bases[] = {0};
static const char *swig_PinkingFilter_base_names[] = {0};
static swig_lua_class _wrap_class_PinkingFilter = { "PinkingFilter", "PinkingFilter", &SWIGTYPE_p_KfrDSP1__PinkingFilter,_proxy__wrap_new_PinkingFilter, swig_delete_PinkingFilter, swig_PinkingFilter_methods, swig_PinkingFilter_attributes, &swig_PinkingFilter_Sf_SwigStatic, swig_PinkingFilter_meta, swig_PinkingFilter_bases, swig_PinkingFilter_base_names };

static int _wrap_new_BrowningFilter(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BrowningFilter *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::BrowningFilter::BrowningFilter",0,0)
  result = (KfrDSP1::BrowningFilter *)new KfrDSP1::BrowningFilter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__BrowningFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrowningFilter_process(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BrowningFilter *arg1 = (KfrDSP1::BrowningFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BrowningFilter::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BrowningFilter::process",1,"KfrDSP1::BrowningFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BrowningFilter::process",2,"double const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BrowningFilter,0))){
    SWIG_fail_ptr("BrowningFilter_process",1,SWIGTYPE_p_KfrDSP1__BrowningFilter);
  }
  
  arg2 = (double const)lua_tonumber(L, 2);
  result = (double)(arg1)->process(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BrowningFilter(void *obj) {
KfrDSP1::BrowningFilter *arg1 = (KfrDSP1::BrowningFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BrowningFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BrowningFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BrowningFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BrowningFilter_methods[]= {
    { "process", _wrap_BrowningFilter_process},
    {0,0}
};
static swig_lua_method swig_BrowningFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BrowningFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BrowningFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BrowningFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BrowningFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BrowningFilter_Sf_SwigStatic = {
    "BrowningFilter",
    swig_BrowningFilter_Sf_SwigStatic_methods,
    swig_BrowningFilter_Sf_SwigStatic_attributes,
    swig_BrowningFilter_Sf_SwigStatic_constants,
    swig_BrowningFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BrowningFilter_bases[] = {0};
static const char *swig_BrowningFilter_base_names[] = {0};
static swig_lua_class _wrap_class_BrowningFilter = { "BrowningFilter", "BrowningFilter", &SWIGTYPE_p_KfrDSP1__BrowningFilter,_proxy__wrap_new_BrowningFilter, swig_delete_BrowningFilter, swig_BrowningFilter_methods, swig_BrowningFilter_attributes, &swig_BrowningFilter_Sf_SwigStatic, swig_BrowningFilter_meta, swig_BrowningFilter_bases, swig_BrowningFilter_base_names };

static int _wrap_PinkNoiseGenerator(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("KfrDSP1::PinkNoiseGenerator",0,0)
  result = (double)KfrDSP1::PinkNoiseGenerator();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BrownNoiseGenerator(lua_State* L) {
  int SWIG_arg = 0;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BrownNoiseGenerator",0,0)
  result = (double)KfrDSP1::BrownNoiseGenerator();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_freq_to_midi(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::freq_to_midi",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::freq_to_midi",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)KfrDSP1::freq_to_midi(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_midi_to_freq(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::midi_to_freq",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::midi_to_freq",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)KfrDSP1::midi_to_freq(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_cv_to_freq(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::cv_to_freq",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::cv_to_freq",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (double)KfrDSP1::cv_to_freq(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_semitone(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::semitone",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::semitone",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::semitone",2,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)KfrDSP1::semitone(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::octave",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::octave",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::octave",2,"double");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)KfrDSP1::octave(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::FilterBase::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",1,"KfrDSP1::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Tick",1,SWIGTYPE_p_KfrDSP1__FilterBase);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (double)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::FilterBase::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",1,"KfrDSP1::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Tick",1,SWIGTYPE_p_KfrDSP1__FilterBase);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::FilterBase::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",1,"KfrDSP1::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Tick",1,SWIGTYPE_p_KfrDSP1__FilterBase);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::FilterBase::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",1,"KfrDSP1::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FilterBase::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_Tick",1,SWIGTYPE_p_KfrDSP1__FilterBase);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FilterBase_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FilterBase_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FilterBase_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FilterBase_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FilterBase_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FilterBase::Tick(double,double,double,double)\n"
    "    KfrDSP1::FilterBase::Tick(double,double,double)\n"
    "    KfrDSP1::FilterBase::Tick(double,double)\n"
    "    KfrDSP1::FilterBase::Tick(double)\n");
  lua_error(L);return 0;
}


static int _wrap_FilterBase_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FilterBase::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",1,"KfrDSP1::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",4,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",1,SWIGTYPE_p_KfrDSP1__FilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  float *arg7 = (float *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FilterBase::ProcessBlock",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",1,"KfrDSP1::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",5,"float *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",6,"float *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",7,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",1,SWIGTYPE_p_KfrDSP1__FilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",7,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_ProcessBlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  float *arg6 = (float *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FilterBase::ProcessBlock",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",1,"KfrDSP1::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",5,"float *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",6,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",1,SWIGTYPE_p_KfrDSP1__FilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",6,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_ProcessBlock__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) 0 ;
  size_t arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FilterBase::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",1,"KfrDSP1::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",3,"float *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",1,SWIGTYPE_p_KfrDSP1__FilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_ProcessBlock__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FilterBase::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",1,"KfrDSP1::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",4,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",1,SWIGTYPE_p_KfrDSP1__FilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_ProcessBlock__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FilterBase::ProcessBlock",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",1,"KfrDSP1::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",5,"double *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",6,"double *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",7,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",1,SWIGTYPE_p_KfrDSP1__FilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",6,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",7,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_ProcessBlock__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FilterBase::ProcessBlock",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",1,"KfrDSP1::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",5,"double *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",6,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",1,SWIGTYPE_p_KfrDSP1__FilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",6,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_ProcessBlock__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FilterBase::ProcessBlock",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",1,"KfrDSP1::FilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",3,"double *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",4,"double *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("KfrDSP1::FilterBase::ProcessBlock",5,"double *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FilterBase,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",1,SWIGTYPE_p_KfrDSP1__FilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",3,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("FilterBase_ProcessBlock",5,SWIGTYPE_p_double);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterBase_ProcessBlock(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FilterBase_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FilterBase_ProcessBlock__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FilterBase_ProcessBlock__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FilterBase_ProcessBlock__SWIG_7(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_double, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FilterBase_ProcessBlock__SWIG_6(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FilterBase_ProcessBlock__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_FilterBase_ProcessBlock__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_double, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_double, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_FilterBase_ProcessBlock__SWIG_5(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FilterBase_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FilterBase::ProcessBlock(size_t,float *,float *)\n"
    "    KfrDSP1::FilterBase::ProcessBlock(size_t,float *,float *,float *,float *,float *)\n"
    "    KfrDSP1::FilterBase::ProcessBlock(size_t,float *,float *,float *,float *)\n"
    "    KfrDSP1::FilterBase::ProcessBlock(size_t,float *,float *,float *)\n"
    "    KfrDSP1::FilterBase::ProcessBlock(size_t,double *,double *)\n"
    "    KfrDSP1::FilterBase::ProcessBlock(size_t,double *,double *,double *,double *,double *)\n"
    "    KfrDSP1::FilterBase::ProcessBlock(size_t,double *,double *,double *,double *)\n"
    "    KfrDSP1::FilterBase::ProcessBlock(size_t,double *,double *,double *)\n");
  lua_error(L);return 0;
}


static void swig_delete_FilterBase(void *obj) {
KfrDSP1::FilterBase *arg1 = (KfrDSP1::FilterBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_FilterBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FilterBase_methods[]= {
    { "Tick", _wrap_FilterBase_Tick},
    { "ProcessBlock", _wrap_FilterBase_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_FilterBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilterBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilterBase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilterBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilterBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilterBase_Sf_SwigStatic = {
    "FilterBase",
    swig_FilterBase_Sf_SwigStatic_methods,
    swig_FilterBase_Sf_SwigStatic_attributes,
    swig_FilterBase_Sf_SwigStatic_constants,
    swig_FilterBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilterBase_bases[] = {0};
static const char *swig_FilterBase_base_names[] = {0};
static swig_lua_class _wrap_class_FilterBase = { "FilterBase", "FilterBase", &SWIGTYPE_p_KfrDSP1__FilterBase,0, swig_delete_FilterBase, swig_FilterBase_methods, swig_FilterBase_attributes, &swig_FilterBase_Sf_SwigStatic, swig_FilterBase_meta, swig_FilterBase_bases, swig_FilterBase_base_names };

static int _wrap_Biquad6DB_a_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::a",1,"KfrDSP1::Biquad6DB *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::a",2,"double [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_a_set",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Biquad6DB_a_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->a;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_a_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::a",1,"KfrDSP1::Biquad6DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_a_get",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  result = (double *)(double *) ((arg1)->a);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_b_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::b",1,"KfrDSP1::Biquad6DB *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::b",2,"double [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_b_set",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Biquad6DB_b_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->b;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_b_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::b",1,"KfrDSP1::Biquad6DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_b_get",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  result = (double *)(double *) ((arg1)->b);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::fs",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::fs",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_fs_set",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::fs",1,"KfrDSP1::Biquad6DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_fs_get",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  result = (double) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::fc",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::fc",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_fc_set",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::fc",1,"KfrDSP1::Biquad6DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_fc_get",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  result = (double) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_x1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::x1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::x1",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::x1",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_x1_set",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->x1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_x1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::x1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::x1",1,"KfrDSP1::Biquad6DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_x1_get",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  result = (double) ((arg1)->x1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_x2_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::x2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::x2",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::x2",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_x2_set",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->x2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_x2_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::x2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::x2",1,"KfrDSP1::Biquad6DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_x2_get",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  result = (double) ((arg1)->x2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_y1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::y1",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::y1",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_y1_set",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_y1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::y1",1,"KfrDSP1::Biquad6DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_y1_get",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  result = (double) ((arg1)->y1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_y2_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::y2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::y2",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::y2",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_y2_set",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->y2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_y2_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::y2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::y2",1,"KfrDSP1::Biquad6DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_y2_get",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  result = (double) ((arg1)->y2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_x_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::x",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::x",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_x_set",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_x_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::x",1,"KfrDSP1::Biquad6DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_x_get",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  result = (double) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_y_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::y",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::y",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_y_set",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_y_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::y",1,"KfrDSP1::Biquad6DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_y_get",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  result = (double) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_filterType_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  KfrDSP1::FilterType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::filterType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::filterType",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::filterType",2,"KfrDSP1::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_filterType_set",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_filterType_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  KfrDSP1::FilterType result;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::filterType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::filterType",1,"KfrDSP1::Biquad6DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_filterType_get",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  result = (KfrDSP1::FilterType) ((arg1)->filterType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_setFilter(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  KfrDSP1::FilterType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::setFilter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::setFilter",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::setFilter",2,"KfrDSP1::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_setFilter",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  (arg1)->setFilter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::setCutoff",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::setCutoff",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_setCutoff",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_setQ(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::setQ",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::setQ",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_setQ",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::lowpass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::lowpass",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::lowpass",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_lowpass",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->lowpass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_highpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::highpass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::highpass",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::highpass",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_highpass",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->highpass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_allpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::allpass",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::allpass",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::allpass",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_allpass",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->allpass(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad6DB_Tick(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad6DB::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad6DB::Tick",1,"KfrDSP1::Biquad6DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad6DB::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad6DB,0))){
    SWIG_fail_ptr("Biquad6DB_Tick",1,SWIGTYPE_p_KfrDSP1__Biquad6DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Biquad6DB(void *obj) {
KfrDSP1::Biquad6DB *arg1 = (KfrDSP1::Biquad6DB *) obj;
delete arg1;
}
static swig_lua_attribute swig_Biquad6DB_attributes[] = {
    { "a", _wrap_Biquad6DB_a_get, _wrap_Biquad6DB_a_set },
    { "b", _wrap_Biquad6DB_b_get, _wrap_Biquad6DB_b_set },
    { "fs", _wrap_Biquad6DB_fs_get, _wrap_Biquad6DB_fs_set },
    { "fc", _wrap_Biquad6DB_fc_get, _wrap_Biquad6DB_fc_set },
    { "x1", _wrap_Biquad6DB_x1_get, _wrap_Biquad6DB_x1_set },
    { "x2", _wrap_Biquad6DB_x2_get, _wrap_Biquad6DB_x2_set },
    { "y1", _wrap_Biquad6DB_y1_get, _wrap_Biquad6DB_y1_set },
    { "y2", _wrap_Biquad6DB_y2_get, _wrap_Biquad6DB_y2_set },
    { "x", _wrap_Biquad6DB_x_get, _wrap_Biquad6DB_x_set },
    { "y", _wrap_Biquad6DB_y_get, _wrap_Biquad6DB_y_set },
    { "filterType", _wrap_Biquad6DB_filterType_get, _wrap_Biquad6DB_filterType_set },
    {0,0,0}
};
static swig_lua_method swig_Biquad6DB_methods[]= {
    { "setFilter", _wrap_Biquad6DB_setFilter},
    { "setCutoff", _wrap_Biquad6DB_setCutoff},
    { "setQ", _wrap_Biquad6DB_setQ},
    { "lowpass", _wrap_Biquad6DB_lowpass},
    { "highpass", _wrap_Biquad6DB_highpass},
    { "allpass", _wrap_Biquad6DB_allpass},
    { "Tick", _wrap_Biquad6DB_Tick},
    {0,0}
};
static swig_lua_method swig_Biquad6DB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Biquad6DB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Biquad6DB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Biquad6DB_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Biquad6DB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Biquad6DB_Sf_SwigStatic = {
    "Biquad6DB",
    swig_Biquad6DB_Sf_SwigStatic_methods,
    swig_Biquad6DB_Sf_SwigStatic_attributes,
    swig_Biquad6DB_Sf_SwigStatic_constants,
    swig_Biquad6DB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Biquad6DB_bases[] = {0,0};
static const char *swig_Biquad6DB_base_names[] = {"KfrDSP1::FilterBase *",0};
static swig_lua_class _wrap_class_Biquad6DB = { "Biquad6DB", "Biquad6DB", &SWIGTYPE_p_KfrDSP1__Biquad6DB,0, swig_delete_Biquad6DB, swig_Biquad6DB_methods, swig_Biquad6DB_attributes, &swig_Biquad6DB_Sf_SwigStatic, swig_Biquad6DB_meta, swig_Biquad6DB_bases, swig_Biquad6DB_base_names };

static int _wrap_Biquad12DB_a_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::a",1,"KfrDSP1::Biquad12DB *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::a",2,"double [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_a_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Biquad12DB_a_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->a;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_a_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::a",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_a_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (double *)(double *) ((arg1)->a);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_b_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::b",1,"KfrDSP1::Biquad12DB *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::b",2,"double [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_b_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Biquad12DB_b_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->b;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_b_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::b",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_b_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (double *)(double *) ((arg1)->b);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::fs",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::fs",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_fs_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::fs",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_fs_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (double) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::fc",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::fc",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_fc_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::fc",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_fc_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (double) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_q_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::q",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::q",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_q_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_q_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::q",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_q_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (double) ((arg1)->q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_g_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::g",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::g",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_g_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_g_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::g",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_g_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (double) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_x1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::x1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::x1",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::x1",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_x1_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->x1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_x1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::x1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::x1",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_x1_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (double) ((arg1)->x1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_x2_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::x2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::x2",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::x2",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_x2_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->x2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_x2_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::x2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::x2",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_x2_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (double) ((arg1)->x2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_y1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::y1",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::y1",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_y1_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_y1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::y1",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_y1_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (double) ((arg1)->y1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_y2_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::y2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::y2",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::y2",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_y2_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->y2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_y2_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::y2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::y2",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_y2_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (double) ((arg1)->y2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_x_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::x",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::x",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_x_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_x_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::x",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_x_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (double) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_y_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::y",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::y",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_y_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_y_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::y",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_y_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (double) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_filterType_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  KfrDSP1::FilterType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::filterType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::filterType",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::filterType",2,"KfrDSP1::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_filterType_set",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_filterType_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  KfrDSP1::FilterType result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::filterType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::filterType",1,"KfrDSP1::Biquad12DB *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_filterType_get",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  result = (KfrDSP1::FilterType) ((arg1)->filterType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad12DB__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::Biquad12DB",0,0)
  result = (KfrDSP1::Biquad12DB *)new KfrDSP1::Biquad12DB();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__Biquad12DB,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad12DB__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterType arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  KfrDSP1::Biquad12DB *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::Biquad12DB",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",1,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",5,"double");
  arg1 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (KfrDSP1::Biquad12DB *)new KfrDSP1::Biquad12DB(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__Biquad12DB,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad12DB__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterType arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  KfrDSP1::Biquad12DB *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::Biquad12DB",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",1,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",4,"double");
  arg1 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (KfrDSP1::Biquad12DB *)new KfrDSP1::Biquad12DB(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__Biquad12DB,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad12DB__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterType arg1 ;
  double arg2 ;
  double arg3 ;
  KfrDSP1::Biquad12DB *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::Biquad12DB",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",1,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",3,"double");
  arg1 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (KfrDSP1::Biquad12DB *)new KfrDSP1::Biquad12DB(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__Biquad12DB,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad12DB__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  KfrDSP1::Biquad12DB *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::Biquad12DB",5,5)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",1,"kfr::biquad_params< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_double_t,0))){
    SWIG_fail_ptr("new_Biquad12DB",1,SWIGTYPE_p_kfr__biquad_paramsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (KfrDSP1::Biquad12DB *)new KfrDSP1::Biquad12DB((kfr::biquad_params< double > const &)*arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__Biquad12DB,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad12DB__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  KfrDSP1::Biquad12DB *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::Biquad12DB",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",1,"kfr::biquad_params< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_double_t,0))){
    SWIG_fail_ptr("new_Biquad12DB",1,SWIGTYPE_p_kfr__biquad_paramsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (KfrDSP1::Biquad12DB *)new KfrDSP1::Biquad12DB((kfr::biquad_params< double > const &)*arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__Biquad12DB,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad12DB__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  kfr::biquad_params< double > *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  KfrDSP1::Biquad12DB *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::Biquad12DB",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",1,"kfr::biquad_params< double > const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Biquad12DB",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__biquad_paramsT_double_t,0))){
    SWIG_fail_ptr("new_Biquad12DB",1,SWIGTYPE_p_kfr__biquad_paramsT_double_t);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (KfrDSP1::Biquad12DB *)new KfrDSP1::Biquad12DB((kfr::biquad_params< double > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__Biquad12DB,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Biquad12DB(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Biquad12DB__SWIG_0(L);
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Biquad12DB__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Biquad12DB__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Biquad12DB__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Biquad12DB__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__biquad_paramsT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Biquad12DB__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Biquad12DB__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Biquad12DB'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::Biquad12DB::Biquad12DB()\n"
    "    KfrDSP1::Biquad12DB::Biquad12DB(KfrDSP1::FilterType,double,double,double,double)\n"
    "    KfrDSP1::Biquad12DB::Biquad12DB(KfrDSP1::FilterType,double,double,double)\n"
    "    KfrDSP1::Biquad12DB::Biquad12DB(KfrDSP1::FilterType,double,double)\n"
    "    KfrDSP1::Biquad12DB::Biquad12DB(kfr::biquad_params< double > const &,double,double,double,double)\n"
    "    KfrDSP1::Biquad12DB::Biquad12DB(kfr::biquad_params< double > const &,double,double,double)\n"
    "    KfrDSP1::Biquad12DB::Biquad12DB(kfr::biquad_params< double > const &,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad12DB_init_filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  KfrDSP1::FilterType arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::init_filter",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",2,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",6,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_init_filter",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6);
  (arg1)->init_filter(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_init_filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  KfrDSP1::FilterType arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::init_filter",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",2,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_init_filter",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  (arg1)->init_filter(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_init_filter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  KfrDSP1::FilterType arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::init_filter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",2,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_init_filter",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->init_filter(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_init_filter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  KfrDSP1::FilterType arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::init_filter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",2,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::init_filter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_init_filter",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->init_filter(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_init_filter(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Biquad12DB, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Biquad12DB_init_filter__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Biquad12DB, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Biquad12DB_init_filter__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Biquad12DB, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Biquad12DB_init_filter__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Biquad12DB, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Biquad12DB_init_filter__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad12DB_init_filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::Biquad12DB::init_filter(KfrDSP1::FilterType,double,double,double,double)\n"
    "    KfrDSP1::Biquad12DB::init_filter(KfrDSP1::FilterType,double,double,double)\n"
    "    KfrDSP1::Biquad12DB::init_filter(KfrDSP1::FilterType,double,double)\n"
    "    KfrDSP1::Biquad12DB::init_filter(KfrDSP1::FilterType,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Biquad12DB_setCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  SwigValueWrapper< kfr::biquad_params< double > > arg2 ;
  kfr::biquad_params< double > *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::setCoefficients",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::setCoefficients",2,"kfr::biquad_params< double >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_setCoefficients",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_kfr__biquad_paramsT_double_t,0))){
    SWIG_fail_ptr("Biquad12DB_setCoefficients",2,SWIGTYPE_p_kfr__biquad_paramsT_double_t);
  }
  arg2 = *argp2;
  
  (arg1)->setCoefficients(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::setCutoff",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::setCutoff",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_setCutoff",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_setQ(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::setQ",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::setQ",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_setQ",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_setGain(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::setGain",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::setGain",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_setGain",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_setSampleRate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::setSampleRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::setSampleRate",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::setSampleRate",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_setSampleRate",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setSampleRate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_setType(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  KfrDSP1::FilterType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::setType",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::setType",2,"KfrDSP1::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_setType",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_notch(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::notch",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::notch",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::notch",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_notch",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->notch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::lowpass",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_lowpass",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_allpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::allpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::allpass",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::allpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::allpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_allpass",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->allpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_highpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::highpass",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_highpass",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_peak(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::peak",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::peak",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::peak",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::peak",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Biquad12DB::peak",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_peak",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->peak(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_lowshelf(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::lowshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::lowshelf",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::lowshelf",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::lowshelf",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_lowshelf",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_highshelf(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::highshelf",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::highshelf",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::highshelf",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::highshelf",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_highshelf",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highshelf(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::bandpass",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::bandpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_bandpass",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->bandpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_Tick",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (double)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_Tick",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_Tick",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Biquad12DB::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",1,"KfrDSP1::Biquad12DB *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Biquad12DB::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Biquad12DB,0))){
    SWIG_fail_ptr("Biquad12DB_Tick",1,SWIGTYPE_p_KfrDSP1__Biquad12DB);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Biquad12DB_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Biquad12DB, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Biquad12DB_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Biquad12DB, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Biquad12DB_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Biquad12DB, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Biquad12DB_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Biquad12DB, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Biquad12DB_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Biquad12DB_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::Biquad12DB::Tick(double,double,double,double)\n"
    "    KfrDSP1::Biquad12DB::Tick(double,double,double)\n"
    "    KfrDSP1::Biquad12DB::Tick(double,double)\n"
    "    KfrDSP1::Biquad12DB::Tick(double)\n");
  lua_error(L);return 0;
}


static void swig_delete_Biquad12DB(void *obj) {
KfrDSP1::Biquad12DB *arg1 = (KfrDSP1::Biquad12DB *) obj;
delete arg1;
}
static int _proxy__wrap_new_Biquad12DB(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Biquad12DB);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Biquad12DB_attributes[] = {
    { "a", _wrap_Biquad12DB_a_get, _wrap_Biquad12DB_a_set },
    { "b", _wrap_Biquad12DB_b_get, _wrap_Biquad12DB_b_set },
    { "fs", _wrap_Biquad12DB_fs_get, _wrap_Biquad12DB_fs_set },
    { "fc", _wrap_Biquad12DB_fc_get, _wrap_Biquad12DB_fc_set },
    { "q", _wrap_Biquad12DB_q_get, _wrap_Biquad12DB_q_set },
    { "g", _wrap_Biquad12DB_g_get, _wrap_Biquad12DB_g_set },
    { "x1", _wrap_Biquad12DB_x1_get, _wrap_Biquad12DB_x1_set },
    { "x2", _wrap_Biquad12DB_x2_get, _wrap_Biquad12DB_x2_set },
    { "y1", _wrap_Biquad12DB_y1_get, _wrap_Biquad12DB_y1_set },
    { "y2", _wrap_Biquad12DB_y2_get, _wrap_Biquad12DB_y2_set },
    { "x", _wrap_Biquad12DB_x_get, _wrap_Biquad12DB_x_set },
    { "y", _wrap_Biquad12DB_y_get, _wrap_Biquad12DB_y_set },
    { "filterType", _wrap_Biquad12DB_filterType_get, _wrap_Biquad12DB_filterType_set },
    {0,0,0}
};
static swig_lua_method swig_Biquad12DB_methods[]= {
    { "init_filter", _wrap_Biquad12DB_init_filter},
    { "setCoefficients", _wrap_Biquad12DB_setCoefficients},
    { "setCutoff", _wrap_Biquad12DB_setCutoff},
    { "setQ", _wrap_Biquad12DB_setQ},
    { "setGain", _wrap_Biquad12DB_setGain},
    { "setSampleRate", _wrap_Biquad12DB_setSampleRate},
    { "setType", _wrap_Biquad12DB_setType},
    { "notch", _wrap_Biquad12DB_notch},
    { "lowpass", _wrap_Biquad12DB_lowpass},
    { "allpass", _wrap_Biquad12DB_allpass},
    { "highpass", _wrap_Biquad12DB_highpass},
    { "peak", _wrap_Biquad12DB_peak},
    { "lowshelf", _wrap_Biquad12DB_lowshelf},
    { "highshelf", _wrap_Biquad12DB_highshelf},
    { "bandpass", _wrap_Biquad12DB_bandpass},
    { "Tick", _wrap_Biquad12DB_Tick},
    {0,0}
};
static swig_lua_method swig_Biquad12DB_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Biquad12DB_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Biquad12DB_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Biquad12DB_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Biquad12DB_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Biquad12DB_Sf_SwigStatic = {
    "Biquad12DB",
    swig_Biquad12DB_Sf_SwigStatic_methods,
    swig_Biquad12DB_Sf_SwigStatic_attributes,
    swig_Biquad12DB_Sf_SwigStatic_constants,
    swig_Biquad12DB_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Biquad12DB_bases[] = {0,0};
static const char *swig_Biquad12DB_base_names[] = {"KfrDSP1::FilterBase *",0};
static swig_lua_class _wrap_class_Biquad12DB = { "Biquad12DB", "Biquad12DB", &SWIGTYPE_p_KfrDSP1__Biquad12DB,_proxy__wrap_new_Biquad12DB, swig_delete_Biquad12DB, swig_Biquad12DB_methods, swig_Biquad12DB_attributes, &swig_Biquad12DB_Sf_SwigStatic, swig_Biquad12DB_meta, swig_Biquad12DB_bases, swig_Biquad12DB_base_names };

static int _wrap_BiquadCascade_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BiquadCascade *arg1 = (KfrDSP1::BiquadCascade *) 0 ;
  std::vector< KfrDSP1::Biquad12DB > *arg2 = (std::vector< KfrDSP1::Biquad12DB > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::biquads",1,"KfrDSP1::BiquadCascade *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::biquads",2,"std::vector< KfrDSP1::Biquad12DB > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BiquadCascade,0))){
    SWIG_fail_ptr("BiquadCascade_biquads_set",1,SWIGTYPE_p_KfrDSP1__BiquadCascade);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_t,0))){
    SWIG_fail_ptr("BiquadCascade_biquads_set",2,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_t);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadCascade_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BiquadCascade *arg1 = (KfrDSP1::BiquadCascade *) 0 ;
  std::vector< KfrDSP1::Biquad12DB > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::biquads",1,"KfrDSP1::BiquadCascade *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BiquadCascade,0))){
    SWIG_fail_ptr("BiquadCascade_biquads_get",1,SWIGTYPE_p_KfrDSP1__BiquadCascade);
  }
  
  result = (std::vector< KfrDSP1::Biquad12DB > *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadCascade__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  KfrDSP1::FilterType arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  KfrDSP1::BiquadCascade *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::BiquadCascade",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",2,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",5,"double");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",6,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (double)lua_tonumber(L, 6);
  result = (KfrDSP1::BiquadCascade *)new KfrDSP1::BiquadCascade(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__BiquadCascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadCascade__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  KfrDSP1::FilterType arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  KfrDSP1::BiquadCascade *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::BiquadCascade",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",2,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",5,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (KfrDSP1::BiquadCascade *)new KfrDSP1::BiquadCascade(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__BiquadCascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadCascade__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  KfrDSP1::FilterType arg2 ;
  double arg3 ;
  double arg4 ;
  KfrDSP1::BiquadCascade *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::BiquadCascade",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",2,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",4,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (KfrDSP1::BiquadCascade *)new KfrDSP1::BiquadCascade(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__BiquadCascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadCascade__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  KfrDSP1::FilterType arg2 ;
  double arg3 ;
  KfrDSP1::BiquadCascade *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::BiquadCascade",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",2,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",3,"double");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (KfrDSP1::BiquadCascade *)new KfrDSP1::BiquadCascade(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__BiquadCascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadCascade__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  KfrDSP1::FilterType arg2 ;
  KfrDSP1::BiquadCascade *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::BiquadCascade",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",2,"KfrDSP1::FilterType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  result = (KfrDSP1::BiquadCascade *)new KfrDSP1::BiquadCascade(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__BiquadCascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadCascade__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  KfrDSP1::BiquadCascade *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::BiquadCascade",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::BiquadCascade",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (KfrDSP1::BiquadCascade *)new KfrDSP1::BiquadCascade(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__BiquadCascade,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadCascade(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BiquadCascade__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BiquadCascade__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_BiquadCascade__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_BiquadCascade__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_BiquadCascade__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_BiquadCascade__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadCascade'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::BiquadCascade::BiquadCascade(size_t,KfrDSP1::FilterType,double,double,double,double)\n"
    "    KfrDSP1::BiquadCascade::BiquadCascade(size_t,KfrDSP1::FilterType,double,double,double)\n"
    "    KfrDSP1::BiquadCascade::BiquadCascade(size_t,KfrDSP1::FilterType,double,double)\n"
    "    KfrDSP1::BiquadCascade::BiquadCascade(size_t,KfrDSP1::FilterType,double)\n"
    "    KfrDSP1::BiquadCascade::BiquadCascade(size_t,KfrDSP1::FilterType)\n"
    "    KfrDSP1::BiquadCascade::BiquadCascade(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadCascade_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BiquadCascade *arg1 = (KfrDSP1::BiquadCascade *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::setCutoff",1,"KfrDSP1::BiquadCascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::setCutoff",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BiquadCascade,0))){
    SWIG_fail_ptr("BiquadCascade_setCutoff",1,SWIGTYPE_p_KfrDSP1__BiquadCascade);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadCascade_setQ(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BiquadCascade *arg1 = (KfrDSP1::BiquadCascade *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::setQ",1,"KfrDSP1::BiquadCascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::setQ",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BiquadCascade,0))){
    SWIG_fail_ptr("BiquadCascade_setQ",1,SWIGTYPE_p_KfrDSP1__BiquadCascade);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadCascade_setGain(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BiquadCascade *arg1 = (KfrDSP1::BiquadCascade *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::setGain",1,"KfrDSP1::BiquadCascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::setGain",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BiquadCascade,0))){
    SWIG_fail_ptr("BiquadCascade_setGain",1,SWIGTYPE_p_KfrDSP1__BiquadCascade);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadCascade_setType(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BiquadCascade *arg1 = (KfrDSP1::BiquadCascade *) 0 ;
  KfrDSP1::FilterType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::setType",1,"KfrDSP1::BiquadCascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::setType",2,"KfrDSP1::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BiquadCascade,0))){
    SWIG_fail_ptr("BiquadCascade_setType",1,SWIGTYPE_p_KfrDSP1__BiquadCascade);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadCascade_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BiquadCascade *arg1 = (KfrDSP1::BiquadCascade *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",1,"KfrDSP1::BiquadCascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BiquadCascade,0))){
    SWIG_fail_ptr("BiquadCascade_Tick",1,SWIGTYPE_p_KfrDSP1__BiquadCascade);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (double)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadCascade_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BiquadCascade *arg1 = (KfrDSP1::BiquadCascade *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",1,"KfrDSP1::BiquadCascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BiquadCascade,0))){
    SWIG_fail_ptr("BiquadCascade_Tick",1,SWIGTYPE_p_KfrDSP1__BiquadCascade);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadCascade_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BiquadCascade *arg1 = (KfrDSP1::BiquadCascade *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",1,"KfrDSP1::BiquadCascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BiquadCascade,0))){
    SWIG_fail_ptr("BiquadCascade_Tick",1,SWIGTYPE_p_KfrDSP1__BiquadCascade);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadCascade_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BiquadCascade *arg1 = (KfrDSP1::BiquadCascade *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BiquadCascade::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",1,"KfrDSP1::BiquadCascade *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BiquadCascade::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BiquadCascade,0))){
    SWIG_fail_ptr("BiquadCascade_Tick",1,SWIGTYPE_p_KfrDSP1__BiquadCascade);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadCascade_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__BiquadCascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadCascade_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__BiquadCascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadCascade_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__BiquadCascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadCascade_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__BiquadCascade, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadCascade_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadCascade_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::BiquadCascade::Tick(double,double,double,double)\n"
    "    KfrDSP1::BiquadCascade::Tick(double,double,double)\n"
    "    KfrDSP1::BiquadCascade::Tick(double,double)\n"
    "    KfrDSP1::BiquadCascade::Tick(double)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadCascade(void *obj) {
KfrDSP1::BiquadCascade *arg1 = (KfrDSP1::BiquadCascade *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadCascade(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadCascade);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadCascade_attributes[] = {
    { "biquads", _wrap_BiquadCascade_biquads_get, _wrap_BiquadCascade_biquads_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadCascade_methods[]= {
    { "setCutoff", _wrap_BiquadCascade_setCutoff},
    { "setQ", _wrap_BiquadCascade_setQ},
    { "setGain", _wrap_BiquadCascade_setGain},
    { "setType", _wrap_BiquadCascade_setType},
    { "Tick", _wrap_BiquadCascade_Tick},
    {0,0}
};
static swig_lua_method swig_BiquadCascade_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadCascade_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadCascade_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadCascade_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadCascade_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadCascade_Sf_SwigStatic = {
    "BiquadCascade",
    swig_BiquadCascade_Sf_SwigStatic_methods,
    swig_BiquadCascade_Sf_SwigStatic_attributes,
    swig_BiquadCascade_Sf_SwigStatic_constants,
    swig_BiquadCascade_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadCascade_bases[] = {0,0};
static const char *swig_BiquadCascade_base_names[] = {"KfrDSP1::FilterBase *",0};
static swig_lua_class _wrap_class_BiquadCascade = { "BiquadCascade", "BiquadCascade", &SWIGTYPE_p_KfrDSP1__BiquadCascade,_proxy__wrap_new_BiquadCascade, swig_delete_BiquadCascade, swig_BiquadCascade_methods, swig_BiquadCascade_attributes, &swig_BiquadCascade_Sf_SwigStatic, swig_BiquadCascade_meta, swig_BiquadCascade_bases, swig_BiquadCascade_base_names };

static int _wrap_RbjFilter_filter_type_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  KfrDSP1::RbjFilter::FilterType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::filter_type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::filter_type",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::filter_type",2,"KfrDSP1::RbjFilter::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_filter_type_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (KfrDSP1::RbjFilter::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filter_type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_filter_type_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  KfrDSP1::RbjFilter::FilterType result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::filter_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::filter_type",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_filter_type_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (KfrDSP1::RbjFilter::FilterType) ((arg1)->filter_type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_freq_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::freq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::freq",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::freq",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_freq_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_freq_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::freq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::freq",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_freq_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->freq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_sr_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::sr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::sr",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::sr",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_sr_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->sr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_sr_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::sr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::sr",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_sr_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->sr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::Q",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::Q",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_Q_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::Q",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_Q_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_dbGain_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::dbGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::dbGain",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::dbGain",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_dbGain_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->dbGain = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_dbGain_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::dbGain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::dbGain",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_dbGain_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->dbGain);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_bandwidth_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::bandwidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::bandwidth",1,"KfrDSP1::RbjFilter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::bandwidth",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_bandwidth_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->bandwidth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_bandwidth_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  bool result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::bandwidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::bandwidth",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_bandwidth_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (bool) ((arg1)->bandwidth);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_b0a0_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::b0a0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::b0a0",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::b0a0",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_b0a0_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->b0a0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_b0a0_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::b0a0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::b0a0",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_b0a0_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->b0a0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_b1a0_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::b1a0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::b1a0",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::b1a0",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_b1a0_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->b1a0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_b1a0_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::b1a0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::b1a0",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_b1a0_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->b1a0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_b2a0_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::b2a0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::b2a0",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::b2a0",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_b2a0_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->b2a0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_b2a0_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::b2a0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::b2a0",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_b2a0_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->b2a0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_a1a0_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::a1a0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::a1a0",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::a1a0",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_a1a0_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->a1a0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_a1a0_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::a1a0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::a1a0",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_a1a0_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->a1a0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_a2a0_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::a2a0",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::a2a0",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::a2a0",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_a2a0_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->a2a0 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_a2a0_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::a2a0",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::a2a0",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_a2a0_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->a2a0);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_ou1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::ou1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::ou1",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::ou1",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_ou1_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->ou1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_ou1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::ou1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::ou1",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_ou1_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->ou1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_ou2_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::ou2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::ou2",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::ou2",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_ou2_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->ou2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_ou2_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::ou2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::ou2",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_ou2_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->ou2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_in1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::in1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::in1",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::in1",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_in1_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->in1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_in1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::in1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::in1",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_in1_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->in1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_in2_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::in2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::in2",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::in2",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_in2_set",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->in2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_in2_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::in2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::in2",1,"KfrDSP1::RbjFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_in2_get",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  result = (double) ((arg1)->in2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RbjFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter::FilterType arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  KfrDSP1::RbjFilter *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::RbjFilter",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",1,"KfrDSP1::RbjFilter::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",5,"double");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",6,"bool");
  arg1 = (KfrDSP1::RbjFilter::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = (KfrDSP1::RbjFilter *)new KfrDSP1::RbjFilter(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__RbjFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RbjFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter::FilterType arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  KfrDSP1::RbjFilter *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::RbjFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",1,"KfrDSP1::RbjFilter::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",5,"double");
  arg1 = (KfrDSP1::RbjFilter::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (KfrDSP1::RbjFilter *)new KfrDSP1::RbjFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__RbjFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RbjFilter__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter::FilterType arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  KfrDSP1::RbjFilter *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::RbjFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",1,"KfrDSP1::RbjFilter::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",4,"double");
  arg1 = (KfrDSP1::RbjFilter::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (KfrDSP1::RbjFilter *)new KfrDSP1::RbjFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__RbjFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RbjFilter__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter::FilterType arg1 ;
  double arg2 ;
  double arg3 ;
  KfrDSP1::RbjFilter *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::RbjFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",1,"KfrDSP1::RbjFilter::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::RbjFilter::RbjFilter",3,"double");
  arg1 = (KfrDSP1::RbjFilter::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (KfrDSP1::RbjFilter *)new KfrDSP1::RbjFilter(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__RbjFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RbjFilter(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_RbjFilter__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RbjFilter__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_RbjFilter__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_RbjFilter__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RbjFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::RbjFilter::RbjFilter(KfrDSP1::RbjFilter::FilterType,double,double,double,double,bool)\n"
    "    KfrDSP1::RbjFilter::RbjFilter(KfrDSP1::RbjFilter::FilterType,double,double,double,double)\n"
    "    KfrDSP1::RbjFilter::RbjFilter(KfrDSP1::RbjFilter::FilterType,double,double,double)\n"
    "    KfrDSP1::RbjFilter::RbjFilter(KfrDSP1::RbjFilter::FilterType,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_RbjFilter_filter(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::filter",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::filter",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_filter",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->filter(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_Tick",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (double)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_Tick",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_Tick",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_Tick",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RbjFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__RbjFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RbjFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__RbjFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RbjFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__RbjFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_RbjFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__RbjFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_RbjFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RbjFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::RbjFilter::Tick(double,double,double,double)\n"
    "    KfrDSP1::RbjFilter::Tick(double,double,double)\n"
    "    KfrDSP1::RbjFilter::Tick(double,double)\n"
    "    KfrDSP1::RbjFilter::Tick(double)\n");
  lua_error(L);return 0;
}


static int _wrap_RbjFilter_calc_filter_coeffs(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  bool arg6 ;
  
  SWIG_check_num_args("KfrDSP1::RbjFilter::calc_filter_coeffs",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::RbjFilter::calc_filter_coeffs",1,"KfrDSP1::RbjFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::RbjFilter::calc_filter_coeffs",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::RbjFilter::calc_filter_coeffs",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::RbjFilter::calc_filter_coeffs",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::RbjFilter::calc_filter_coeffs",5,"double");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("KfrDSP1::RbjFilter::calc_filter_coeffs",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__RbjFilter,0))){
    SWIG_fail_ptr("RbjFilter_calc_filter_coeffs",1,SWIGTYPE_p_KfrDSP1__RbjFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->calc_filter_coeffs(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RbjFilter(void *obj) {
KfrDSP1::RbjFilter *arg1 = (KfrDSP1::RbjFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_RbjFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RbjFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RbjFilter_attributes[] = {
    { "filter_type", _wrap_RbjFilter_filter_type_get, _wrap_RbjFilter_filter_type_set },
    { "freq", _wrap_RbjFilter_freq_get, _wrap_RbjFilter_freq_set },
    { "sr", _wrap_RbjFilter_sr_get, _wrap_RbjFilter_sr_set },
    { "Q", _wrap_RbjFilter_Q_get, _wrap_RbjFilter_Q_set },
    { "dbGain", _wrap_RbjFilter_dbGain_get, _wrap_RbjFilter_dbGain_set },
    { "bandwidth", _wrap_RbjFilter_bandwidth_get, _wrap_RbjFilter_bandwidth_set },
    { "b0a0", _wrap_RbjFilter_b0a0_get, _wrap_RbjFilter_b0a0_set },
    { "b1a0", _wrap_RbjFilter_b1a0_get, _wrap_RbjFilter_b1a0_set },
    { "b2a0", _wrap_RbjFilter_b2a0_get, _wrap_RbjFilter_b2a0_set },
    { "a1a0", _wrap_RbjFilter_a1a0_get, _wrap_RbjFilter_a1a0_set },
    { "a2a0", _wrap_RbjFilter_a2a0_get, _wrap_RbjFilter_a2a0_set },
    { "ou1", _wrap_RbjFilter_ou1_get, _wrap_RbjFilter_ou1_set },
    { "ou2", _wrap_RbjFilter_ou2_get, _wrap_RbjFilter_ou2_set },
    { "in1", _wrap_RbjFilter_in1_get, _wrap_RbjFilter_in1_set },
    { "in2", _wrap_RbjFilter_in2_get, _wrap_RbjFilter_in2_set },
    {0,0,0}
};
static swig_lua_method swig_RbjFilter_methods[]= {
    { "filter", _wrap_RbjFilter_filter},
    { "Tick", _wrap_RbjFilter_Tick},
    { "calc_filter_coeffs", _wrap_RbjFilter_calc_filter_coeffs},
    {0,0}
};
static swig_lua_method swig_RbjFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RbjFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RbjFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("Lowpass", KfrDSP1::RbjFilter::Lowpass)},
    {SWIG_LUA_CONSTTAB_INT("Highpass", KfrDSP1::RbjFilter::Highpass)},
    {SWIG_LUA_CONSTTAB_INT("Bandpass", KfrDSP1::RbjFilter::Bandpass)},
    {SWIG_LUA_CONSTTAB_INT("Bandpass2", KfrDSP1::RbjFilter::Bandpass2)},
    {SWIG_LUA_CONSTTAB_INT("Notch", KfrDSP1::RbjFilter::Notch)},
    {SWIG_LUA_CONSTTAB_INT("Bandstop", KfrDSP1::RbjFilter::Bandstop)},
    {SWIG_LUA_CONSTTAB_INT("Allpass", KfrDSP1::RbjFilter::Allpass)},
    {SWIG_LUA_CONSTTAB_INT("Peak", KfrDSP1::RbjFilter::Peak)},
    {SWIG_LUA_CONSTTAB_INT("Lowshelf", KfrDSP1::RbjFilter::Lowshelf)},
    {SWIG_LUA_CONSTTAB_INT("Highshelf", KfrDSP1::RbjFilter::Highshelf)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RbjFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RbjFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RbjFilter_Sf_SwigStatic = {
    "RbjFilter",
    swig_RbjFilter_Sf_SwigStatic_methods,
    swig_RbjFilter_Sf_SwigStatic_attributes,
    swig_RbjFilter_Sf_SwigStatic_constants,
    swig_RbjFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RbjFilter_bases[] = {0,0};
static const char *swig_RbjFilter_base_names[] = {"KfrDSP1::FilterBase *",0};
static swig_lua_class _wrap_class_RbjFilter = { "RbjFilter", "RbjFilter", &SWIGTYPE_p_KfrDSP1__RbjFilter,_proxy__wrap_new_RbjFilter, swig_delete_RbjFilter, swig_RbjFilter_methods, swig_RbjFilter_attributes, &swig_RbjFilter_Sf_SwigStatic, swig_RbjFilter_meta, swig_RbjFilter_bases, swig_RbjFilter_base_names };

static int _wrap_ZolzerBiquad_a_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::a",1,"KfrDSP1::ZolzerBiquad *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::a",2,"double [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_a_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ZolzerBiquad_a_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->a;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_a_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::a",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_a_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double *)(double *) ((arg1)->a);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_b_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::b",1,"KfrDSP1::ZolzerBiquad *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::b",2,"double [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_b_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ZolzerBiquad_b_set",2,SWIGTYPE_p_double);
  }
  
  {
    size_t ii;
    double *b = (double *) arg1->b;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_b_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::b",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_b_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double *)(double *) ((arg1)->b);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_double,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::fs",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::fs",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_fs_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::fs",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_fs_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::fc",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::fc",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_fc_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::fc",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_fc_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_q_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::q",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::q",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_q_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_q_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::q",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_q_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double) ((arg1)->q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_g_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::g",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::g",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_g_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_g_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::g",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_g_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_x1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::x1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::x1",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::x1",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_x1_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->x1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_x1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::x1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::x1",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_x1_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double) ((arg1)->x1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_x2_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::x2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::x2",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::x2",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_x2_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->x2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_x2_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::x2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::x2",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_x2_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double) ((arg1)->x2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_y1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::y1",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::y1",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_y1_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_y1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::y1",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_y1_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double) ((arg1)->y1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_y2_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::y2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::y2",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::y2",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_y2_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->y2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_y2_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::y2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::y2",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_y2_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double) ((arg1)->y2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_x_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::x",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::x",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_x_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_x_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::x",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_x_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_y_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::y",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::y",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_y_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_y_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::y",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_y_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_res_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::res",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::res",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::res",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_res_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->res = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_res_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::res",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::res",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_res_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (double) ((arg1)->res);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_filter_type_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  enum KfrDSP1::ZolzerBiquad::FilterType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::filter_type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::filter_type",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::filter_type",2,"enum KfrDSP1::ZolzerBiquad::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_filter_type_set",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (enum KfrDSP1::ZolzerBiquad::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filter_type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_filter_type_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  enum KfrDSP1::ZolzerBiquad::FilterType result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::filter_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::filter_type",1,"KfrDSP1::ZolzerBiquad *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_filter_type_get",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  result = (enum KfrDSP1::ZolzerBiquad::FilterType) ((arg1)->filter_type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBiquad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad::FilterType arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  KfrDSP1::ZolzerBiquad *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::ZolzerBiquad",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::ZolzerBiquad",1,"KfrDSP1::ZolzerBiquad::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::ZolzerBiquad",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::ZolzerBiquad",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::ZolzerBiquad",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::ZolzerBiquad",5,"double");
  arg1 = (KfrDSP1::ZolzerBiquad::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (KfrDSP1::ZolzerBiquad *)new KfrDSP1::ZolzerBiquad(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBiquad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad::FilterType arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  KfrDSP1::ZolzerBiquad *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::ZolzerBiquad",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::ZolzerBiquad",1,"KfrDSP1::ZolzerBiquad::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::ZolzerBiquad",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::ZolzerBiquad",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::ZolzerBiquad",4,"double");
  arg1 = (KfrDSP1::ZolzerBiquad::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (KfrDSP1::ZolzerBiquad *)new KfrDSP1::ZolzerBiquad(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBiquad__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad::FilterType arg1 ;
  double arg2 ;
  double arg3 ;
  KfrDSP1::ZolzerBiquad *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::ZolzerBiquad",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::ZolzerBiquad",1,"KfrDSP1::ZolzerBiquad::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::ZolzerBiquad",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::ZolzerBiquad",3,"double");
  arg1 = (KfrDSP1::ZolzerBiquad::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (KfrDSP1::ZolzerBiquad *)new KfrDSP1::ZolzerBiquad(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ZolzerBiquad(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ZolzerBiquad__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ZolzerBiquad__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_ZolzerBiquad__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ZolzerBiquad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::ZolzerBiquad::ZolzerBiquad(KfrDSP1::ZolzerBiquad::FilterType,double,double,double,double)\n"
    "    KfrDSP1::ZolzerBiquad::ZolzerBiquad(KfrDSP1::ZolzerBiquad::FilterType,double,double,double)\n"
    "    KfrDSP1::ZolzerBiquad::ZolzerBiquad(KfrDSP1::ZolzerBiquad::FilterType,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_ZolzerBiquad_init_filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::init_filter",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::init_filter",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::init_filter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::init_filter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::init_filter",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_init_filter",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->init_filter(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_init_filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::init_filter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::init_filter",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::init_filter",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::init_filter",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_init_filter",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->init_filter(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_init_filter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__ZolzerBiquad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ZolzerBiquad_init_filter__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__ZolzerBiquad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ZolzerBiquad_init_filter__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ZolzerBiquad_init_filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::ZolzerBiquad::init_filter(double,double,double)\n"
    "    KfrDSP1::ZolzerBiquad::init_filter(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_ZolzerBiquad_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::setCutoff",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::setCutoff",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_setCutoff",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_setQ(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::setQ",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::setQ",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_setQ",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_setResonance(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::setResonance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::setResonance",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::setResonance",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_setResonance",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setResonance(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_setGain(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::setGain",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::setGain",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_setGain",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_notch(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::notch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::notch",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::notch",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::notch",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_notch",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->notch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_lowpass1p(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::lowpass1p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::lowpass1p",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::lowpass1p",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_lowpass1p",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->lowpass1p(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_highpass1p(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::highpass1p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::highpass1p",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::highpass1p",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_highpass1p",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->highpass1p(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_allpass1p(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::allpass1p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::allpass1p",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::allpass1p",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_allpass1p",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->allpass1p(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::lowpass",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_lowpass",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_allpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::allpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::allpass",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::allpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::allpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_allpass",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->allpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_highpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::highpass",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_highpass",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::bandpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::bandpass",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::bandpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_bandpass",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->bandpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_lfboost(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::lfboost",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::lfboost",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::lfboost",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::lfboost",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_lfboost",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lfboost(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_lfcut(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::lfcut",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::lfcut",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::lfcut",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::lfcut",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_lfcut",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lfcut(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_hfboost(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::hfboost",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::hfboost",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::hfboost",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::hfboost",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_hfboost",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->hfboost(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_hfcut(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::hfcut",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::hfcut",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::hfcut",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::hfcut",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_hfcut",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->hfcut(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_boost(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::boost",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::boost",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::boost",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::boost",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::boost",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_boost",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->boost(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_cut(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::cut",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::cut",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::cut",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::cut",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::cut",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_cut",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->cut(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_Tick",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (double)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_Tick",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_Tick",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ZolzerBiquad::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",1,"KfrDSP1::ZolzerBiquad *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ZolzerBiquad::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad,0))){
    SWIG_fail_ptr("ZolzerBiquad_Tick",1,SWIGTYPE_p_KfrDSP1__ZolzerBiquad);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZolzerBiquad_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__ZolzerBiquad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ZolzerBiquad_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__ZolzerBiquad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ZolzerBiquad_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__ZolzerBiquad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ZolzerBiquad_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__ZolzerBiquad, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ZolzerBiquad_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ZolzerBiquad_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::ZolzerBiquad::Tick(double,double,double,double)\n"
    "    KfrDSP1::ZolzerBiquad::Tick(double,double,double)\n"
    "    KfrDSP1::ZolzerBiquad::Tick(double,double)\n"
    "    KfrDSP1::ZolzerBiquad::Tick(double)\n");
  lua_error(L);return 0;
}


static void swig_delete_ZolzerBiquad(void *obj) {
KfrDSP1::ZolzerBiquad *arg1 = (KfrDSP1::ZolzerBiquad *) obj;
delete arg1;
}
static int _proxy__wrap_new_ZolzerBiquad(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ZolzerBiquad);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ZolzerBiquad_attributes[] = {
    { "a", _wrap_ZolzerBiquad_a_get, _wrap_ZolzerBiquad_a_set },
    { "b", _wrap_ZolzerBiquad_b_get, _wrap_ZolzerBiquad_b_set },
    { "fs", _wrap_ZolzerBiquad_fs_get, _wrap_ZolzerBiquad_fs_set },
    { "fc", _wrap_ZolzerBiquad_fc_get, _wrap_ZolzerBiquad_fc_set },
    { "q", _wrap_ZolzerBiquad_q_get, _wrap_ZolzerBiquad_q_set },
    { "g", _wrap_ZolzerBiquad_g_get, _wrap_ZolzerBiquad_g_set },
    { "x1", _wrap_ZolzerBiquad_x1_get, _wrap_ZolzerBiquad_x1_set },
    { "x2", _wrap_ZolzerBiquad_x2_get, _wrap_ZolzerBiquad_x2_set },
    { "y1", _wrap_ZolzerBiquad_y1_get, _wrap_ZolzerBiquad_y1_set },
    { "y2", _wrap_ZolzerBiquad_y2_get, _wrap_ZolzerBiquad_y2_set },
    { "x", _wrap_ZolzerBiquad_x_get, _wrap_ZolzerBiquad_x_set },
    { "y", _wrap_ZolzerBiquad_y_get, _wrap_ZolzerBiquad_y_set },
    { "res", _wrap_ZolzerBiquad_res_get, _wrap_ZolzerBiquad_res_set },
    { "filter_type", _wrap_ZolzerBiquad_filter_type_get, _wrap_ZolzerBiquad_filter_type_set },
    {0,0,0}
};
static swig_lua_method swig_ZolzerBiquad_methods[]= {
    { "init_filter", _wrap_ZolzerBiquad_init_filter},
    { "setCutoff", _wrap_ZolzerBiquad_setCutoff},
    { "setQ", _wrap_ZolzerBiquad_setQ},
    { "setResonance", _wrap_ZolzerBiquad_setResonance},
    { "setGain", _wrap_ZolzerBiquad_setGain},
    { "notch", _wrap_ZolzerBiquad_notch},
    { "lowpass1p", _wrap_ZolzerBiquad_lowpass1p},
    { "highpass1p", _wrap_ZolzerBiquad_highpass1p},
    { "allpass1p", _wrap_ZolzerBiquad_allpass1p},
    { "lowpass", _wrap_ZolzerBiquad_lowpass},
    { "allpass", _wrap_ZolzerBiquad_allpass},
    { "highpass", _wrap_ZolzerBiquad_highpass},
    { "bandpass", _wrap_ZolzerBiquad_bandpass},
    { "lfboost", _wrap_ZolzerBiquad_lfboost},
    { "lfcut", _wrap_ZolzerBiquad_lfcut},
    { "hfboost", _wrap_ZolzerBiquad_hfboost},
    { "hfcut", _wrap_ZolzerBiquad_hfcut},
    { "boost", _wrap_ZolzerBiquad_boost},
    { "cut", _wrap_ZolzerBiquad_cut},
    { "Tick", _wrap_ZolzerBiquad_Tick},
    {0,0}
};
static swig_lua_method swig_ZolzerBiquad_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ZolzerBiquad_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ZolzerBiquad_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("Lowpass", KfrDSP1::ZolzerBiquad::Lowpass)},
    {SWIG_LUA_CONSTTAB_INT("Highpass", KfrDSP1::ZolzerBiquad::Highpass)},
    {SWIG_LUA_CONSTTAB_INT("Bandpass", KfrDSP1::ZolzerBiquad::Bandpass)},
    {SWIG_LUA_CONSTTAB_INT("Bandpass2", KfrDSP1::ZolzerBiquad::Bandpass2)},
    {SWIG_LUA_CONSTTAB_INT("Notch", KfrDSP1::ZolzerBiquad::Notch)},
    {SWIG_LUA_CONSTTAB_INT("Bandstop", KfrDSP1::ZolzerBiquad::Bandstop)},
    {SWIG_LUA_CONSTTAB_INT("Allpass", KfrDSP1::ZolzerBiquad::Allpass)},
    {SWIG_LUA_CONSTTAB_INT("Peak", KfrDSP1::ZolzerBiquad::Peak)},
    {SWIG_LUA_CONSTTAB_INT("Lowshelf", KfrDSP1::ZolzerBiquad::Lowshelf)},
    {SWIG_LUA_CONSTTAB_INT("Highshelf", KfrDSP1::ZolzerBiquad::Highshelf)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ZolzerBiquad_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ZolzerBiquad_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ZolzerBiquad_Sf_SwigStatic = {
    "ZolzerBiquad",
    swig_ZolzerBiquad_Sf_SwigStatic_methods,
    swig_ZolzerBiquad_Sf_SwigStatic_attributes,
    swig_ZolzerBiquad_Sf_SwigStatic_constants,
    swig_ZolzerBiquad_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ZolzerBiquad_bases[] = {0,0};
static const char *swig_ZolzerBiquad_base_names[] = {"KfrDSP1::FilterBase *",0};
static swig_lua_class _wrap_class_ZolzerBiquad = { "ZolzerBiquad", "ZolzerBiquad", &SWIGTYPE_p_KfrDSP1__ZolzerBiquad,_proxy__wrap_new_ZolzerBiquad, swig_delete_ZolzerBiquad, swig_ZolzerBiquad_methods, swig_ZolzerBiquad_attributes, &swig_ZolzerBiquad_Sf_SwigStatic, swig_ZolzerBiquad_meta, swig_ZolzerBiquad_bases, swig_ZolzerBiquad_base_names };

static int _wrap_BesselFilter_filters_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  std::vector< KfrDSP1::Biquad12DB * > *arg2 = (std::vector< KfrDSP1::Biquad12DB * > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::filters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::filters",1,"KfrDSP1::BesselFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::filters",2,"std::vector< KfrDSP1::Biquad12DB * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_filters_set",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t,0))){
    SWIG_fail_ptr("BesselFilter_filters_set",2,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t);
  }
  
  if (arg1) (arg1)->filters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_filters_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  std::vector< KfrDSP1::Biquad12DB * > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::filters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::filters",1,"KfrDSP1::BesselFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_filters_get",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  result = (std::vector< KfrDSP1::Biquad12DB * > *)& ((arg1)->filters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::fc",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::fc",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_fc_set",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::fc",1,"KfrDSP1::BesselFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_fc_get",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  result = (double) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::fs",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::fs",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_fs_set",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::fs",1,"KfrDSP1::BesselFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_fs_get",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  result = (double) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_low_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::low",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::low",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::low",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_low_set",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->low = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_low_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::low",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::low",1,"KfrDSP1::BesselFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_low_get",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  result = (double) ((arg1)->low);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_high_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::high",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::high",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::high",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_high_set",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->high = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_high_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::high",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::high",1,"KfrDSP1::BesselFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_high_get",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  result = (double) ((arg1)->high);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::order",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_order_set",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  int result;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::order",1,"KfrDSP1::BesselFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_order_get",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_filterType_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  KfrDSP1::FilterType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::filterType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::filterType",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::filterType",2,"KfrDSP1::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_filterType_set",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_filterType_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  KfrDSP1::FilterType result;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::filterType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::filterType",1,"KfrDSP1::BesselFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_filterType_get",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  result = (KfrDSP1::FilterType) ((arg1)->filterType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BesselFilter(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterType arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  KfrDSP1::BesselFilter *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::BesselFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::BesselFilter",1,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::BesselFilter",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::BesselFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::BesselFilter::BesselFilter",4,"double");
  arg1 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (KfrDSP1::BesselFilter *)new KfrDSP1::BesselFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__BesselFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_initFilter(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::initFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::initFilter",1,"KfrDSP1::BesselFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_initFilter",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  (arg1)->initFilter();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_setCutoff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::setCutoff",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::setCutoff",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_setCutoff",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_setCutoff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::setCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::setCutoff",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::setCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::setCutoff",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_setCutoff",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_setCutoff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__BesselFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BesselFilter_setCutoff__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__BesselFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BesselFilter_setCutoff__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselFilter_setCutoff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::BesselFilter::setCutoff(double)\n"
    "    KfrDSP1::BesselFilter::setCutoff(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_BesselFilter_doLowpassCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::doLowpassCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::doLowpassCutoff",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::doLowpassCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::doLowpassCutoff",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_doLowpassCutoff",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->doLowpassCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::lowpass",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_lowpass",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_doHighpassCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::doHighpassCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::doHighpassCutoff",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::doHighpassCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::doHighpassCutoff",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_doHighpassCutoff",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->doHighpassCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::highpass",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_highpass",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_doBandpassCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::doBandpassCutoff",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::doBandpassCutoff",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::doBandpassCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::doBandpassCutoff",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::BesselFilter::doBandpassCutoff",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_doBandpassCutoff",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->doBandpassCutoff(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::bandpass",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::bandpass",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::BesselFilter::bandpass",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_bandpass",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_doBandstopCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::doBandstopCutoff",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::doBandstopCutoff",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::doBandstopCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::doBandstopCutoff",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::BesselFilter::doBandstopCutoff",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_doBandstopCutoff",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->doBandstopCutoff(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::bandstop",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::bandstop",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::bandstop",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::BesselFilter::bandstop",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_bandstop",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_Tick",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (double)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_Tick",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_Tick",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::BesselFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",1,"KfrDSP1::BesselFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::BesselFilter::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__BesselFilter,0))){
    SWIG_fail_ptr("BesselFilter_Tick",1,SWIGTYPE_p_KfrDSP1__BesselFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BesselFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__BesselFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BesselFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__BesselFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BesselFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__BesselFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BesselFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__BesselFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BesselFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BesselFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::BesselFilter::Tick(double,double,double,double)\n"
    "    KfrDSP1::BesselFilter::Tick(double,double,double)\n"
    "    KfrDSP1::BesselFilter::Tick(double,double)\n"
    "    KfrDSP1::BesselFilter::Tick(double)\n");
  lua_error(L);return 0;
}


static void swig_delete_BesselFilter(void *obj) {
KfrDSP1::BesselFilter *arg1 = (KfrDSP1::BesselFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BesselFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BesselFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BesselFilter_attributes[] = {
    { "filters", _wrap_BesselFilter_filters_get, _wrap_BesselFilter_filters_set },
    { "fc", _wrap_BesselFilter_fc_get, _wrap_BesselFilter_fc_set },
    { "fs", _wrap_BesselFilter_fs_get, _wrap_BesselFilter_fs_set },
    { "low", _wrap_BesselFilter_low_get, _wrap_BesselFilter_low_set },
    { "high", _wrap_BesselFilter_high_get, _wrap_BesselFilter_high_set },
    { "order", _wrap_BesselFilter_order_get, _wrap_BesselFilter_order_set },
    { "filterType", _wrap_BesselFilter_filterType_get, _wrap_BesselFilter_filterType_set },
    {0,0,0}
};
static swig_lua_method swig_BesselFilter_methods[]= {
    { "initFilter", _wrap_BesselFilter_initFilter},
    { "setCutoff", _wrap_BesselFilter_setCutoff},
    { "doLowpassCutoff", _wrap_BesselFilter_doLowpassCutoff},
    { "lowpass", _wrap_BesselFilter_lowpass},
    { "doHighpassCutoff", _wrap_BesselFilter_doHighpassCutoff},
    { "highpass", _wrap_BesselFilter_highpass},
    { "doBandpassCutoff", _wrap_BesselFilter_doBandpassCutoff},
    { "bandpass", _wrap_BesselFilter_bandpass},
    { "doBandstopCutoff", _wrap_BesselFilter_doBandstopCutoff},
    { "bandstop", _wrap_BesselFilter_bandstop},
    { "Tick", _wrap_BesselFilter_Tick},
    {0,0}
};
static swig_lua_method swig_BesselFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselFilter_Sf_SwigStatic = {
    "BesselFilter",
    swig_BesselFilter_Sf_SwigStatic_methods,
    swig_BesselFilter_Sf_SwigStatic_attributes,
    swig_BesselFilter_Sf_SwigStatic_constants,
    swig_BesselFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselFilter_bases[] = {0};
static const char *swig_BesselFilter_base_names[] = {0};
static swig_lua_class _wrap_class_BesselFilter = { "BesselFilter", "BesselFilter", &SWIGTYPE_p_KfrDSP1__BesselFilter,_proxy__wrap_new_BesselFilter, swig_delete_BesselFilter, swig_BesselFilter_methods, swig_BesselFilter_attributes, &swig_BesselFilter_Sf_SwigStatic, swig_BesselFilter_meta, swig_BesselFilter_bases, swig_BesselFilter_base_names };

static int _wrap_ButterworthFilter_filters_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  std::vector< KfrDSP1::Biquad12DB * > *arg2 = (std::vector< KfrDSP1::Biquad12DB * > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::filters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::filters",1,"KfrDSP1::ButterworthFilter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::filters",2,"std::vector< KfrDSP1::Biquad12DB * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_filters_set",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t,0))){
    SWIG_fail_ptr("ButterworthFilter_filters_set",2,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t);
  }
  
  if (arg1) (arg1)->filters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_filters_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  std::vector< KfrDSP1::Biquad12DB * > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::filters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::filters",1,"KfrDSP1::ButterworthFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_filters_get",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  result = (std::vector< KfrDSP1::Biquad12DB * > *)& ((arg1)->filters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::fc",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::fc",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_fc_set",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::fc",1,"KfrDSP1::ButterworthFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_fc_get",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  result = (double) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::fs",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::fs",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_fs_set",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::fs",1,"KfrDSP1::ButterworthFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_fs_get",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  result = (double) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_low_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::low",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::low",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::low",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_low_set",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->low = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_low_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::low",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::low",1,"KfrDSP1::ButterworthFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_low_get",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  result = (double) ((arg1)->low);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_high_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::high",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::high",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::high",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_high_set",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->high = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_high_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::high",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::high",1,"KfrDSP1::ButterworthFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_high_get",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  result = (double) ((arg1)->high);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::order",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_order_set",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  int result;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::order",1,"KfrDSP1::ButterworthFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_order_get",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_filterType_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  KfrDSP1::FilterType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::filterType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::filterType",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::filterType",2,"KfrDSP1::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_filterType_set",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_filterType_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  KfrDSP1::FilterType result;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::filterType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::filterType",1,"KfrDSP1::ButterworthFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_filterType_get",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  result = (KfrDSP1::FilterType) ((arg1)->filterType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ButterworthFilter(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterType arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  KfrDSP1::ButterworthFilter *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::ButterworthFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::ButterworthFilter",1,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::ButterworthFilter",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::ButterworthFilter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::ButterworthFilter",4,"double");
  arg1 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (KfrDSP1::ButterworthFilter *)new KfrDSP1::ButterworthFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__ButterworthFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_initFilter(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::initFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::initFilter",1,"KfrDSP1::ButterworthFilter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_initFilter",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  (arg1)->initFilter();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_setCutoff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::setCutoff",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::setCutoff",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_setCutoff",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_setCutoff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::setCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::setCutoff",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::setCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::setCutoff",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_setCutoff",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_setCutoff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__ButterworthFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ButterworthFilter_setCutoff__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__ButterworthFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ButterworthFilter_setCutoff__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthFilter_setCutoff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::ButterworthFilter::setCutoff(double)\n"
    "    KfrDSP1::ButterworthFilter::setCutoff(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_ButterworthFilter_doLowpassCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::doLowpassCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doLowpassCutoff",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doLowpassCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doLowpassCutoff",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_doLowpassCutoff",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->doLowpassCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::lowpass",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_lowpass",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_doHighpassCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::doHighpassCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doHighpassCutoff",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doHighpassCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doHighpassCutoff",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_doHighpassCutoff",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->doHighpassCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::highpass",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_highpass",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_doBandpassCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::doBandpassCutoff",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doBandpassCutoff",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doBandpassCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doBandpassCutoff",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doBandpassCutoff",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_doBandpassCutoff",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->doBandpassCutoff(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::bandpass",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::bandpass",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::bandpass",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_bandpass",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_doBandstopCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::doBandstopCutoff",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doBandstopCutoff",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doBandstopCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doBandstopCutoff",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::doBandstopCutoff",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_doBandstopCutoff",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->doBandstopCutoff(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::bandstop",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::bandstop",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::bandstop",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::bandstop",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_bandstop",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_Tick",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (double)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_Tick",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_Tick",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::ButterworthFilter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",1,"KfrDSP1::ButterworthFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ButterworthFilter::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ButterworthFilter,0))){
    SWIG_fail_ptr("ButterworthFilter_Tick",1,SWIGTYPE_p_KfrDSP1__ButterworthFilter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ButterworthFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__ButterworthFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ButterworthFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__ButterworthFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ButterworthFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__ButterworthFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ButterworthFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__ButterworthFilter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_ButterworthFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ButterworthFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::ButterworthFilter::Tick(double,double,double,double)\n"
    "    KfrDSP1::ButterworthFilter::Tick(double,double,double)\n"
    "    KfrDSP1::ButterworthFilter::Tick(double,double)\n"
    "    KfrDSP1::ButterworthFilter::Tick(double)\n");
  lua_error(L);return 0;
}


static void swig_delete_ButterworthFilter(void *obj) {
KfrDSP1::ButterworthFilter *arg1 = (KfrDSP1::ButterworthFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_ButterworthFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ButterworthFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ButterworthFilter_attributes[] = {
    { "filters", _wrap_ButterworthFilter_filters_get, _wrap_ButterworthFilter_filters_set },
    { "fc", _wrap_ButterworthFilter_fc_get, _wrap_ButterworthFilter_fc_set },
    { "fs", _wrap_ButterworthFilter_fs_get, _wrap_ButterworthFilter_fs_set },
    { "low", _wrap_ButterworthFilter_low_get, _wrap_ButterworthFilter_low_set },
    { "high", _wrap_ButterworthFilter_high_get, _wrap_ButterworthFilter_high_set },
    { "order", _wrap_ButterworthFilter_order_get, _wrap_ButterworthFilter_order_set },
    { "filterType", _wrap_ButterworthFilter_filterType_get, _wrap_ButterworthFilter_filterType_set },
    {0,0,0}
};
static swig_lua_method swig_ButterworthFilter_methods[]= {
    { "initFilter", _wrap_ButterworthFilter_initFilter},
    { "setCutoff", _wrap_ButterworthFilter_setCutoff},
    { "doLowpassCutoff", _wrap_ButterworthFilter_doLowpassCutoff},
    { "lowpass", _wrap_ButterworthFilter_lowpass},
    { "doHighpassCutoff", _wrap_ButterworthFilter_doHighpassCutoff},
    { "highpass", _wrap_ButterworthFilter_highpass},
    { "doBandpassCutoff", _wrap_ButterworthFilter_doBandpassCutoff},
    { "bandpass", _wrap_ButterworthFilter_bandpass},
    { "doBandstopCutoff", _wrap_ButterworthFilter_doBandstopCutoff},
    { "bandstop", _wrap_ButterworthFilter_bandstop},
    { "Tick", _wrap_ButterworthFilter_Tick},
    {0,0}
};
static swig_lua_method swig_ButterworthFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthFilter_Sf_SwigStatic = {
    "ButterworthFilter",
    swig_ButterworthFilter_Sf_SwigStatic_methods,
    swig_ButterworthFilter_Sf_SwigStatic_attributes,
    swig_ButterworthFilter_Sf_SwigStatic_constants,
    swig_ButterworthFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthFilter_bases[] = {0};
static const char *swig_ButterworthFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ButterworthFilter = { "ButterworthFilter", "ButterworthFilter", &SWIGTYPE_p_KfrDSP1__ButterworthFilter,_proxy__wrap_new_ButterworthFilter, swig_delete_ButterworthFilter, swig_ButterworthFilter_methods, swig_ButterworthFilter_attributes, &swig_ButterworthFilter_Sf_SwigStatic, swig_ButterworthFilter_meta, swig_ButterworthFilter_bases, swig_ButterworthFilter_base_names };

static int _wrap_Chebyshev1Filter_filters_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  std::vector< KfrDSP1::Biquad12DB * > *arg2 = (std::vector< KfrDSP1::Biquad12DB * > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::filters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::filters",1,"KfrDSP1::Chebyshev1Filter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::filters",2,"std::vector< KfrDSP1::Biquad12DB * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_filters_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t,0))){
    SWIG_fail_ptr("Chebyshev1Filter_filters_set",2,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t);
  }
  
  if (arg1) (arg1)->filters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_filters_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  std::vector< KfrDSP1::Biquad12DB * > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::filters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::filters",1,"KfrDSP1::Chebyshev1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_filters_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  result = (std::vector< KfrDSP1::Biquad12DB * > *)& ((arg1)->filters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::fc",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::fc",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_fc_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::fc",1,"KfrDSP1::Chebyshev1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_fc_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  result = (double) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::fs",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::fs",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_fs_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::fs",1,"KfrDSP1::Chebyshev1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_fs_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  result = (double) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_w_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::w",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::w",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_w_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->w = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_w_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::w",1,"KfrDSP1::Chebyshev1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_w_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  result = (double) ((arg1)->w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_low_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::low",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::low",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::low",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_low_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->low = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_low_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::low",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::low",1,"KfrDSP1::Chebyshev1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_low_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  result = (double) ((arg1)->low);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_high_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::high",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::high",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::high",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_high_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->high = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_high_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::high",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::high",1,"KfrDSP1::Chebyshev1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_high_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  result = (double) ((arg1)->high);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::order",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_order_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  int result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::order",1,"KfrDSP1::Chebyshev1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_order_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_filterType_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  KfrDSP1::FilterType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::filterType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::filterType",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::filterType",2,"KfrDSP1::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_filterType_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_filterType_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  KfrDSP1::FilterType result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::filterType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::filterType",1,"KfrDSP1::Chebyshev1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_filterType_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  result = (KfrDSP1::FilterType) ((arg1)->filterType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chebyshev1Filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterType arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  float arg5 ;
  KfrDSP1::Chebyshev1Filter *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::Chebyshev1Filter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Chebyshev1Filter",1,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Chebyshev1Filter",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Chebyshev1Filter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Chebyshev1Filter",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Chebyshev1Filter",5,"float");
  arg1 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (KfrDSP1::Chebyshev1Filter *)new KfrDSP1::Chebyshev1Filter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chebyshev1Filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterType arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  KfrDSP1::Chebyshev1Filter *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::Chebyshev1Filter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Chebyshev1Filter",1,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Chebyshev1Filter",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Chebyshev1Filter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Chebyshev1Filter",4,"double");
  arg1 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (KfrDSP1::Chebyshev1Filter *)new KfrDSP1::Chebyshev1Filter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chebyshev1Filter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Chebyshev1Filter__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Chebyshev1Filter__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Chebyshev1Filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::Chebyshev1Filter::Chebyshev1Filter(KfrDSP1::FilterType,int,double,double,float)\n"
    "    KfrDSP1::Chebyshev1Filter::Chebyshev1Filter(KfrDSP1::FilterType,int,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Chebyshev1Filter_initFilter(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::initFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::initFilter",1,"KfrDSP1::Chebyshev1Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_initFilter",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  (arg1)->initFilter();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_setCutoff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::setCutoff",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::setCutoff",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_setCutoff",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_setCutoff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::setCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::setCutoff",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::setCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::setCutoff",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_setCutoff",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_setCutoff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Chebyshev1Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chebyshev1Filter_setCutoff__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Chebyshev1Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chebyshev1Filter_setCutoff__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chebyshev1Filter_setCutoff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::Chebyshev1Filter::setCutoff(double)\n"
    "    KfrDSP1::Chebyshev1Filter::setCutoff(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Chebyshev1Filter_doLowpassCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::doLowpassCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doLowpassCutoff",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doLowpassCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doLowpassCutoff",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_doLowpassCutoff",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->doLowpassCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::lowpass",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_lowpass",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_doHighpassCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::doHighpassCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doHighpassCutoff",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doHighpassCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doHighpassCutoff",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_doHighpassCutoff",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->doHighpassCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::highpass",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_highpass",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_doBandpassCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::doBandpassCutoff",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doBandpassCutoff",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doBandpassCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doBandpassCutoff",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doBandpassCutoff",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_doBandpassCutoff",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->doBandpassCutoff(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::bandpass",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::bandpass",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::bandpass",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_bandpass",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_doBandstopCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::doBandstopCutoff",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doBandstopCutoff",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doBandstopCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doBandstopCutoff",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::doBandstopCutoff",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_doBandstopCutoff",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->doBandstopCutoff(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::bandstop",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::bandstop",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::bandstop",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::bandstop",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_bandstop",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_Tick",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (double)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_Tick",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_Tick",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev1Filter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",1,"KfrDSP1::Chebyshev1Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev1Filter::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,0))){
    SWIG_fail_ptr("Chebyshev1Filter_Tick",1,SWIGTYPE_p_KfrDSP1__Chebyshev1Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev1Filter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Chebyshev1Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chebyshev1Filter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Chebyshev1Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chebyshev1Filter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Chebyshev1Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Chebyshev1Filter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Chebyshev1Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Chebyshev1Filter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chebyshev1Filter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::Chebyshev1Filter::Tick(double,double,double,double)\n"
    "    KfrDSP1::Chebyshev1Filter::Tick(double,double,double)\n"
    "    KfrDSP1::Chebyshev1Filter::Tick(double,double)\n"
    "    KfrDSP1::Chebyshev1Filter::Tick(double)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chebyshev1Filter(void *obj) {
KfrDSP1::Chebyshev1Filter *arg1 = (KfrDSP1::Chebyshev1Filter *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chebyshev1Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chebyshev1Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chebyshev1Filter_attributes[] = {
    { "filters", _wrap_Chebyshev1Filter_filters_get, _wrap_Chebyshev1Filter_filters_set },
    { "fc", _wrap_Chebyshev1Filter_fc_get, _wrap_Chebyshev1Filter_fc_set },
    { "fs", _wrap_Chebyshev1Filter_fs_get, _wrap_Chebyshev1Filter_fs_set },
    { "w", _wrap_Chebyshev1Filter_w_get, _wrap_Chebyshev1Filter_w_set },
    { "low", _wrap_Chebyshev1Filter_low_get, _wrap_Chebyshev1Filter_low_set },
    { "high", _wrap_Chebyshev1Filter_high_get, _wrap_Chebyshev1Filter_high_set },
    { "order", _wrap_Chebyshev1Filter_order_get, _wrap_Chebyshev1Filter_order_set },
    { "filterType", _wrap_Chebyshev1Filter_filterType_get, _wrap_Chebyshev1Filter_filterType_set },
    {0,0,0}
};
static swig_lua_method swig_Chebyshev1Filter_methods[]= {
    { "initFilter", _wrap_Chebyshev1Filter_initFilter},
    { "setCutoff", _wrap_Chebyshev1Filter_setCutoff},
    { "doLowpassCutoff", _wrap_Chebyshev1Filter_doLowpassCutoff},
    { "lowpass", _wrap_Chebyshev1Filter_lowpass},
    { "doHighpassCutoff", _wrap_Chebyshev1Filter_doHighpassCutoff},
    { "highpass", _wrap_Chebyshev1Filter_highpass},
    { "doBandpassCutoff", _wrap_Chebyshev1Filter_doBandpassCutoff},
    { "bandpass", _wrap_Chebyshev1Filter_bandpass},
    { "doBandstopCutoff", _wrap_Chebyshev1Filter_doBandstopCutoff},
    { "bandstop", _wrap_Chebyshev1Filter_bandstop},
    { "Tick", _wrap_Chebyshev1Filter_Tick},
    {0,0}
};
static swig_lua_method swig_Chebyshev1Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chebyshev1Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chebyshev1Filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chebyshev1Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chebyshev1Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chebyshev1Filter_Sf_SwigStatic = {
    "Chebyshev1Filter",
    swig_Chebyshev1Filter_Sf_SwigStatic_methods,
    swig_Chebyshev1Filter_Sf_SwigStatic_attributes,
    swig_Chebyshev1Filter_Sf_SwigStatic_constants,
    swig_Chebyshev1Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chebyshev1Filter_bases[] = {0};
static const char *swig_Chebyshev1Filter_base_names[] = {0};
static swig_lua_class _wrap_class_Chebyshev1Filter = { "Chebyshev1Filter", "Chebyshev1Filter", &SWIGTYPE_p_KfrDSP1__Chebyshev1Filter,_proxy__wrap_new_Chebyshev1Filter, swig_delete_Chebyshev1Filter, swig_Chebyshev1Filter_methods, swig_Chebyshev1Filter_attributes, &swig_Chebyshev1Filter_Sf_SwigStatic, swig_Chebyshev1Filter_meta, swig_Chebyshev1Filter_bases, swig_Chebyshev1Filter_base_names };

static int _wrap_Chebyshev2Filter_filters_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  std::vector< KfrDSP1::Biquad12DB * > *arg2 = (std::vector< KfrDSP1::Biquad12DB * > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::filters",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::filters",1,"KfrDSP1::Chebyshev2Filter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::filters",2,"std::vector< KfrDSP1::Biquad12DB * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_filters_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t,0))){
    SWIG_fail_ptr("Chebyshev2Filter_filters_set",2,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t);
  }
  
  if (arg1) (arg1)->filters = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_filters_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  std::vector< KfrDSP1::Biquad12DB * > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::filters",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::filters",1,"KfrDSP1::Chebyshev2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_filters_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  result = (std::vector< KfrDSP1::Biquad12DB * > *)& ((arg1)->filters);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_KfrDSP1__Biquad12DB_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_fc_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::fc",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::fc",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_fc_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_fc_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::fc",1,"KfrDSP1::Chebyshev2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_fc_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  result = (double) ((arg1)->fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_fs_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::fs",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::fs",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_fs_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_fs_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::fs",1,"KfrDSP1::Chebyshev2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_fs_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  result = (double) ((arg1)->fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_W_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::W",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::W",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_W_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_W_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::W",1,"KfrDSP1::Chebyshev2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_W_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  result = (double) ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_low_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::low",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::low",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::low",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_low_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->low = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_low_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::low",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::low",1,"KfrDSP1::Chebyshev2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_low_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  result = (double) ((arg1)->low);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_high_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::high",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::high",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::high",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_high_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->high = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_high_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::high",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::high",1,"KfrDSP1::Chebyshev2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_high_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  result = (double) ((arg1)->high);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_order_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::order",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::order",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_order_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_order_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  int result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::order",1,"KfrDSP1::Chebyshev2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_order_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  result = (int) ((arg1)->order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_filterType_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  KfrDSP1::FilterType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::filterType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::filterType",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::filterType",2,"KfrDSP1::FilterType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_filterType_set",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->filterType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_filterType_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  KfrDSP1::FilterType result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::filterType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::filterType",1,"KfrDSP1::Chebyshev2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_filterType_get",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  result = (KfrDSP1::FilterType) ((arg1)->filterType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chebyshev2Filter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterType arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  float arg5 ;
  KfrDSP1::Chebyshev2Filter *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::Chebyshev2Filter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Chebyshev2Filter",1,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Chebyshev2Filter",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Chebyshev2Filter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Chebyshev2Filter",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Chebyshev2Filter",5,"float");
  arg1 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (KfrDSP1::Chebyshev2Filter *)new KfrDSP1::Chebyshev2Filter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chebyshev2Filter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FilterType arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  KfrDSP1::Chebyshev2Filter *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::Chebyshev2Filter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Chebyshev2Filter",1,"KfrDSP1::FilterType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Chebyshev2Filter",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Chebyshev2Filter",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Chebyshev2Filter",4,"double");
  arg1 = (KfrDSP1::FilterType)(int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (KfrDSP1::Chebyshev2Filter *)new KfrDSP1::Chebyshev2Filter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Chebyshev2Filter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Chebyshev2Filter__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Chebyshev2Filter__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Chebyshev2Filter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::Chebyshev2Filter::Chebyshev2Filter(KfrDSP1::FilterType,int,double,double,float)\n"
    "    KfrDSP1::Chebyshev2Filter::Chebyshev2Filter(KfrDSP1::FilterType,int,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Chebyshev2Filter_initFilter(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::initFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::initFilter",1,"KfrDSP1::Chebyshev2Filter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_initFilter",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  (arg1)->initFilter();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_setCutoff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::setCutoff",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::setCutoff",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_setCutoff",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_setCutoff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::setCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::setCutoff",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::setCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::setCutoff",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_setCutoff",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->setCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_setCutoff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Chebyshev2Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chebyshev2Filter_setCutoff__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Chebyshev2Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chebyshev2Filter_setCutoff__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chebyshev2Filter_setCutoff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::Chebyshev2Filter::setCutoff(double)\n"
    "    KfrDSP1::Chebyshev2Filter::setCutoff(double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_Chebyshev2Filter_doLowpassCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::doLowpassCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doLowpassCutoff",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doLowpassCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doLowpassCutoff",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_doLowpassCutoff",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->doLowpassCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_lowpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::lowpass",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::lowpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::lowpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_lowpass",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->lowpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_doHighpassCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::doHighpassCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doHighpassCutoff",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doHighpassCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doHighpassCutoff",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_doHighpassCutoff",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->doHighpassCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_highpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::highpass",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::highpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::highpass",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_highpass",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  (arg1)->highpass(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_doBandpassCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::doBandpassCutoff",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doBandpassCutoff",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doBandpassCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doBandpassCutoff",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doBandpassCutoff",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_doBandpassCutoff",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->doBandpassCutoff(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_bandpass(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::bandpass",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::bandpass",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::bandpass",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::bandpass",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_bandpass",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandpass(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_doBandstopCutoff(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::doBandstopCutoff",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doBandstopCutoff",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doBandstopCutoff",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doBandstopCutoff",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::doBandstopCutoff",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_doBandstopCutoff",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->doBandstopCutoff(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_bandstop(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::bandstop",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::bandstop",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::bandstop",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::bandstop",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_bandstop",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->bandstop(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",4,"double");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",5,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_Tick",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  arg5 = (double)lua_tonumber(L, 5);
  result = (double)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_Tick",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_Tick",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("KfrDSP1::Chebyshev2Filter::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",1,"KfrDSP1::Chebyshev2Filter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::Chebyshev2Filter::Tick",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,0))){
    SWIG_fail_ptr("Chebyshev2Filter_Tick",1,SWIGTYPE_p_KfrDSP1__Chebyshev2Filter);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Chebyshev2Filter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Chebyshev2Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Chebyshev2Filter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Chebyshev2Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Chebyshev2Filter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Chebyshev2Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Chebyshev2Filter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__Chebyshev2Filter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Chebyshev2Filter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Chebyshev2Filter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::Chebyshev2Filter::Tick(double,double,double,double)\n"
    "    KfrDSP1::Chebyshev2Filter::Tick(double,double,double)\n"
    "    KfrDSP1::Chebyshev2Filter::Tick(double,double)\n"
    "    KfrDSP1::Chebyshev2Filter::Tick(double)\n");
  lua_error(L);return 0;
}


static void swig_delete_Chebyshev2Filter(void *obj) {
KfrDSP1::Chebyshev2Filter *arg1 = (KfrDSP1::Chebyshev2Filter *) obj;
delete arg1;
}
static int _proxy__wrap_new_Chebyshev2Filter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Chebyshev2Filter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Chebyshev2Filter_attributes[] = {
    { "filters", _wrap_Chebyshev2Filter_filters_get, _wrap_Chebyshev2Filter_filters_set },
    { "fc", _wrap_Chebyshev2Filter_fc_get, _wrap_Chebyshev2Filter_fc_set },
    { "fs", _wrap_Chebyshev2Filter_fs_get, _wrap_Chebyshev2Filter_fs_set },
    { "W", _wrap_Chebyshev2Filter_W_get, _wrap_Chebyshev2Filter_W_set },
    { "low", _wrap_Chebyshev2Filter_low_get, _wrap_Chebyshev2Filter_low_set },
    { "high", _wrap_Chebyshev2Filter_high_get, _wrap_Chebyshev2Filter_high_set },
    { "order", _wrap_Chebyshev2Filter_order_get, _wrap_Chebyshev2Filter_order_set },
    { "filterType", _wrap_Chebyshev2Filter_filterType_get, _wrap_Chebyshev2Filter_filterType_set },
    {0,0,0}
};
static swig_lua_method swig_Chebyshev2Filter_methods[]= {
    { "initFilter", _wrap_Chebyshev2Filter_initFilter},
    { "setCutoff", _wrap_Chebyshev2Filter_setCutoff},
    { "doLowpassCutoff", _wrap_Chebyshev2Filter_doLowpassCutoff},
    { "lowpass", _wrap_Chebyshev2Filter_lowpass},
    { "doHighpassCutoff", _wrap_Chebyshev2Filter_doHighpassCutoff},
    { "highpass", _wrap_Chebyshev2Filter_highpass},
    { "doBandpassCutoff", _wrap_Chebyshev2Filter_doBandpassCutoff},
    { "bandpass", _wrap_Chebyshev2Filter_bandpass},
    { "doBandstopCutoff", _wrap_Chebyshev2Filter_doBandstopCutoff},
    { "bandstop", _wrap_Chebyshev2Filter_bandstop},
    { "Tick", _wrap_Chebyshev2Filter_Tick},
    {0,0}
};
static swig_lua_method swig_Chebyshev2Filter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Chebyshev2Filter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Chebyshev2Filter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Chebyshev2Filter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Chebyshev2Filter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Chebyshev2Filter_Sf_SwigStatic = {
    "Chebyshev2Filter",
    swig_Chebyshev2Filter_Sf_SwigStatic_methods,
    swig_Chebyshev2Filter_Sf_SwigStatic_attributes,
    swig_Chebyshev2Filter_Sf_SwigStatic_constants,
    swig_Chebyshev2Filter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Chebyshev2Filter_bases[] = {0};
static const char *swig_Chebyshev2Filter_base_names[] = {0};
static swig_lua_class _wrap_class_Chebyshev2Filter = { "Chebyshev2Filter", "Chebyshev2Filter", &SWIGTYPE_p_KfrDSP1__Chebyshev2Filter,_proxy__wrap_new_Chebyshev2Filter, swig_delete_Chebyshev2Filter, swig_Chebyshev2Filter_methods, swig_Chebyshev2Filter_attributes, &swig_Chebyshev2Filter_Sf_SwigStatic, swig_Chebyshev2Filter_meta, swig_Chebyshev2Filter_bases, swig_Chebyshev2Filter_base_names };

static int _wrap_FilterCoefficients_a_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterCoefficients *arg1 = (Filters::FilterCoefficients *) 0 ;
  Filters::DspFloatType *arg2 ;
  
  SWIG_check_num_args("Filters::FilterCoefficients::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterCoefficients::a",1,"Filters::FilterCoefficients *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::FilterCoefficients::a",2,"Filters::DspFloatType [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("FilterCoefficients_a_set",1,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterCoefficients_a_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    Filters::DspFloatType *b = (Filters::DspFloatType *) arg1->a;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((Filters::DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterCoefficients_a_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterCoefficients *arg1 = (Filters::FilterCoefficients *) 0 ;
  Filters::DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Filters::FilterCoefficients::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterCoefficients::a",1,"Filters::FilterCoefficients *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("FilterCoefficients_a_get",1,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  
  result = (Filters::DspFloatType *)(Filters::DspFloatType *) ((arg1)->a);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterCoefficients_b_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterCoefficients *arg1 = (Filters::FilterCoefficients *) 0 ;
  Filters::DspFloatType *arg2 ;
  
  SWIG_check_num_args("Filters::FilterCoefficients::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterCoefficients::b",1,"Filters::FilterCoefficients *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::FilterCoefficients::b",2,"Filters::DspFloatType [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("FilterCoefficients_b_set",1,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FilterCoefficients_b_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    Filters::DspFloatType *b = (Filters::DspFloatType *) arg1->b;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((Filters::DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FilterCoefficients_b_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterCoefficients *arg1 = (Filters::FilterCoefficients *) 0 ;
  Filters::DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Filters::FilterCoefficients::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::FilterCoefficients::b",1,"Filters::FilterCoefficients *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("FilterCoefficients_b_get",1,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  
  result = (Filters::DspFloatType *)(Filters::DspFloatType *) ((arg1)->b);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FilterCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterCoefficients *result = 0 ;
  
  SWIG_check_num_args("Filters::FilterCoefficients::FilterCoefficients",0,0)
  result = (Filters::FilterCoefficients *)new Filters::FilterCoefficients();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__FilterCoefficients,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilterCoefficients(void *obj) {
Filters::FilterCoefficients *arg1 = (Filters::FilterCoefficients *) obj;
delete arg1;
}
static int _proxy__wrap_new_FilterCoefficients(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FilterCoefficients);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FilterCoefficients_attributes[] = {
    { "a", _wrap_FilterCoefficients_a_get, _wrap_FilterCoefficients_a_set },
    { "b", _wrap_FilterCoefficients_b_get, _wrap_FilterCoefficients_b_set },
    {0,0,0}
};
static swig_lua_method swig_FilterCoefficients_methods[]= {
    {0,0}
};
static swig_lua_method swig_FilterCoefficients_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilterCoefficients_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilterCoefficients_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilterCoefficients_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilterCoefficients_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilterCoefficients_Sf_SwigStatic = {
    "FilterCoefficients",
    swig_FilterCoefficients_Sf_SwigStatic_methods,
    swig_FilterCoefficients_Sf_SwigStatic_attributes,
    swig_FilterCoefficients_Sf_SwigStatic_constants,
    swig_FilterCoefficients_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilterCoefficients_bases[] = {0};
static const char *swig_FilterCoefficients_base_names[] = {0};
static swig_lua_class _wrap_class_FilterCoefficients = { "FilterCoefficients", "FilterCoefficients", &SWIGTYPE_p_Filters__FilterCoefficients,_proxy__wrap_new_FilterCoefficients, swig_delete_FilterCoefficients, swig_FilterCoefficients_methods, swig_FilterCoefficients_attributes, &swig_FilterCoefficients_Sf_SwigStatic, swig_FilterCoefficients_meta, swig_FilterCoefficients_bases, swig_FilterCoefficients_base_names };

static int _wrap_BiquadSection_z_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  Filters::DspFloatType *arg2 ;
  
  SWIG_check_num_args("Filters::BiquadSection::z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::z",1,"Filters::BiquadSection *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadSection::z",2,"Filters::DspFloatType [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_z_set",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadSection_z_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    Filters::DspFloatType *b = (Filters::DspFloatType *) arg1->z;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((Filters::DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadSection_z_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  Filters::DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::z",1,"Filters::BiquadSection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_z_get",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  result = (Filters::DspFloatType *)(Filters::DspFloatType *) ((arg1)->z);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadSection_p_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  Filters::DspFloatType *arg2 ;
  
  SWIG_check_num_args("Filters::BiquadSection::p",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::p",1,"Filters::BiquadSection *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadSection::p",2,"Filters::DspFloatType [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_p_set",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadSection_p_set",2,SWIGTYPE_p_float);
  }
  
  {
    size_t ii;
    Filters::DspFloatType *b = (Filters::DspFloatType *) arg1->p;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((Filters::DspFloatType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadSection_p_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  Filters::DspFloatType *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::p",1,"Filters::BiquadSection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_p_get",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  result = (Filters::DspFloatType *)(Filters::DspFloatType *) ((arg1)->p);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_float,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadSection__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::BiquadSection",0,0)
  result = (Filters::BiquadSection *)new Filters::BiquadSection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadSection__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::FilterCoefficients *arg1 = 0 ;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::BiquadSection",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",1,"Filters::FilterCoefficients const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("new_BiquadSection",1,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  
  result = (Filters::BiquadSection *)new Filters::BiquadSection((Filters::FilterCoefficients const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadSection__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::DspFloatType arg1 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::DspFloatType arg5 ;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::BiquadSection",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",1,"Filters::DspFloatType");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",4,"Filters::DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",5,"Filters::DspFloatType");
  arg1 = (Filters::DspFloatType)lua_tonumber(L, 1);
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  arg5 = (Filters::DspFloatType)lua_tonumber(L, 5);
  result = (Filters::BiquadSection *)new Filters::BiquadSection(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadSection__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = 0 ;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::BiquadSection",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadSection::BiquadSection",1,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("new_BiquadSection",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  result = (Filters::BiquadSection *)new Filters::BiquadSection((Filters::BiquadSection const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadSection(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BiquadSection__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__FilterCoefficients, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadSection__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadSection__SWIG_3(L);
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_BiquadSection__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadSection'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadSection::BiquadSection()\n"
    "    Filters::BiquadSection::BiquadSection(Filters::FilterCoefficients const &)\n"
    "    Filters::BiquadSection::BiquadSection(Filters::DspFloatType,Filters::DspFloatType,Filters::DspFloatType,Filters::DspFloatType,Filters::DspFloatType)\n"
    "    Filters::BiquadSection::BiquadSection(Filters::BiquadSection const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadSection_setCoefficients__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::DspFloatType arg5 ;
  Filters::DspFloatType arg6 ;
  
  SWIG_check_num_args("Filters::BiquadSection::setCoefficients",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",1,"Filters::BiquadSection *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",4,"Filters::DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",5,"Filters::DspFloatType");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",6,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_setCoefficients",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  arg5 = (Filters::DspFloatType)lua_tonumber(L, 5);
  arg6 = (Filters::DspFloatType)lua_tonumber(L, 6);
  (arg1)->setCoefficients(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadSection_setCoefficients__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  Filters::DspFloatType *arg2 ;
  Filters::DspFloatType *arg3 ;
  
  SWIG_check_num_args("Filters::BiquadSection::setCoefficients",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",1,"Filters::BiquadSection *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",2,"Filters::DspFloatType [3]");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",3,"Filters::DspFloatType [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_setCoefficients",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadSection_setCoefficients",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadSection_setCoefficients",3,SWIGTYPE_p_float);
  }
  
  (arg1)->setCoefficients(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadSection_setCoefficients__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  Filters::FilterCoefficients *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",1,"Filters::BiquadSection *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadSection::setCoefficients",2,"Filters::FilterCoefficients const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_setCoefficients",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__FilterCoefficients,0))){
    SWIG_fail_ptr("BiquadSection_setCoefficients",2,SWIGTYPE_p_Filters__FilterCoefficients);
  }
  
  (arg1)->setCoefficients((Filters::FilterCoefficients const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadSection_setCoefficients(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Filters__FilterCoefficients, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BiquadSection_setCoefficients__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_BiquadSection_setCoefficients__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_BiquadSection_setCoefficients__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadSection_setCoefficients'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadSection::setCoefficients(Filters::DspFloatType,Filters::DspFloatType,Filters::DspFloatType,Filters::DspFloatType,Filters::DspFloatType)\n"
    "    Filters::BiquadSection::setCoefficients(Filters::DspFloatType [3],Filters::DspFloatType [2])\n"
    "    Filters::BiquadSection::setCoefficients(Filters::FilterCoefficients const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadSection_print(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = (Filters::BiquadSection *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadSection::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadSection::print",1,"Filters::BiquadSection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadSection_print",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  (arg1)->print();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadSection(void *obj) {
Filters::BiquadSection *arg1 = (Filters::BiquadSection *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadSection(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadSection);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadSection_attributes[] = {
    { "z", _wrap_BiquadSection_z_get, _wrap_BiquadSection_z_set },
    { "p", _wrap_BiquadSection_p_get, _wrap_BiquadSection_p_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadSection_methods[]= {
    { "setCoefficients", _wrap_BiquadSection_setCoefficients},
    { "print", _wrap_BiquadSection_print},
    {0,0}
};
static swig_lua_method swig_BiquadSection_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadSection_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadSection_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadSection_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadSection_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadSection_Sf_SwigStatic = {
    "BiquadSection",
    swig_BiquadSection_Sf_SwigStatic_methods,
    swig_BiquadSection_Sf_SwigStatic_attributes,
    swig_BiquadSection_Sf_SwigStatic_constants,
    swig_BiquadSection_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadSection_bases[] = {0};
static const char *swig_BiquadSection_base_names[] = {0};
static swig_lua_class _wrap_class_BiquadSection = { "BiquadSection", "BiquadSection", &SWIGTYPE_p_Filters__BiquadSection,_proxy__wrap_new_BiquadSection, swig_delete_BiquadSection, swig_BiquadSection_methods, swig_BiquadSection_attributes, &swig_BiquadSection_Sf_SwigStatic, swig_BiquadSection_meta, swig_BiquadSection_bases, swig_BiquadSection_base_names };

static int _wrap_BiquadTransposedTypeII_biquad_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::BiquadSection *arg2 = (Filters::BiquadSection *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::biquad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::biquad",1,"Filters::BiquadTransposedTypeII *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::biquad",2,"Filters::BiquadSection *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_biquad_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_biquad_set",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  if (arg1) (arg1)->biquad = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_biquad_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::BiquadSection *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::biquad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::biquad",1,"Filters::BiquadTransposedTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_biquad_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  result = (Filters::BiquadSection *)& ((arg1)->biquad);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadSection,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_x_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::x",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::x",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_x_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_x_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::x",1,"Filters::BiquadTransposedTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_x_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  result = (Filters::DspFloatType) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_y_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::y",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::y",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_y_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_y_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::y",1,"Filters::BiquadTransposedTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_y_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  result = (Filters::DspFloatType) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_d1_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::d1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::d1",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::d1",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_d1_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->d1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_d1_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::d1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::d1",1,"Filters::BiquadTransposedTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_d1_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  result = (Filters::DspFloatType) ((arg1)->d1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_d2_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::d2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::d2",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::d2",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_d2_set",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->d2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_d2_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::d2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::d2",1,"Filters::BiquadTransposedTypeII *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_d2_get",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  result = (Filters::DspFloatType) ((arg1)->d2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeII__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::BiquadTransposedTypeII",0,0)
  result = (Filters::BiquadTransposedTypeII *)new Filters::BiquadTransposedTypeII();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeII,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeII__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadSection *arg1 = 0 ;
  Filters::BiquadTransposedTypeII *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::BiquadTransposedTypeII",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::BiquadTransposedTypeII",1,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("new_BiquadTransposedTypeII",1,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  result = (Filters::BiquadTransposedTypeII *)new Filters::BiquadTransposedTypeII((Filters::BiquadSection const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadTransposedTypeII,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BiquadTransposedTypeII(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BiquadTransposedTypeII__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadSection, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BiquadTransposedTypeII__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BiquadTransposedTypeII'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTransposedTypeII::BiquadTransposedTypeII()\n"
    "    Filters::BiquadTransposedTypeII::BiquadTransposedTypeII(Filters::BiquadSection const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadTransposedTypeII_setCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::BiquadSection *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::setCoefficients",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::setCoefficients",2,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_setCoefficients",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_setCoefficients",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  (arg1)->setCoefficients((Filters::BiquadSection const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_setBiquad(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::BiquadSection *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::setBiquad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::setBiquad",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::setBiquad",2,"Filters::BiquadSection const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_setBiquad",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Filters__BiquadSection,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_setBiquad",2,SWIGTYPE_p_Filters__BiquadSection);
  }
  
  (arg1)->setBiquad((Filters::BiquadSection const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::DspFloatType arg5 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",4,"Filters::DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",5,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  arg5 = (Filters::DspFloatType)lua_tonumber(L, 5);
  result = (Filters::DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",4,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  result = (Filters::DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",3,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  result = (Filters::DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadTransposedTypeII::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",1,"Filters::BiquadTransposedTypeII *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadTransposedTypeII::Tick",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadTransposedTypeII,0))){
    SWIG_fail_ptr("BiquadTransposedTypeII_Tick",1,SWIGTYPE_p_Filters__BiquadTransposedTypeII);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  result = (Filters::DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadTransposedTypeII_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeII, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadTransposedTypeII_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeII, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadTransposedTypeII_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeII, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadTransposedTypeII_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadTransposedTypeII, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadTransposedTypeII_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadTransposedTypeII_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadTransposedTypeII::Tick(Filters::DspFloatType,Filters::DspFloatType,Filters::DspFloatType,Filters::DspFloatType)\n"
    "    Filters::BiquadTransposedTypeII::Tick(Filters::DspFloatType,Filters::DspFloatType,Filters::DspFloatType)\n"
    "    Filters::BiquadTransposedTypeII::Tick(Filters::DspFloatType,Filters::DspFloatType)\n"
    "    Filters::BiquadTransposedTypeII::Tick(Filters::DspFloatType)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadTransposedTypeII(void *obj) {
Filters::BiquadTransposedTypeII *arg1 = (Filters::BiquadTransposedTypeII *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadTransposedTypeII(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadTransposedTypeII);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadTransposedTypeII_attributes[] = {
    { "biquad", _wrap_BiquadTransposedTypeII_biquad_get, _wrap_BiquadTransposedTypeII_biquad_set },
    { "x", _wrap_BiquadTransposedTypeII_x_get, _wrap_BiquadTransposedTypeII_x_set },
    { "y", _wrap_BiquadTransposedTypeII_y_get, _wrap_BiquadTransposedTypeII_y_set },
    { "d1", _wrap_BiquadTransposedTypeII_d1_get, _wrap_BiquadTransposedTypeII_d1_set },
    { "d2", _wrap_BiquadTransposedTypeII_d2_get, _wrap_BiquadTransposedTypeII_d2_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadTransposedTypeII_methods[]= {
    { "setCoefficients", _wrap_BiquadTransposedTypeII_setCoefficients},
    { "setBiquad", _wrap_BiquadTransposedTypeII_setBiquad},
    { "Tick", _wrap_BiquadTransposedTypeII_Tick},
    {0,0}
};
static swig_lua_method swig_BiquadTransposedTypeII_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadTransposedTypeII_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadTransposedTypeII_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadTransposedTypeII_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadTransposedTypeII_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadTransposedTypeII_Sf_SwigStatic = {
    "BiquadTransposedTypeII",
    swig_BiquadTransposedTypeII_Sf_SwigStatic_methods,
    swig_BiquadTransposedTypeII_Sf_SwigStatic_attributes,
    swig_BiquadTransposedTypeII_Sf_SwigStatic_constants,
    swig_BiquadTransposedTypeII_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadTransposedTypeII_bases[] = {0};
static const char *swig_BiquadTransposedTypeII_base_names[] = {0};
static swig_lua_class _wrap_class_BiquadTransposedTypeII = { "BiquadTransposedTypeII", "BiquadTransposedTypeII", &SWIGTYPE_p_Filters__BiquadTransposedTypeII,_proxy__wrap_new_BiquadTransposedTypeII, swig_delete_BiquadTransposedTypeII, swig_BiquadTransposedTypeII_methods, swig_BiquadTransposedTypeII_attributes, &swig_BiquadTransposedTypeII_Sf_SwigStatic, swig_BiquadTransposedTypeII_meta, swig_BiquadTransposedTypeII_bases, swig_BiquadTransposedTypeII_base_names };

static int _wrap_BiquadFilterBase_biquads_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  std::vector< Filters::BiquadTransposedTypeII > *arg2 = (std::vector< Filters::BiquadTransposedTypeII > *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::biquads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::biquads",1,"Filters::BiquadFilterBase *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::biquads",2,"std::vector< Filters::BiquadTransposedTypeII > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_biquads_set",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadTransposedTypeII_t,0))){
    SWIG_fail_ptr("BiquadFilterBase_biquads_set",2,SWIGTYPE_p_std__vectorT_Filters__BiquadTransposedTypeII_t);
  }
  
  if (arg1) (arg1)->biquads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_biquads_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  std::vector< Filters::BiquadTransposedTypeII > *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::biquads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::biquads",1,"Filters::BiquadFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_biquads_get",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  result = (std::vector< Filters::BiquadTransposedTypeII > *)& ((arg1)->biquads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Filters__BiquadTransposedTypeII_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Order_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Order",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Order",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::Order",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Order_set",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->Order = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Order_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Order",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Order",1,"Filters::BiquadFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Order_get",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  result =  ((arg1)->Order);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Fc_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Fc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Fc",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::Fc",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Fc_set",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fc = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Fc_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Fc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Fc",1,"Filters::BiquadFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Fc_get",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  result = (Filters::DspFloatType) ((arg1)->Fc);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Fs_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Fs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Fs",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::Fs",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Fs_set",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Fs_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Fs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Fs",1,"Filters::BiquadFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Fs_get",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  result = (Filters::DspFloatType) ((arg1)->Fs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Q_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Q",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Q",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::Q",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Q_set",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Q = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Q_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Q",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Q",1,"Filters::BiquadFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Q_get",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  result = (Filters::DspFloatType) ((arg1)->Q);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_rQ_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::rQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::rQ",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::rQ",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_rQ_set",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->rQ = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_rQ_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::rQ",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::rQ",1,"Filters::BiquadFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_rQ_get",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  result = (Filters::DspFloatType) ((arg1)->rQ);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_G_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::G",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::G",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::G",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_G_set",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->G = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_G_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::G",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::G",1,"Filters::BiquadFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_G_get",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  result = (Filters::DspFloatType) ((arg1)->G);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_ripple_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::ripple",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::ripple",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::ripple",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_ripple_set",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->ripple = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_ripple_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::ripple",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::ripple",1,"Filters::BiquadFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_ripple_get",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  result = (Filters::DspFloatType) ((arg1)->ripple);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_bandstop_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::bandstop",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::bandstop",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::bandstop",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_bandstop_set",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->bandstop = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_bandstop_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::bandstop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::bandstop",1,"Filters::BiquadFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_bandstop_get",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  result = (Filters::DspFloatType) ((arg1)->bandstop);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Fu_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Fu",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Fu",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::Fu",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Fu_set",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fu = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Fu_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Fu",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Fu",1,"Filters::BiquadFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Fu_get",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  result = (Filters::DspFloatType) ((arg1)->Fu);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Fl_set(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Fl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Fl",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::Fl",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Fl_set",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  if (arg1) (arg1)->Fl = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Fl_get(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Fl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Fl",1,"Filters::BiquadFilterBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Fl_get",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  result = (Filters::DspFloatType) ((arg1)->Fl);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_setCoefficients(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::BiquadSOS *arg2 = 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::setCoefficients",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::setCoefficients",1,"Filters::BiquadFilterBase *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::setCoefficients",2,"Filters::BiquadSOS const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_setCoefficients",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t,0))){
    SWIG_fail_ptr("BiquadFilterBase_setCoefficients",2,SWIGTYPE_p_std__vectorT_Filters__BiquadSection_t);
  }
  
  (arg1)->setCoefficients((Filters::BiquadSOS const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::setCutoff",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_setCutoff",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::setQ",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::setQ",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_setQ",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::DspFloatType arg5 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",4,"Filters::DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",5,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Tick",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  arg5 = (Filters::DspFloatType)lua_tonumber(L, 5);
  result = (Filters::DspFloatType)(arg1)->Tick(arg2,arg3,arg4,arg5);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",4,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Tick",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  result = (Filters::DspFloatType)(arg1)->Tick(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",3,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Tick",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  result = (Filters::DspFloatType)(arg1)->Tick(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType result;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::Tick",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_Tick",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  result = (Filters::DspFloatType)(arg1)->Tick(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BiquadFilterBase_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BiquadFilterBase_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_BiquadFilterBase_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_BiquadFilterBase_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadFilterBase_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadFilterBase::Tick(Filters::DspFloatType,Filters::DspFloatType,Filters::DspFloatType,Filters::DspFloatType)\n"
    "    Filters::BiquadFilterBase::Tick(Filters::DspFloatType,Filters::DspFloatType,Filters::DspFloatType)\n"
    "    Filters::BiquadFilterBase::Tick(Filters::DspFloatType,Filters::DspFloatType)\n"
    "    Filters::BiquadFilterBase::Tick(Filters::DspFloatType)\n");
  lua_error(L);return 0;
}


static int _wrap_BiquadFilterBase_ProcessBlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  size_t arg2 ;
  Filters::DspFloatType *arg3 = (Filters::DspFloatType *) 0 ;
  Filters::DspFloatType *arg4 = (Filters::DspFloatType *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::ProcessBlock",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filters::BiquadFilterBase::ProcessBlock",3,"Filters::DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Filters::BiquadFilterBase::ProcessBlock",4,"Filters::DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_ProcessBlock",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterBase_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterBase_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_ProcessBlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) 0 ;
  size_t arg2 ;
  Filters::DspFloatType *arg3 = (Filters::DspFloatType *) 0 ;
  Filters::DspFloatType *arg4 = (Filters::DspFloatType *) 0 ;
  Filters::DspFloatType *arg5 = (Filters::DspFloatType *) 0 ;
  Filters::DspFloatType *arg6 = (Filters::DspFloatType *) 0 ;
  Filters::DspFloatType *arg7 = (Filters::DspFloatType *) 0 ;
  
  SWIG_check_num_args("Filters::BiquadFilterBase::ProcessBlock",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadFilterBase::ProcessBlock",1,"Filters::BiquadFilterBase *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadFilterBase::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Filters::BiquadFilterBase::ProcessBlock",3,"Filters::DspFloatType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Filters::BiquadFilterBase::ProcessBlock",4,"Filters::DspFloatType *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Filters::BiquadFilterBase::ProcessBlock",5,"Filters::DspFloatType *");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Filters::BiquadFilterBase::ProcessBlock",6,"Filters::DspFloatType *");
  if(!SWIG_isptrtype(L,7)) SWIG_fail_arg("Filters::BiquadFilterBase::ProcessBlock",7,"Filters::DspFloatType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadFilterBase,0))){
    SWIG_fail_ptr("BiquadFilterBase_ProcessBlock",1,SWIGTYPE_p_Filters__BiquadFilterBase);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterBase_ProcessBlock",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterBase_ProcessBlock",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterBase_ProcessBlock",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterBase_ProcessBlock",6,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&arg7,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BiquadFilterBase_ProcessBlock",7,SWIGTYPE_p_float);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadFilterBase_ProcessBlock(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_BiquadFilterBase_ProcessBlock__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Filters__BiquadFilterBase, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (SWIG_isptrtype(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_float, 0)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_BiquadFilterBase_ProcessBlock__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BiquadFilterBase_ProcessBlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Filters::BiquadFilterBase::ProcessBlock(size_t,Filters::DspFloatType *,Filters::DspFloatType *)\n"
    "    Filters::BiquadFilterBase::ProcessBlock(size_t,Filters::DspFloatType *,Filters::DspFloatType *,Filters::DspFloatType *,Filters::DspFloatType *,Filters::DspFloatType *)\n");
  lua_error(L);return 0;
}


static void swig_delete_BiquadFilterBase(void *obj) {
Filters::BiquadFilterBase *arg1 = (Filters::BiquadFilterBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_BiquadFilterBase_attributes[] = {
    { "biquads", _wrap_BiquadFilterBase_biquads_get, _wrap_BiquadFilterBase_biquads_set },
    { "Order", _wrap_BiquadFilterBase_Order_get, _wrap_BiquadFilterBase_Order_set },
    { "Fc", _wrap_BiquadFilterBase_Fc_get, _wrap_BiquadFilterBase_Fc_set },
    { "Fs", _wrap_BiquadFilterBase_Fs_get, _wrap_BiquadFilterBase_Fs_set },
    { "Q", _wrap_BiquadFilterBase_Q_get, _wrap_BiquadFilterBase_Q_set },
    { "rQ", _wrap_BiquadFilterBase_rQ_get, _wrap_BiquadFilterBase_rQ_set },
    { "G", _wrap_BiquadFilterBase_G_get, _wrap_BiquadFilterBase_G_set },
    { "ripple", _wrap_BiquadFilterBase_ripple_get, _wrap_BiquadFilterBase_ripple_set },
    { "bandstop", _wrap_BiquadFilterBase_bandstop_get, _wrap_BiquadFilterBase_bandstop_set },
    { "Fu", _wrap_BiquadFilterBase_Fu_get, _wrap_BiquadFilterBase_Fu_set },
    { "Fl", _wrap_BiquadFilterBase_Fl_get, _wrap_BiquadFilterBase_Fl_set },
    {0,0,0}
};
static swig_lua_method swig_BiquadFilterBase_methods[]= {
    { "setCoefficients", _wrap_BiquadFilterBase_setCoefficients},
    { "setCutoff", _wrap_BiquadFilterBase_setCutoff},
    { "setQ", _wrap_BiquadFilterBase_setQ},
    { "Tick", _wrap_BiquadFilterBase_Tick},
    { "ProcessBlock", _wrap_BiquadFilterBase_ProcessBlock},
    {0,0}
};
static swig_lua_method swig_BiquadFilterBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadFilterBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadFilterBase_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadFilterBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadFilterBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadFilterBase_Sf_SwigStatic = {
    "BiquadFilterBase",
    swig_BiquadFilterBase_Sf_SwigStatic_methods,
    swig_BiquadFilterBase_Sf_SwigStatic_attributes,
    swig_BiquadFilterBase_Sf_SwigStatic_constants,
    swig_BiquadFilterBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadFilterBase_bases[] = {0};
static const char *swig_BiquadFilterBase_base_names[] = {0};
static swig_lua_class _wrap_class_BiquadFilterBase = { "BiquadFilterBase", "BiquadFilterBase", &SWIGTYPE_p_Filters__BiquadFilterBase,0, swig_delete_BiquadFilterBase, swig_BiquadFilterBase_methods, swig_BiquadFilterBase_attributes, &swig_BiquadFilterBase_Sf_SwigStatic, swig_BiquadFilterBase_meta, swig_BiquadFilterBase_bases, swig_BiquadFilterBase_base_names };

static int _wrap_new_BiquadLowpassFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::BiquadLowpassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadLowpassFilter::BiquadLowpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadLowpassFilter::BiquadLowpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadLowpassFilter::BiquadLowpassFilter",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadLowpassFilter::BiquadLowpassFilter",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadLowpassFilter::BiquadLowpassFilter",4,"Filters::DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  result = (Filters::BiquadLowpassFilter *)new Filters::BiquadLowpassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadLowpassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadLowpassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadLowpassFilter *arg1 = (Filters::BiquadLowpassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadLowpassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadLowpassFilter::setCutoff",1,"Filters::BiquadLowpassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadLowpassFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadLowpassFilter,0))){
    SWIG_fail_ptr("BiquadLowpassFilter_setCutoff",1,SWIGTYPE_p_Filters__BiquadLowpassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadLowpassFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadLowpassFilter *arg1 = (Filters::BiquadLowpassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadLowpassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadLowpassFilter::setQ",1,"Filters::BiquadLowpassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadLowpassFilter::setQ",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadLowpassFilter,0))){
    SWIG_fail_ptr("BiquadLowpassFilter_setQ",1,SWIGTYPE_p_Filters__BiquadLowpassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadLowpassFilter(void *obj) {
Filters::BiquadLowpassFilter *arg1 = (Filters::BiquadLowpassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadLowpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadLowpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadLowpassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BiquadLowpassFilter_methods[]= {
    { "setCutoff", _wrap_BiquadLowpassFilter_setCutoff},
    { "setQ", _wrap_BiquadLowpassFilter_setQ},
    {0,0}
};
static swig_lua_method swig_BiquadLowpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadLowpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadLowpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadLowpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadLowpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadLowpassFilter_Sf_SwigStatic = {
    "BiquadLowpassFilter",
    swig_BiquadLowpassFilter_Sf_SwigStatic_methods,
    swig_BiquadLowpassFilter_Sf_SwigStatic_attributes,
    swig_BiquadLowpassFilter_Sf_SwigStatic_constants,
    swig_BiquadLowpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadLowpassFilter_bases[] = {0,0};
static const char *swig_BiquadLowpassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_BiquadLowpassFilter = { "BiquadLowpassFilter", "BiquadLowpassFilter", &SWIGTYPE_p_Filters__BiquadLowpassFilter,_proxy__wrap_new_BiquadLowpassFilter, swig_delete_BiquadLowpassFilter, swig_BiquadLowpassFilter_methods, swig_BiquadLowpassFilter_attributes, &swig_BiquadLowpassFilter_Sf_SwigStatic, swig_BiquadLowpassFilter_meta, swig_BiquadLowpassFilter_bases, swig_BiquadLowpassFilter_base_names };

static int _wrap_new_BiquadAllpassFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::BiquadAllpassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadAllpassFilter::BiquadAllpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadAllpassFilter::BiquadAllpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadAllpassFilter::BiquadAllpassFilter",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadAllpassFilter::BiquadAllpassFilter",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadAllpassFilter::BiquadAllpassFilter",4,"Filters::DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  result = (Filters::BiquadAllpassFilter *)new Filters::BiquadAllpassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadAllpassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadAllpassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadAllpassFilter *arg1 = (Filters::BiquadAllpassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadAllpassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadAllpassFilter::setCutoff",1,"Filters::BiquadAllpassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadAllpassFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadAllpassFilter,0))){
    SWIG_fail_ptr("BiquadAllpassFilter_setCutoff",1,SWIGTYPE_p_Filters__BiquadAllpassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadAllpassFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadAllpassFilter *arg1 = (Filters::BiquadAllpassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadAllpassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadAllpassFilter::setQ",1,"Filters::BiquadAllpassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadAllpassFilter::setQ",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadAllpassFilter,0))){
    SWIG_fail_ptr("BiquadAllpassFilter_setQ",1,SWIGTYPE_p_Filters__BiquadAllpassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadAllpassFilter(void *obj) {
Filters::BiquadAllpassFilter *arg1 = (Filters::BiquadAllpassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadAllpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadAllpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadAllpassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BiquadAllpassFilter_methods[]= {
    { "setCutoff", _wrap_BiquadAllpassFilter_setCutoff},
    { "setQ", _wrap_BiquadAllpassFilter_setQ},
    {0,0}
};
static swig_lua_method swig_BiquadAllpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadAllpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadAllpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadAllpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadAllpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadAllpassFilter_Sf_SwigStatic = {
    "BiquadAllpassFilter",
    swig_BiquadAllpassFilter_Sf_SwigStatic_methods,
    swig_BiquadAllpassFilter_Sf_SwigStatic_attributes,
    swig_BiquadAllpassFilter_Sf_SwigStatic_constants,
    swig_BiquadAllpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadAllpassFilter_bases[] = {0,0};
static const char *swig_BiquadAllpassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_BiquadAllpassFilter = { "BiquadAllpassFilter", "BiquadAllpassFilter", &SWIGTYPE_p_Filters__BiquadAllpassFilter,_proxy__wrap_new_BiquadAllpassFilter, swig_delete_BiquadAllpassFilter, swig_BiquadAllpassFilter_methods, swig_BiquadAllpassFilter_attributes, &swig_BiquadAllpassFilter_Sf_SwigStatic, swig_BiquadAllpassFilter_meta, swig_BiquadAllpassFilter_bases, swig_BiquadAllpassFilter_base_names };

static int _wrap_new_BiquadHighpassFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::BiquadHighpassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadHighpassFilter::BiquadHighpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadHighpassFilter::BiquadHighpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadHighpassFilter::BiquadHighpassFilter",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadHighpassFilter::BiquadHighpassFilter",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadHighpassFilter::BiquadHighpassFilter",4,"Filters::DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  result = (Filters::BiquadHighpassFilter *)new Filters::BiquadHighpassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadHighpassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadHighpassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadHighpassFilter *arg1 = (Filters::BiquadHighpassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadHighpassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadHighpassFilter::setCutoff",1,"Filters::BiquadHighpassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadHighpassFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadHighpassFilter,0))){
    SWIG_fail_ptr("BiquadHighpassFilter_setCutoff",1,SWIGTYPE_p_Filters__BiquadHighpassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadHighpassFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadHighpassFilter *arg1 = (Filters::BiquadHighpassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadHighpassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadHighpassFilter::setQ",1,"Filters::BiquadHighpassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadHighpassFilter::setQ",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadHighpassFilter,0))){
    SWIG_fail_ptr("BiquadHighpassFilter_setQ",1,SWIGTYPE_p_Filters__BiquadHighpassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadHighpassFilter(void *obj) {
Filters::BiquadHighpassFilter *arg1 = (Filters::BiquadHighpassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadHighpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadHighpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadHighpassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BiquadHighpassFilter_methods[]= {
    { "setCutoff", _wrap_BiquadHighpassFilter_setCutoff},
    { "setQ", _wrap_BiquadHighpassFilter_setQ},
    {0,0}
};
static swig_lua_method swig_BiquadHighpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadHighpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadHighpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadHighpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadHighpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadHighpassFilter_Sf_SwigStatic = {
    "BiquadHighpassFilter",
    swig_BiquadHighpassFilter_Sf_SwigStatic_methods,
    swig_BiquadHighpassFilter_Sf_SwigStatic_attributes,
    swig_BiquadHighpassFilter_Sf_SwigStatic_constants,
    swig_BiquadHighpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadHighpassFilter_bases[] = {0,0};
static const char *swig_BiquadHighpassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_BiquadHighpassFilter = { "BiquadHighpassFilter", "BiquadHighpassFilter", &SWIGTYPE_p_Filters__BiquadHighpassFilter,_proxy__wrap_new_BiquadHighpassFilter, swig_delete_BiquadHighpassFilter, swig_BiquadHighpassFilter_methods, swig_BiquadHighpassFilter_attributes, &swig_BiquadHighpassFilter_Sf_SwigStatic, swig_BiquadHighpassFilter_meta, swig_BiquadHighpassFilter_bases, swig_BiquadHighpassFilter_base_names };

static int _wrap_new_BiquadBandpassFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::BiquadBandpassFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadBandpassFilter::BiquadBandpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadBandpassFilter::BiquadBandpassFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadBandpassFilter::BiquadBandpassFilter",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadBandpassFilter::BiquadBandpassFilter",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadBandpassFilter::BiquadBandpassFilter",4,"Filters::DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  result = (Filters::BiquadBandpassFilter *)new Filters::BiquadBandpassFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadBandpassFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadBandpassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadBandpassFilter *arg1 = (Filters::BiquadBandpassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadBandpassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadBandpassFilter::setCutoff",1,"Filters::BiquadBandpassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadBandpassFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadBandpassFilter,0))){
    SWIG_fail_ptr("BiquadBandpassFilter_setCutoff",1,SWIGTYPE_p_Filters__BiquadBandpassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadBandpassFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadBandpassFilter *arg1 = (Filters::BiquadBandpassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadBandpassFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadBandpassFilter::setQ",1,"Filters::BiquadBandpassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadBandpassFilter::setQ",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadBandpassFilter,0))){
    SWIG_fail_ptr("BiquadBandpassFilter_setQ",1,SWIGTYPE_p_Filters__BiquadBandpassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadBandpassFilter(void *obj) {
Filters::BiquadBandpassFilter *arg1 = (Filters::BiquadBandpassFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadBandpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadBandpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadBandpassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BiquadBandpassFilter_methods[]= {
    { "setCutoff", _wrap_BiquadBandpassFilter_setCutoff},
    { "setQ", _wrap_BiquadBandpassFilter_setQ},
    {0,0}
};
static swig_lua_method swig_BiquadBandpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadBandpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadBandpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadBandpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadBandpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadBandpassFilter_Sf_SwigStatic = {
    "BiquadBandpassFilter",
    swig_BiquadBandpassFilter_Sf_SwigStatic_methods,
    swig_BiquadBandpassFilter_Sf_SwigStatic_attributes,
    swig_BiquadBandpassFilter_Sf_SwigStatic_constants,
    swig_BiquadBandpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadBandpassFilter_bases[] = {0,0};
static const char *swig_BiquadBandpassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_BiquadBandpassFilter = { "BiquadBandpassFilter", "BiquadBandpassFilter", &SWIGTYPE_p_Filters__BiquadBandpassFilter,_proxy__wrap_new_BiquadBandpassFilter, swig_delete_BiquadBandpassFilter, swig_BiquadBandpassFilter_methods, swig_BiquadBandpassFilter_attributes, &swig_BiquadBandpassFilter_Sf_SwigStatic, swig_BiquadBandpassFilter_meta, swig_BiquadBandpassFilter_bases, swig_BiquadBandpassFilter_base_names };

static int _wrap_new_BiquadNotchFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::BiquadNotchFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadNotchFilter::BiquadNotchFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadNotchFilter::BiquadNotchFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadNotchFilter::BiquadNotchFilter",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadNotchFilter::BiquadNotchFilter",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadNotchFilter::BiquadNotchFilter",4,"Filters::DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  result = (Filters::BiquadNotchFilter *)new Filters::BiquadNotchFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadNotchFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadNotchFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadNotchFilter *arg1 = (Filters::BiquadNotchFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadNotchFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadNotchFilter::setCutoff",1,"Filters::BiquadNotchFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadNotchFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadNotchFilter,0))){
    SWIG_fail_ptr("BiquadNotchFilter_setCutoff",1,SWIGTYPE_p_Filters__BiquadNotchFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadNotchFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadNotchFilter *arg1 = (Filters::BiquadNotchFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadNotchFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadNotchFilter::setQ",1,"Filters::BiquadNotchFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadNotchFilter::setQ",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadNotchFilter,0))){
    SWIG_fail_ptr("BiquadNotchFilter_setQ",1,SWIGTYPE_p_Filters__BiquadNotchFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadNotchFilter(void *obj) {
Filters::BiquadNotchFilter *arg1 = (Filters::BiquadNotchFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadNotchFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadNotchFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadNotchFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BiquadNotchFilter_methods[]= {
    { "setCutoff", _wrap_BiquadNotchFilter_setCutoff},
    { "setQ", _wrap_BiquadNotchFilter_setQ},
    {0,0}
};
static swig_lua_method swig_BiquadNotchFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadNotchFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadNotchFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadNotchFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadNotchFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadNotchFilter_Sf_SwigStatic = {
    "BiquadNotchFilter",
    swig_BiquadNotchFilter_Sf_SwigStatic_methods,
    swig_BiquadNotchFilter_Sf_SwigStatic_attributes,
    swig_BiquadNotchFilter_Sf_SwigStatic_constants,
    swig_BiquadNotchFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadNotchFilter_bases[] = {0,0};
static const char *swig_BiquadNotchFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_BiquadNotchFilter = { "BiquadNotchFilter", "BiquadNotchFilter", &SWIGTYPE_p_Filters__BiquadNotchFilter,_proxy__wrap_new_BiquadNotchFilter, swig_delete_BiquadNotchFilter, swig_BiquadNotchFilter_methods, swig_BiquadNotchFilter_attributes, &swig_BiquadNotchFilter_Sf_SwigStatic, swig_BiquadNotchFilter_meta, swig_BiquadNotchFilter_bases, swig_BiquadNotchFilter_base_names };

static int _wrap_new_BiquadPeakFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::DspFloatType arg5 ;
  Filters::BiquadPeakFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadPeakFilter::BiquadPeakFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadPeakFilter::BiquadPeakFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadPeakFilter::BiquadPeakFilter",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadPeakFilter::BiquadPeakFilter",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadPeakFilter::BiquadPeakFilter",4,"Filters::DspFloatType");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Filters::BiquadPeakFilter::BiquadPeakFilter",5,"Filters::DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  arg5 = (Filters::DspFloatType)lua_tonumber(L, 5);
  result = (Filters::BiquadPeakFilter *)new Filters::BiquadPeakFilter(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadPeakFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadPeakFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadPeakFilter *arg1 = (Filters::BiquadPeakFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadPeakFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadPeakFilter::setCutoff",1,"Filters::BiquadPeakFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadPeakFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadPeakFilter,0))){
    SWIG_fail_ptr("BiquadPeakFilter_setCutoff",1,SWIGTYPE_p_Filters__BiquadPeakFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadPeakFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadPeakFilter *arg1 = (Filters::BiquadPeakFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadPeakFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadPeakFilter::setQ",1,"Filters::BiquadPeakFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadPeakFilter::setQ",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadPeakFilter,0))){
    SWIG_fail_ptr("BiquadPeakFilter_setQ",1,SWIGTYPE_p_Filters__BiquadPeakFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadPeakFilter_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadPeakFilter *arg1 = (Filters::BiquadPeakFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadPeakFilter::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadPeakFilter::setGain",1,"Filters::BiquadPeakFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadPeakFilter::setGain",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadPeakFilter,0))){
    SWIG_fail_ptr("BiquadPeakFilter_setGain",1,SWIGTYPE_p_Filters__BiquadPeakFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadPeakFilter(void *obj) {
Filters::BiquadPeakFilter *arg1 = (Filters::BiquadPeakFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadPeakFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadPeakFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadPeakFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BiquadPeakFilter_methods[]= {
    { "setCutoff", _wrap_BiquadPeakFilter_setCutoff},
    { "setQ", _wrap_BiquadPeakFilter_setQ},
    { "setGain", _wrap_BiquadPeakFilter_setGain},
    {0,0}
};
static swig_lua_method swig_BiquadPeakFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadPeakFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadPeakFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadPeakFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadPeakFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadPeakFilter_Sf_SwigStatic = {
    "BiquadPeakFilter",
    swig_BiquadPeakFilter_Sf_SwigStatic_methods,
    swig_BiquadPeakFilter_Sf_SwigStatic_attributes,
    swig_BiquadPeakFilter_Sf_SwigStatic_constants,
    swig_BiquadPeakFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadPeakFilter_bases[] = {0,0};
static const char *swig_BiquadPeakFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_BiquadPeakFilter = { "BiquadPeakFilter", "BiquadPeakFilter", &SWIGTYPE_p_Filters__BiquadPeakFilter,_proxy__wrap_new_BiquadPeakFilter, swig_delete_BiquadPeakFilter, swig_BiquadPeakFilter_methods, swig_BiquadPeakFilter_attributes, &swig_BiquadPeakFilter_Sf_SwigStatic, swig_BiquadPeakFilter_meta, swig_BiquadPeakFilter_bases, swig_BiquadPeakFilter_base_names };

static int _wrap_new_BiquadLowshelfFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::BiquadLowshelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadLowshelfFilter::BiquadLowshelfFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadLowshelfFilter::BiquadLowshelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadLowshelfFilter::BiquadLowshelfFilter",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadLowshelfFilter::BiquadLowshelfFilter",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadLowshelfFilter::BiquadLowshelfFilter",4,"Filters::DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  result = (Filters::BiquadLowshelfFilter *)new Filters::BiquadLowshelfFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadLowshelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadLowshelfFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadLowshelfFilter *arg1 = (Filters::BiquadLowshelfFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadLowshelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadLowshelfFilter::setCutoff",1,"Filters::BiquadLowshelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadLowshelfFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadLowshelfFilter,0))){
    SWIG_fail_ptr("BiquadLowshelfFilter_setCutoff",1,SWIGTYPE_p_Filters__BiquadLowshelfFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadLowshelfFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadLowshelfFilter *arg1 = (Filters::BiquadLowshelfFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadLowshelfFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadLowshelfFilter::setQ",1,"Filters::BiquadLowshelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadLowshelfFilter::setQ",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadLowshelfFilter,0))){
    SWIG_fail_ptr("BiquadLowshelfFilter_setQ",1,SWIGTYPE_p_Filters__BiquadLowshelfFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadLowshelfFilter_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadLowshelfFilter *arg1 = (Filters::BiquadLowshelfFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadLowshelfFilter::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadLowshelfFilter::setGain",1,"Filters::BiquadLowshelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadLowshelfFilter::setGain",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadLowshelfFilter,0))){
    SWIG_fail_ptr("BiquadLowshelfFilter_setGain",1,SWIGTYPE_p_Filters__BiquadLowshelfFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadLowshelfFilter(void *obj) {
Filters::BiquadLowshelfFilter *arg1 = (Filters::BiquadLowshelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadLowshelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadLowshelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadLowshelfFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BiquadLowshelfFilter_methods[]= {
    { "setCutoff", _wrap_BiquadLowshelfFilter_setCutoff},
    { "setQ", _wrap_BiquadLowshelfFilter_setQ},
    { "setGain", _wrap_BiquadLowshelfFilter_setGain},
    {0,0}
};
static swig_lua_method swig_BiquadLowshelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadLowshelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadLowshelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadLowshelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadLowshelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadLowshelfFilter_Sf_SwigStatic = {
    "BiquadLowshelfFilter",
    swig_BiquadLowshelfFilter_Sf_SwigStatic_methods,
    swig_BiquadLowshelfFilter_Sf_SwigStatic_attributes,
    swig_BiquadLowshelfFilter_Sf_SwigStatic_constants,
    swig_BiquadLowshelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadLowshelfFilter_bases[] = {0,0};
static const char *swig_BiquadLowshelfFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_BiquadLowshelfFilter = { "BiquadLowshelfFilter", "BiquadLowshelfFilter", &SWIGTYPE_p_Filters__BiquadLowshelfFilter,_proxy__wrap_new_BiquadLowshelfFilter, swig_delete_BiquadLowshelfFilter, swig_BiquadLowshelfFilter_methods, swig_BiquadLowshelfFilter_attributes, &swig_BiquadLowshelfFilter_Sf_SwigStatic, swig_BiquadLowshelfFilter_meta, swig_BiquadLowshelfFilter_bases, swig_BiquadLowshelfFilter_base_names };

static int _wrap_new_BiquadHighshelfFilter(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  Filters::DspFloatType arg4 ;
  Filters::BiquadHighshelfFilter *result = 0 ;
  
  SWIG_check_num_args("Filters::BiquadHighshelfFilter::BiquadHighshelfFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Filters::BiquadHighshelfFilter::BiquadHighshelfFilter",1,"size_t");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadHighshelfFilter::BiquadHighshelfFilter",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BiquadHighshelfFilter::BiquadHighshelfFilter",3,"Filters::DspFloatType");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Filters::BiquadHighshelfFilter::BiquadHighshelfFilter",4,"Filters::DspFloatType");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  arg4 = (Filters::DspFloatType)lua_tonumber(L, 4);
  result = (Filters::BiquadHighshelfFilter *)new Filters::BiquadHighshelfFilter(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Filters__BiquadHighshelfFilter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadHighshelfFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadHighshelfFilter *arg1 = (Filters::BiquadHighshelfFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadHighshelfFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadHighshelfFilter::setCutoff",1,"Filters::BiquadHighshelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadHighshelfFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadHighshelfFilter,0))){
    SWIG_fail_ptr("BiquadHighshelfFilter_setCutoff",1,SWIGTYPE_p_Filters__BiquadHighshelfFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadHighshelfFilter_setQ(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadHighshelfFilter *arg1 = (Filters::BiquadHighshelfFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadHighshelfFilter::setQ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadHighshelfFilter::setQ",1,"Filters::BiquadHighshelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadHighshelfFilter::setQ",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadHighshelfFilter,0))){
    SWIG_fail_ptr("BiquadHighshelfFilter_setQ",1,SWIGTYPE_p_Filters__BiquadHighshelfFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setQ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BiquadHighshelfFilter_setGain(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BiquadHighshelfFilter *arg1 = (Filters::BiquadHighshelfFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BiquadHighshelfFilter::setGain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BiquadHighshelfFilter::setGain",1,"Filters::BiquadHighshelfFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BiquadHighshelfFilter::setGain",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BiquadHighshelfFilter,0))){
    SWIG_fail_ptr("BiquadHighshelfFilter_setGain",1,SWIGTYPE_p_Filters__BiquadHighshelfFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setGain(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BiquadHighshelfFilter(void *obj) {
Filters::BiquadHighshelfFilter *arg1 = (Filters::BiquadHighshelfFilter *) obj;
delete arg1;
}
static int _proxy__wrap_new_BiquadHighshelfFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BiquadHighshelfFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BiquadHighshelfFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BiquadHighshelfFilter_methods[]= {
    { "setCutoff", _wrap_BiquadHighshelfFilter_setCutoff},
    { "setQ", _wrap_BiquadHighshelfFilter_setQ},
    { "setGain", _wrap_BiquadHighshelfFilter_setGain},
    {0,0}
};
static swig_lua_method swig_BiquadHighshelfFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BiquadHighshelfFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BiquadHighshelfFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BiquadHighshelfFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BiquadHighshelfFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BiquadHighshelfFilter_Sf_SwigStatic = {
    "BiquadHighshelfFilter",
    swig_BiquadHighshelfFilter_Sf_SwigStatic_methods,
    swig_BiquadHighshelfFilter_Sf_SwigStatic_attributes,
    swig_BiquadHighshelfFilter_Sf_SwigStatic_constants,
    swig_BiquadHighshelfFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BiquadHighshelfFilter_bases[] = {0,0};
static const char *swig_BiquadHighshelfFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_BiquadHighshelfFilter = { "BiquadHighshelfFilter", "BiquadHighshelfFilter", &SWIGTYPE_p_Filters__BiquadHighshelfFilter,_proxy__wrap_new_BiquadHighshelfFilter, swig_delete_BiquadHighshelfFilter, swig_BiquadHighshelfFilter_methods, swig_BiquadHighshelfFilter_attributes, &swig_BiquadHighshelfFilter_Sf_SwigStatic, swig_BiquadHighshelfFilter_meta, swig_BiquadHighshelfFilter_bases, swig_BiquadHighshelfFilter_base_names };

static int _wrap_BesselLowPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BesselLowPassFilter *arg1 = (Filters::BesselLowPassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BesselLowPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BesselLowPassFilter::setCutoff",1,"Filters::BesselLowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BesselLowPassFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BesselLowPassFilter,0))){
    SWIG_fail_ptr("BesselLowPassFilter_setCutoff",1,SWIGTYPE_p_Filters__BesselLowPassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BesselLowPassFilter(void *obj) {
Filters::BesselLowPassFilter *arg1 = (Filters::BesselLowPassFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_BesselLowPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BesselLowPassFilter_methods[]= {
    { "setCutoff", _wrap_BesselLowPassFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_BesselLowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselLowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselLowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselLowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselLowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselLowPassFilter_Sf_SwigStatic = {
    "BesselLowPassFilter",
    swig_BesselLowPassFilter_Sf_SwigStatic_methods,
    swig_BesselLowPassFilter_Sf_SwigStatic_attributes,
    swig_BesselLowPassFilter_Sf_SwigStatic_constants,
    swig_BesselLowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselLowPassFilter_bases[] = {0,0};
static const char *swig_BesselLowPassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_BesselLowPassFilter = { "BesselLowPassFilter", "BesselLowPassFilter", &SWIGTYPE_p_Filters__BesselLowPassFilter,0, swig_delete_BesselLowPassFilter, swig_BesselLowPassFilter_methods, swig_BesselLowPassFilter_attributes, &swig_BesselLowPassFilter_Sf_SwigStatic, swig_BesselLowPassFilter_meta, swig_BesselLowPassFilter_bases, swig_BesselLowPassFilter_base_names };

static int _wrap_BesselHighPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BesselHighPassFilter *arg1 = (Filters::BesselHighPassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::BesselHighPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BesselHighPassFilter::setCutoff",1,"Filters::BesselHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BesselHighPassFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BesselHighPassFilter,0))){
    SWIG_fail_ptr("BesselHighPassFilter_setCutoff",1,SWIGTYPE_p_Filters__BesselHighPassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BesselHighPassFilter(void *obj) {
Filters::BesselHighPassFilter *arg1 = (Filters::BesselHighPassFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_BesselHighPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BesselHighPassFilter_methods[]= {
    { "setCutoff", _wrap_BesselHighPassFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_BesselHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselHighPassFilter_Sf_SwigStatic = {
    "BesselHighPassFilter",
    swig_BesselHighPassFilter_Sf_SwigStatic_methods,
    swig_BesselHighPassFilter_Sf_SwigStatic_attributes,
    swig_BesselHighPassFilter_Sf_SwigStatic_constants,
    swig_BesselHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselHighPassFilter_bases[] = {0,0};
static const char *swig_BesselHighPassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_BesselHighPassFilter = { "BesselHighPassFilter", "BesselHighPassFilter", &SWIGTYPE_p_Filters__BesselHighPassFilter,0, swig_delete_BesselHighPassFilter, swig_BesselHighPassFilter_methods, swig_BesselHighPassFilter_attributes, &swig_BesselHighPassFilter_Sf_SwigStatic, swig_BesselHighPassFilter_meta, swig_BesselHighPassFilter_bases, swig_BesselHighPassFilter_base_names };

static int _wrap_BesselBandPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BesselBandPassFilter *arg1 = (Filters::BesselBandPassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::BesselBandPassFilter::setCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BesselBandPassFilter::setCutoff",1,"Filters::BesselBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BesselBandPassFilter::setCutoff",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BesselBandPassFilter::setCutoff",3,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BesselBandPassFilter,0))){
    SWIG_fail_ptr("BesselBandPassFilter_setCutoff",1,SWIGTYPE_p_Filters__BesselBandPassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  (arg1)->setCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BesselBandPassFilter(void *obj) {
Filters::BesselBandPassFilter *arg1 = (Filters::BesselBandPassFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_BesselBandPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BesselBandPassFilter_methods[]= {
    { "setCutoff", _wrap_BesselBandPassFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_BesselBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselBandPassFilter_Sf_SwigStatic = {
    "BesselBandPassFilter",
    swig_BesselBandPassFilter_Sf_SwigStatic_methods,
    swig_BesselBandPassFilter_Sf_SwigStatic_attributes,
    swig_BesselBandPassFilter_Sf_SwigStatic_constants,
    swig_BesselBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselBandPassFilter_bases[] = {0,0};
static const char *swig_BesselBandPassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_BesselBandPassFilter = { "BesselBandPassFilter", "BesselBandPassFilter", &SWIGTYPE_p_Filters__BesselBandPassFilter,0, swig_delete_BesselBandPassFilter, swig_BesselBandPassFilter_methods, swig_BesselBandPassFilter_attributes, &swig_BesselBandPassFilter_Sf_SwigStatic, swig_BesselBandPassFilter_meta, swig_BesselBandPassFilter_bases, swig_BesselBandPassFilter_base_names };

static int _wrap_BesselBandStopFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::BesselBandStopFilter *arg1 = (Filters::BesselBandStopFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::BesselBandStopFilter::setCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::BesselBandStopFilter::setCutoff",1,"Filters::BesselBandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::BesselBandStopFilter::setCutoff",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::BesselBandStopFilter::setCutoff",3,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__BesselBandStopFilter,0))){
    SWIG_fail_ptr("BesselBandStopFilter_setCutoff",1,SWIGTYPE_p_Filters__BesselBandStopFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  (arg1)->setCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BesselBandStopFilter(void *obj) {
Filters::BesselBandStopFilter *arg1 = (Filters::BesselBandStopFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_BesselBandStopFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BesselBandStopFilter_methods[]= {
    { "setCutoff", _wrap_BesselBandStopFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_BesselBandStopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BesselBandStopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BesselBandStopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BesselBandStopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BesselBandStopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BesselBandStopFilter_Sf_SwigStatic = {
    "BesselBandStopFilter",
    swig_BesselBandStopFilter_Sf_SwigStatic_methods,
    swig_BesselBandStopFilter_Sf_SwigStatic_attributes,
    swig_BesselBandStopFilter_Sf_SwigStatic_constants,
    swig_BesselBandStopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BesselBandStopFilter_bases[] = {0,0};
static const char *swig_BesselBandStopFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_BesselBandStopFilter = { "BesselBandStopFilter", "BesselBandStopFilter", &SWIGTYPE_p_Filters__BesselBandStopFilter,0, swig_delete_BesselBandStopFilter, swig_BesselBandStopFilter_methods, swig_BesselBandStopFilter_attributes, &swig_BesselBandStopFilter_Sf_SwigStatic, swig_BesselBandStopFilter_meta, swig_BesselBandStopFilter_bases, swig_BesselBandStopFilter_base_names };

static int _wrap_ButterworthLowPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::ButterworthLowPassFilter *arg1 = (Filters::ButterworthLowPassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::ButterworthLowPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::ButterworthLowPassFilter::setCutoff",1,"Filters::ButterworthLowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ButterworthLowPassFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__ButterworthLowPassFilter,0))){
    SWIG_fail_ptr("ButterworthLowPassFilter_setCutoff",1,SWIGTYPE_p_Filters__ButterworthLowPassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthLowPassFilter(void *obj) {
Filters::ButterworthLowPassFilter *arg1 = (Filters::ButterworthLowPassFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_ButterworthLowPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ButterworthLowPassFilter_methods[]= {
    { "setCutoff", _wrap_ButterworthLowPassFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_ButterworthLowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthLowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthLowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthLowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthLowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthLowPassFilter_Sf_SwigStatic = {
    "ButterworthLowPassFilter",
    swig_ButterworthLowPassFilter_Sf_SwigStatic_methods,
    swig_ButterworthLowPassFilter_Sf_SwigStatic_attributes,
    swig_ButterworthLowPassFilter_Sf_SwigStatic_constants,
    swig_ButterworthLowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthLowPassFilter_bases[] = {0,0};
static const char *swig_ButterworthLowPassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_ButterworthLowPassFilter = { "ButterworthLowPassFilter", "ButterworthLowPassFilter", &SWIGTYPE_p_Filters__ButterworthLowPassFilter,0, swig_delete_ButterworthLowPassFilter, swig_ButterworthLowPassFilter_methods, swig_ButterworthLowPassFilter_attributes, &swig_ButterworthLowPassFilter_Sf_SwigStatic, swig_ButterworthLowPassFilter_meta, swig_ButterworthLowPassFilter_bases, swig_ButterworthLowPassFilter_base_names };

static int _wrap_ButterworthHighPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::ButterworthHighPassFilter *arg1 = (Filters::ButterworthHighPassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::ButterworthHighPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::ButterworthHighPassFilter::setCutoff",1,"Filters::ButterworthHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ButterworthHighPassFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__ButterworthHighPassFilter,0))){
    SWIG_fail_ptr("ButterworthHighPassFilter_setCutoff",1,SWIGTYPE_p_Filters__ButterworthHighPassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthHighPassFilter(void *obj) {
Filters::ButterworthHighPassFilter *arg1 = (Filters::ButterworthHighPassFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_ButterworthHighPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ButterworthHighPassFilter_methods[]= {
    { "setCutoff", _wrap_ButterworthHighPassFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_ButterworthHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthHighPassFilter_Sf_SwigStatic = {
    "ButterworthHighPassFilter",
    swig_ButterworthHighPassFilter_Sf_SwigStatic_methods,
    swig_ButterworthHighPassFilter_Sf_SwigStatic_attributes,
    swig_ButterworthHighPassFilter_Sf_SwigStatic_constants,
    swig_ButterworthHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthHighPassFilter_bases[] = {0,0};
static const char *swig_ButterworthHighPassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_ButterworthHighPassFilter = { "ButterworthHighPassFilter", "ButterworthHighPassFilter", &SWIGTYPE_p_Filters__ButterworthHighPassFilter,0, swig_delete_ButterworthHighPassFilter, swig_ButterworthHighPassFilter_methods, swig_ButterworthHighPassFilter_attributes, &swig_ButterworthHighPassFilter_Sf_SwigStatic, swig_ButterworthHighPassFilter_meta, swig_ButterworthHighPassFilter_bases, swig_ButterworthHighPassFilter_base_names };

static int _wrap_ButterworthBandPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::ButterworthBandPassFilter *arg1 = (Filters::ButterworthBandPassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::ButterworthBandPassFilter::setCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::ButterworthBandPassFilter::setCutoff",1,"Filters::ButterworthBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ButterworthBandPassFilter::setCutoff",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ButterworthBandPassFilter::setCutoff",3,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__ButterworthBandPassFilter,0))){
    SWIG_fail_ptr("ButterworthBandPassFilter_setCutoff",1,SWIGTYPE_p_Filters__ButterworthBandPassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  (arg1)->setCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthBandPassFilter(void *obj) {
Filters::ButterworthBandPassFilter *arg1 = (Filters::ButterworthBandPassFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_ButterworthBandPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ButterworthBandPassFilter_methods[]= {
    { "setCutoff", _wrap_ButterworthBandPassFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_ButterworthBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthBandPassFilter_Sf_SwigStatic = {
    "ButterworthBandPassFilter",
    swig_ButterworthBandPassFilter_Sf_SwigStatic_methods,
    swig_ButterworthBandPassFilter_Sf_SwigStatic_attributes,
    swig_ButterworthBandPassFilter_Sf_SwigStatic_constants,
    swig_ButterworthBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthBandPassFilter_bases[] = {0,0};
static const char *swig_ButterworthBandPassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_ButterworthBandPassFilter = { "ButterworthBandPassFilter", "ButterworthBandPassFilter", &SWIGTYPE_p_Filters__ButterworthBandPassFilter,0, swig_delete_ButterworthBandPassFilter, swig_ButterworthBandPassFilter_methods, swig_ButterworthBandPassFilter_attributes, &swig_ButterworthBandPassFilter_Sf_SwigStatic, swig_ButterworthBandPassFilter_meta, swig_ButterworthBandPassFilter_bases, swig_ButterworthBandPassFilter_base_names };

static int _wrap_ButterworthBandStopFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::ButterworthBandStopFilter *arg1 = (Filters::ButterworthBandStopFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::ButterworthBandStopFilter::setCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::ButterworthBandStopFilter::setCutoff",1,"Filters::ButterworthBandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ButterworthBandStopFilter::setCutoff",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ButterworthBandStopFilter::setCutoff",3,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__ButterworthBandStopFilter,0))){
    SWIG_fail_ptr("ButterworthBandStopFilter_setCutoff",1,SWIGTYPE_p_Filters__ButterworthBandStopFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  (arg1)->setCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ButterworthBandStopFilter(void *obj) {
Filters::ButterworthBandStopFilter *arg1 = (Filters::ButterworthBandStopFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_ButterworthBandStopFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ButterworthBandStopFilter_methods[]= {
    { "setCutoff", _wrap_ButterworthBandStopFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_ButterworthBandStopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ButterworthBandStopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ButterworthBandStopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ButterworthBandStopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ButterworthBandStopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ButterworthBandStopFilter_Sf_SwigStatic = {
    "ButterworthBandStopFilter",
    swig_ButterworthBandStopFilter_Sf_SwigStatic_methods,
    swig_ButterworthBandStopFilter_Sf_SwigStatic_attributes,
    swig_ButterworthBandStopFilter_Sf_SwigStatic_constants,
    swig_ButterworthBandStopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ButterworthBandStopFilter_bases[] = {0,0};
static const char *swig_ButterworthBandStopFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_ButterworthBandStopFilter = { "ButterworthBandStopFilter", "ButterworthBandStopFilter", &SWIGTYPE_p_Filters__ButterworthBandStopFilter,0, swig_delete_ButterworthBandStopFilter, swig_ButterworthBandStopFilter_methods, swig_ButterworthBandStopFilter_attributes, &swig_ButterworthBandStopFilter_Sf_SwigStatic, swig_ButterworthBandStopFilter_meta, swig_ButterworthBandStopFilter_bases, swig_ButterworthBandStopFilter_base_names };

static int _wrap_ChebyshevILowPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::ChebyshevILowPassFilter *arg1 = (Filters::ChebyshevILowPassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::ChebyshevILowPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::ChebyshevILowPassFilter::setCutoff",1,"Filters::ChebyshevILowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ChebyshevILowPassFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__ChebyshevILowPassFilter,0))){
    SWIG_fail_ptr("ChebyshevILowPassFilter_setCutoff",1,SWIGTYPE_p_Filters__ChebyshevILowPassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevILowPassFilter(void *obj) {
Filters::ChebyshevILowPassFilter *arg1 = (Filters::ChebyshevILowPassFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_ChebyshevILowPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevILowPassFilter_methods[]= {
    { "setCutoff", _wrap_ChebyshevILowPassFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_ChebyshevILowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevILowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevILowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevILowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevILowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevILowPassFilter_Sf_SwigStatic = {
    "ChebyshevILowPassFilter",
    swig_ChebyshevILowPassFilter_Sf_SwigStatic_methods,
    swig_ChebyshevILowPassFilter_Sf_SwigStatic_attributes,
    swig_ChebyshevILowPassFilter_Sf_SwigStatic_constants,
    swig_ChebyshevILowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevILowPassFilter_bases[] = {0,0};
static const char *swig_ChebyshevILowPassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_ChebyshevILowPassFilter = { "ChebyshevILowPassFilter", "ChebyshevILowPassFilter", &SWIGTYPE_p_Filters__ChebyshevILowPassFilter,0, swig_delete_ChebyshevILowPassFilter, swig_ChebyshevILowPassFilter_methods, swig_ChebyshevILowPassFilter_attributes, &swig_ChebyshevILowPassFilter_Sf_SwigStatic, swig_ChebyshevILowPassFilter_meta, swig_ChebyshevILowPassFilter_bases, swig_ChebyshevILowPassFilter_base_names };

static int _wrap_ChebyshevIHighPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::ChebyshevIHighPassFilter *arg1 = (Filters::ChebyshevIHighPassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::ChebyshevIHighPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::ChebyshevIHighPassFilter::setCutoff",1,"Filters::ChebyshevIHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ChebyshevIHighPassFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__ChebyshevIHighPassFilter,0))){
    SWIG_fail_ptr("ChebyshevIHighPassFilter_setCutoff",1,SWIGTYPE_p_Filters__ChebyshevIHighPassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIHighPassFilter(void *obj) {
Filters::ChebyshevIHighPassFilter *arg1 = (Filters::ChebyshevIHighPassFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_ChebyshevIHighPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIHighPassFilter_methods[]= {
    { "setCutoff", _wrap_ChebyshevIHighPassFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_ChebyshevIHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIHighPassFilter_Sf_SwigStatic = {
    "ChebyshevIHighPassFilter",
    swig_ChebyshevIHighPassFilter_Sf_SwigStatic_methods,
    swig_ChebyshevIHighPassFilter_Sf_SwigStatic_attributes,
    swig_ChebyshevIHighPassFilter_Sf_SwigStatic_constants,
    swig_ChebyshevIHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIHighPassFilter_bases[] = {0,0};
static const char *swig_ChebyshevIHighPassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_ChebyshevIHighPassFilter = { "ChebyshevIHighPassFilter", "ChebyshevIHighPassFilter", &SWIGTYPE_p_Filters__ChebyshevIHighPassFilter,0, swig_delete_ChebyshevIHighPassFilter, swig_ChebyshevIHighPassFilter_methods, swig_ChebyshevIHighPassFilter_attributes, &swig_ChebyshevIHighPassFilter_Sf_SwigStatic, swig_ChebyshevIHighPassFilter_meta, swig_ChebyshevIHighPassFilter_bases, swig_ChebyshevIHighPassFilter_base_names };

static int _wrap_ChebyshevIBandPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::ChebyshevIBandPassFilter *arg1 = (Filters::ChebyshevIBandPassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::ChebyshevIBandPassFilter::setCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::ChebyshevIBandPassFilter::setCutoff",1,"Filters::ChebyshevIBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ChebyshevIBandPassFilter::setCutoff",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ChebyshevIBandPassFilter::setCutoff",3,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__ChebyshevIBandPassFilter,0))){
    SWIG_fail_ptr("ChebyshevIBandPassFilter_setCutoff",1,SWIGTYPE_p_Filters__ChebyshevIBandPassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  (arg1)->setCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIBandPassFilter(void *obj) {
Filters::ChebyshevIBandPassFilter *arg1 = (Filters::ChebyshevIBandPassFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_ChebyshevIBandPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIBandPassFilter_methods[]= {
    { "setCutoff", _wrap_ChebyshevIBandPassFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_ChebyshevIBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIBandPassFilter_Sf_SwigStatic = {
    "ChebyshevIBandPassFilter",
    swig_ChebyshevIBandPassFilter_Sf_SwigStatic_methods,
    swig_ChebyshevIBandPassFilter_Sf_SwigStatic_attributes,
    swig_ChebyshevIBandPassFilter_Sf_SwigStatic_constants,
    swig_ChebyshevIBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIBandPassFilter_bases[] = {0,0};
static const char *swig_ChebyshevIBandPassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_ChebyshevIBandPassFilter = { "ChebyshevIBandPassFilter", "ChebyshevIBandPassFilter", &SWIGTYPE_p_Filters__ChebyshevIBandPassFilter,0, swig_delete_ChebyshevIBandPassFilter, swig_ChebyshevIBandPassFilter_methods, swig_ChebyshevIBandPassFilter_attributes, &swig_ChebyshevIBandPassFilter_Sf_SwigStatic, swig_ChebyshevIBandPassFilter_meta, swig_ChebyshevIBandPassFilter_bases, swig_ChebyshevIBandPassFilter_base_names };

static int _wrap_ChebyshevIBandStopFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::ChebyshevIBandStopFilter *arg1 = (Filters::ChebyshevIBandStopFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::ChebyshevIBandStopFilter::setCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::ChebyshevIBandStopFilter::setCutoff",1,"Filters::ChebyshevIBandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ChebyshevIBandStopFilter::setCutoff",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ChebyshevIBandStopFilter::setCutoff",3,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__ChebyshevIBandStopFilter,0))){
    SWIG_fail_ptr("ChebyshevIBandStopFilter_setCutoff",1,SWIGTYPE_p_Filters__ChebyshevIBandStopFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  (arg1)->setCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIBandStopFilter(void *obj) {
Filters::ChebyshevIBandStopFilter *arg1 = (Filters::ChebyshevIBandStopFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_ChebyshevIBandStopFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIBandStopFilter_methods[]= {
    { "setCutoff", _wrap_ChebyshevIBandStopFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_ChebyshevIBandStopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIBandStopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIBandStopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIBandStopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIBandStopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIBandStopFilter_Sf_SwigStatic = {
    "ChebyshevIBandStopFilter",
    swig_ChebyshevIBandStopFilter_Sf_SwigStatic_methods,
    swig_ChebyshevIBandStopFilter_Sf_SwigStatic_attributes,
    swig_ChebyshevIBandStopFilter_Sf_SwigStatic_constants,
    swig_ChebyshevIBandStopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIBandStopFilter_bases[] = {0,0};
static const char *swig_ChebyshevIBandStopFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_ChebyshevIBandStopFilter = { "ChebyshevIBandStopFilter", "ChebyshevIBandStopFilter", &SWIGTYPE_p_Filters__ChebyshevIBandStopFilter,0, swig_delete_ChebyshevIBandStopFilter, swig_ChebyshevIBandStopFilter_methods, swig_ChebyshevIBandStopFilter_attributes, &swig_ChebyshevIBandStopFilter_Sf_SwigStatic, swig_ChebyshevIBandStopFilter_meta, swig_ChebyshevIBandStopFilter_bases, swig_ChebyshevIBandStopFilter_base_names };

static int _wrap_ChebyshevIILowPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::ChebyshevIILowPassFilter *arg1 = (Filters::ChebyshevIILowPassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::ChebyshevIILowPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::ChebyshevIILowPassFilter::setCutoff",1,"Filters::ChebyshevIILowPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ChebyshevIILowPassFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__ChebyshevIILowPassFilter,0))){
    SWIG_fail_ptr("ChebyshevIILowPassFilter_setCutoff",1,SWIGTYPE_p_Filters__ChebyshevIILowPassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIILowPassFilter(void *obj) {
Filters::ChebyshevIILowPassFilter *arg1 = (Filters::ChebyshevIILowPassFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_ChebyshevIILowPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIILowPassFilter_methods[]= {
    { "setCutoff", _wrap_ChebyshevIILowPassFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_ChebyshevIILowPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIILowPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIILowPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIILowPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIILowPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIILowPassFilter_Sf_SwigStatic = {
    "ChebyshevIILowPassFilter",
    swig_ChebyshevIILowPassFilter_Sf_SwigStatic_methods,
    swig_ChebyshevIILowPassFilter_Sf_SwigStatic_attributes,
    swig_ChebyshevIILowPassFilter_Sf_SwigStatic_constants,
    swig_ChebyshevIILowPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIILowPassFilter_bases[] = {0,0};
static const char *swig_ChebyshevIILowPassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_ChebyshevIILowPassFilter = { "ChebyshevIILowPassFilter", "ChebyshevIILowPassFilter", &SWIGTYPE_p_Filters__ChebyshevIILowPassFilter,0, swig_delete_ChebyshevIILowPassFilter, swig_ChebyshevIILowPassFilter_methods, swig_ChebyshevIILowPassFilter_attributes, &swig_ChebyshevIILowPassFilter_Sf_SwigStatic, swig_ChebyshevIILowPassFilter_meta, swig_ChebyshevIILowPassFilter_bases, swig_ChebyshevIILowPassFilter_base_names };

static int _wrap_ChebyshevIIHighPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::ChebyshevIIHighPassFilter *arg1 = (Filters::ChebyshevIIHighPassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  
  SWIG_check_num_args("Filters::ChebyshevIIHighPassFilter::setCutoff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::ChebyshevIIHighPassFilter::setCutoff",1,"Filters::ChebyshevIIHighPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ChebyshevIIHighPassFilter::setCutoff",2,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__ChebyshevIIHighPassFilter,0))){
    SWIG_fail_ptr("ChebyshevIIHighPassFilter_setCutoff",1,SWIGTYPE_p_Filters__ChebyshevIIHighPassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  (arg1)->setCutoff(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIIHighPassFilter(void *obj) {
Filters::ChebyshevIIHighPassFilter *arg1 = (Filters::ChebyshevIIHighPassFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_ChebyshevIIHighPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIIHighPassFilter_methods[]= {
    { "setCutoff", _wrap_ChebyshevIIHighPassFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_ChebyshevIIHighPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIIHighPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIIHighPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIIHighPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIIHighPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIIHighPassFilter_Sf_SwigStatic = {
    "ChebyshevIIHighPassFilter",
    swig_ChebyshevIIHighPassFilter_Sf_SwigStatic_methods,
    swig_ChebyshevIIHighPassFilter_Sf_SwigStatic_attributes,
    swig_ChebyshevIIHighPassFilter_Sf_SwigStatic_constants,
    swig_ChebyshevIIHighPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIIHighPassFilter_bases[] = {0,0};
static const char *swig_ChebyshevIIHighPassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_ChebyshevIIHighPassFilter = { "ChebyshevIIHighPassFilter", "ChebyshevIIHighPassFilter", &SWIGTYPE_p_Filters__ChebyshevIIHighPassFilter,0, swig_delete_ChebyshevIIHighPassFilter, swig_ChebyshevIIHighPassFilter_methods, swig_ChebyshevIIHighPassFilter_attributes, &swig_ChebyshevIIHighPassFilter_Sf_SwigStatic, swig_ChebyshevIIHighPassFilter_meta, swig_ChebyshevIIHighPassFilter_bases, swig_ChebyshevIIHighPassFilter_base_names };

static int _wrap_ChebyshevIIBandPassFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::ChebyshevIIBandPassFilter *arg1 = (Filters::ChebyshevIIBandPassFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::ChebyshevIIBandPassFilter::setCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::ChebyshevIIBandPassFilter::setCutoff",1,"Filters::ChebyshevIIBandPassFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ChebyshevIIBandPassFilter::setCutoff",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ChebyshevIIBandPassFilter::setCutoff",3,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__ChebyshevIIBandPassFilter,0))){
    SWIG_fail_ptr("ChebyshevIIBandPassFilter_setCutoff",1,SWIGTYPE_p_Filters__ChebyshevIIBandPassFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  (arg1)->setCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIIBandPassFilter(void *obj) {
Filters::ChebyshevIIBandPassFilter *arg1 = (Filters::ChebyshevIIBandPassFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_ChebyshevIIBandPassFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIIBandPassFilter_methods[]= {
    { "setCutoff", _wrap_ChebyshevIIBandPassFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_ChebyshevIIBandPassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIIBandPassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIIBandPassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIIBandPassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIIBandPassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIIBandPassFilter_Sf_SwigStatic = {
    "ChebyshevIIBandPassFilter",
    swig_ChebyshevIIBandPassFilter_Sf_SwigStatic_methods,
    swig_ChebyshevIIBandPassFilter_Sf_SwigStatic_attributes,
    swig_ChebyshevIIBandPassFilter_Sf_SwigStatic_constants,
    swig_ChebyshevIIBandPassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIIBandPassFilter_bases[] = {0,0};
static const char *swig_ChebyshevIIBandPassFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_ChebyshevIIBandPassFilter = { "ChebyshevIIBandPassFilter", "ChebyshevIIBandPassFilter", &SWIGTYPE_p_Filters__ChebyshevIIBandPassFilter,0, swig_delete_ChebyshevIIBandPassFilter, swig_ChebyshevIIBandPassFilter_methods, swig_ChebyshevIIBandPassFilter_attributes, &swig_ChebyshevIIBandPassFilter_Sf_SwigStatic, swig_ChebyshevIIBandPassFilter_meta, swig_ChebyshevIIBandPassFilter_bases, swig_ChebyshevIIBandPassFilter_base_names };

static int _wrap_ChebyshevIIBandStopFilter_setCutoff(lua_State* L) {
  int SWIG_arg = 0;
  Filters::ChebyshevIIBandStopFilter *arg1 = (Filters::ChebyshevIIBandStopFilter *) 0 ;
  Filters::DspFloatType arg2 ;
  Filters::DspFloatType arg3 ;
  
  SWIG_check_num_args("Filters::ChebyshevIIBandStopFilter::setCutoff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Filters::ChebyshevIIBandStopFilter::setCutoff",1,"Filters::ChebyshevIIBandStopFilter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Filters::ChebyshevIIBandStopFilter::setCutoff",2,"Filters::DspFloatType");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Filters::ChebyshevIIBandStopFilter::setCutoff",3,"Filters::DspFloatType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Filters__ChebyshevIIBandStopFilter,0))){
    SWIG_fail_ptr("ChebyshevIIBandStopFilter_setCutoff",1,SWIGTYPE_p_Filters__ChebyshevIIBandStopFilter);
  }
  
  arg2 = (Filters::DspFloatType)lua_tonumber(L, 2);
  arg3 = (Filters::DspFloatType)lua_tonumber(L, 3);
  (arg1)->setCutoff(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ChebyshevIIBandStopFilter(void *obj) {
Filters::ChebyshevIIBandStopFilter *arg1 = (Filters::ChebyshevIIBandStopFilter *) obj;
delete arg1;
}
static swig_lua_attribute swig_ChebyshevIIBandStopFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ChebyshevIIBandStopFilter_methods[]= {
    { "setCutoff", _wrap_ChebyshevIIBandStopFilter_setCutoff},
    {0,0}
};
static swig_lua_method swig_ChebyshevIIBandStopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ChebyshevIIBandStopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ChebyshevIIBandStopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ChebyshevIIBandStopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ChebyshevIIBandStopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ChebyshevIIBandStopFilter_Sf_SwigStatic = {
    "ChebyshevIIBandStopFilter",
    swig_ChebyshevIIBandStopFilter_Sf_SwigStatic_methods,
    swig_ChebyshevIIBandStopFilter_Sf_SwigStatic_attributes,
    swig_ChebyshevIIBandStopFilter_Sf_SwigStatic_constants,
    swig_ChebyshevIIBandStopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ChebyshevIIBandStopFilter_bases[] = {0,0};
static const char *swig_ChebyshevIIBandStopFilter_base_names[] = {"Filters::BiquadFilterBase *",0};
static swig_lua_class _wrap_class_ChebyshevIIBandStopFilter = { "ChebyshevIIBandStopFilter", "ChebyshevIIBandStopFilter", &SWIGTYPE_p_Filters__ChebyshevIIBandStopFilter,0, swig_delete_ChebyshevIIBandStopFilter, swig_ChebyshevIIBandStopFilter_methods, swig_ChebyshevIIBandStopFilter_attributes, &swig_ChebyshevIIBandStopFilter_Sf_SwigStatic, swig_ChebyshevIIBandStopFilter_meta, swig_ChebyshevIIBandStopFilter_bases, swig_ChebyshevIIBandStopFilter_base_names };

static int _wrap_new_SampleVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< SampleType >::univector",0,0)
  result = (kfr::univector< SampleType > *)new kfr::univector< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SampleVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< SampleType >::univector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::univector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (kfr::univector< SampleType > *)new kfr::univector< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SampleVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< SampleType >::univector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::univector",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("new_SampleVector",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = (kfr::univector< SampleType > *)new kfr::univector< SampleType >((kfr::univector< SampleType > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SampleVector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SampleVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SampleVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SampleVector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SampleVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::univector< SampleType >::univector()\n"
    "    kfr::univector< SampleType >::univector(size_t)\n"
    "    kfr::univector< SampleType >::univector(kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SampleVector_size(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("kfr::univector< SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::size",1,"kfr::univector< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector_size",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = ((kfr::univector< SampleType > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("kfr::univector< SampleType >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::resize",1,"kfr::univector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::univector< SampleType >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector_resize",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType result;
  
  SWIG_check_num_args("kfr::univector< SampleType >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::__getitem__",1,"kfr::univector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::univector< SampleType >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector___getitem",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = kfr_univector_Sl_SampleType_Sg____getitem____SWIG(arg1,arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType *arg3 = 0 ;
  
  SWIG_check_num_args("kfr::univector< SampleType >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::__setitem__",1,"kfr::univector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::univector< SampleType >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::univector< SampleType >::__setitem__",3,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector___setitem",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("SampleVector___setitem",3,SWIGTYPE_p_SampleType);
  }
  
  kfr_univector_Sl_SampleType_Sg____setitem____SWIG(arg1,arg2,(SampleType const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector___add(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("kfr::univector< SampleType >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::__add__",1,"kfr::univector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::univector< SampleType >::__add__",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector___add",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector___add",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = kfr_univector_Sl_SampleType_Sg____add____SWIG(arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector___sub(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("kfr::univector< SampleType >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::__sub__",1,"kfr::univector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::univector< SampleType >::__sub__",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector___sub",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector___sub",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = kfr_univector_Sl_SampleType_Sg____sub____SWIG(arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector___mul(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("kfr::univector< SampleType >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::__mul__",1,"kfr::univector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::univector< SampleType >::__mul__",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector___mul",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector___mul",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = kfr_univector_Sl_SampleType_Sg____mul____SWIG(arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector___div(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("kfr::univector< SampleType >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::__div__",1,"kfr::univector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::univector< SampleType >::__div__",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector___div",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector___div",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = kfr_univector_Sl_SampleType_Sg____div____SWIG(arg1,(kfr::univector< SampleType > const &)*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector___unm__(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("kfr::univector< SampleType >::__unm__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::__unm__",1,"kfr::univector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector___unm__",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = kfr_univector_Sl_SampleType_Sg____unm____SWIG(arg1);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  SampleType *arg2 = 0 ;
  
  SWIG_check_num_args("kfr::univector< SampleType >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::fill",1,"kfr::univector< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::univector< SampleType >::fill",2,"SampleType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector_fill",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("SampleVector_fill",2,SWIGTYPE_p_SampleType);
  }
  
  kfr_univector_Sl_SampleType_Sg__fill__SWIG(arg1,(SampleType const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector_print(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  
  SWIG_check_num_args("kfr::univector< SampleType >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::print",1,"kfr::univector< SampleType > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector_print",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  kfr_univector_Sl_SampleType_Sg__print__SWIG((kfr::univector< SampleType > const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector_at(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< SampleType >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::at",1,"kfr::univector< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::univector< SampleType >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector_at",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (SampleType *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SampleType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector_front(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  SampleType *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< SampleType >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::front",1,"kfr::univector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector_front",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = (SampleType *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SampleType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector_back(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  SampleType *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< SampleType >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::back",1,"kfr::univector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector_back",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = (SampleType *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SampleType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SampleVector_data(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) 0 ;
  SampleType *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< SampleType >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< SampleType >::data",1,"kfr::univector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("SampleVector_data",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = (SampleType *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SampleType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SampleVector(void *obj) {
kfr::univector< SampleType > *arg1 = (kfr::univector< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_SampleVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SampleVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SampleVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SampleVector_methods[]= {
    { "size", _wrap_SampleVector_size},
    { "resize", _wrap_SampleVector_resize},
    { "__getitem", _wrap_SampleVector___getitem},
    { "__setitem", _wrap_SampleVector___setitem},
    { "__add", _wrap_SampleVector___add},
    { "__sub", _wrap_SampleVector___sub},
    { "__mul", _wrap_SampleVector___mul},
    { "__div", _wrap_SampleVector___div},
    { "__unm__", _wrap_SampleVector___unm__},
    { "fill", _wrap_SampleVector_fill},
    { "print", _wrap_SampleVector_print},
    { "at", _wrap_SampleVector_at},
    { "front", _wrap_SampleVector_front},
    { "back", _wrap_SampleVector_back},
    { "data", _wrap_SampleVector_data},
    {0,0}
};
static swig_lua_method swig_SampleVector_meta[] = {
    { "__getitem", _wrap_SampleVector___getitem},
    { "__setitem", _wrap_SampleVector___setitem},
    { "__add", _wrap_SampleVector___add},
    { "__sub", _wrap_SampleVector___sub},
    { "__mul", _wrap_SampleVector___mul},
    { "__div", _wrap_SampleVector___div},
    { "__unm__", _wrap_SampleVector___unm__},
    {0,0}
};

static swig_lua_attribute swig_SampleVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SampleVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SampleVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SampleVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SampleVector_Sf_SwigStatic = {
    "SampleVector",
    swig_SampleVector_Sf_SwigStatic_methods,
    swig_SampleVector_Sf_SwigStatic_attributes,
    swig_SampleVector_Sf_SwigStatic_constants,
    swig_SampleVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SampleVector_bases[] = {0};
static const char *swig_SampleVector_base_names[] = {0};
static swig_lua_class _wrap_class_SampleVector = { "SampleVector", "SampleVector", &SWIGTYPE_p_kfr__univectorT_SampleType_t,_proxy__wrap_new_SampleVector, swig_delete_SampleVector, swig_SampleVector_methods, swig_SampleVector_attributes, &swig_SampleVector_Sf_SwigStatic, swig_SampleVector_meta, swig_SampleVector_bases, swig_SampleVector_base_names };

static int _wrap_new_ComplexVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::univector",0,0)
  result = (kfr::univector< kfr::complex< SampleType > > *)new kfr::univector< kfr::complex< SampleType > >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  kfr::univector< kfr::complex< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::univector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::univector",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (kfr::univector< kfr::complex< SampleType > > *)new kfr::univector< kfr::complex< SampleType > >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = 0 ;
  kfr::univector< kfr::complex< SampleType > > *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::univector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::univector",1,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("new_ComplexVector",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = (kfr::univector< kfr::complex< SampleType > > *)new kfr::univector< kfr::complex< SampleType > >((kfr::univector< kfr::complex< SampleType > > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexVector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ComplexVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ComplexVector__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ComplexVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    kfr::univector< kfr::complex< SampleType > >::univector()\n"
    "    kfr::univector< kfr::complex< SampleType > >::univector(size_t)\n"
    "    kfr::univector< kfr::complex< SampleType > >::univector(kfr::univector< kfr::complex< SampleType > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexVector_size(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::size",1,"kfr::univector< kfr::complex< SampleType > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector_size",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = ((kfr::univector< kfr::complex< SampleType > > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_resize(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::resize",1,"kfr::univector< kfr::complex< SampleType > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector_resize",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__getitem__",1,"kfr::univector< kfr::complex< SampleType > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector___getitem",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____getitem____SWIG(arg1,arg2);
  {
    kfr::complex< SampleType > * resultptr = new kfr::complex< SampleType >((const kfr::complex< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__complexT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  size_t arg2 ;
  kfr::complex< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__setitem__",1,"kfr::univector< kfr::complex< SampleType > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__setitem__",3,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector___setitem",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("ComplexVector___setitem",3,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____setitem____SWIG(arg1,arg2,(kfr::complex< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___add(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::__add__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__add__",1,"kfr::univector< kfr::complex< SampleType > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__add__",2,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector___add",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector___add",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____add____SWIG(arg1,(kfr::univector< kfr::complex< SampleType > > const &)*arg2);
  {
    kfr::univector< kfr::complex< SampleType > > * resultptr = new kfr::univector< kfr::complex< SampleType > >((const kfr::univector< kfr::complex< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___sub(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::__sub__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__sub__",1,"kfr::univector< kfr::complex< SampleType > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__sub__",2,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector___sub",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector___sub",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____sub____SWIG(arg1,(kfr::univector< kfr::complex< SampleType > > const &)*arg2);
  {
    kfr::univector< kfr::complex< SampleType > > * resultptr = new kfr::univector< kfr::complex< SampleType > >((const kfr::univector< kfr::complex< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___mul(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::__mul__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__mul__",1,"kfr::univector< kfr::complex< SampleType > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__mul__",2,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector___mul",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector___mul",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____mul____SWIG(arg1,(kfr::univector< kfr::complex< SampleType > > const &)*arg2);
  {
    kfr::univector< kfr::complex< SampleType > > * resultptr = new kfr::univector< kfr::complex< SampleType > >((const kfr::univector< kfr::complex< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___div(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > *arg2 = 0 ;
  kfr::univector< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::__div__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__div__",1,"kfr::univector< kfr::complex< SampleType > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__div__",2,"kfr::univector< kfr::complex< SampleType > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector___div",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector___div",2,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____div____SWIG(arg1,(kfr::univector< kfr::complex< SampleType > > const &)*arg2);
  {
    kfr::univector< kfr::complex< SampleType > > * resultptr = new kfr::univector< kfr::complex< SampleType > >((const kfr::univector< kfr::complex< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector___unm__(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  kfr::univector< kfr::complex< SampleType > > result;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::__unm__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::__unm__",1,"kfr::univector< kfr::complex< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector___unm__",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg____unm____SWIG(arg1);
  {
    kfr::univector< kfr::complex< SampleType > > * resultptr = new kfr::univector< kfr::complex< SampleType > >((const kfr::univector< kfr::complex< SampleType > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_fill(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  kfr::complex< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::fill",1,"kfr::univector< kfr::complex< SampleType > > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::fill",2,"kfr::complex< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector_fill",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__complexT_SampleType_t,0))){
    SWIG_fail_ptr("ComplexVector_fill",2,SWIGTYPE_p_kfr__complexT_SampleType_t);
  }
  
  kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg__fill__SWIG(arg1,(kfr::complex< SampleType > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_print(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::print",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::print",1,"kfr::univector< kfr::complex< SampleType > > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector_print",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  kfr_univector_Sl_kfr_complex_Sl_SampleType_Sg__Sg__print__SWIG((kfr::univector< kfr::complex< SampleType > > const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_at(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  size_t arg2 ;
  kfr::complex< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::at",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::at",1,"kfr::univector< kfr::complex< SampleType > > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::at",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector_at",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (kfr::complex< SampleType > *) &(arg1)->at(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_front(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  kfr::complex< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::front",1,"kfr::univector< kfr::complex< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector_front",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = (kfr::complex< SampleType > *) &(arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_back(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  kfr::complex< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::back",1,"kfr::univector< kfr::complex< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector_back",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = (kfr::complex< SampleType > *) &(arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexVector_data(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) 0 ;
  kfr::complex< SampleType > *result = 0 ;
  
  SWIG_check_num_args("kfr::univector< kfr::complex< SampleType > >::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kfr::univector< kfr::complex< SampleType > >::data",1,"kfr::univector< kfr::complex< SampleType > > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,0))){
    SWIG_fail_ptr("ComplexVector_data",1,SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t);
  }
  
  result = (kfr::complex< SampleType > *)(arg1)->data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__complexT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ComplexVector(void *obj) {
kfr::univector< kfr::complex< SampleType > > *arg1 = (kfr::univector< kfr::complex< SampleType > > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ComplexVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ComplexVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ComplexVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ComplexVector_methods[]= {
    { "size", _wrap_ComplexVector_size},
    { "resize", _wrap_ComplexVector_resize},
    { "__getitem", _wrap_ComplexVector___getitem},
    { "__setitem", _wrap_ComplexVector___setitem},
    { "__add", _wrap_ComplexVector___add},
    { "__sub", _wrap_ComplexVector___sub},
    { "__mul", _wrap_ComplexVector___mul},
    { "__div", _wrap_ComplexVector___div},
    { "__unm__", _wrap_ComplexVector___unm__},
    { "fill", _wrap_ComplexVector_fill},
    { "print", _wrap_ComplexVector_print},
    { "at", _wrap_ComplexVector_at},
    { "front", _wrap_ComplexVector_front},
    { "back", _wrap_ComplexVector_back},
    { "data", _wrap_ComplexVector_data},
    {0,0}
};
static swig_lua_method swig_ComplexVector_meta[] = {
    { "__getitem", _wrap_ComplexVector___getitem},
    { "__setitem", _wrap_ComplexVector___setitem},
    { "__add", _wrap_ComplexVector___add},
    { "__sub", _wrap_ComplexVector___sub},
    { "__mul", _wrap_ComplexVector___mul},
    { "__div", _wrap_ComplexVector___div},
    { "__unm__", _wrap_ComplexVector___unm__},
    {0,0}
};

static swig_lua_attribute swig_ComplexVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ComplexVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ComplexVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ComplexVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ComplexVector_Sf_SwigStatic = {
    "ComplexVector",
    swig_ComplexVector_Sf_SwigStatic_methods,
    swig_ComplexVector_Sf_SwigStatic_attributes,
    swig_ComplexVector_Sf_SwigStatic_constants,
    swig_ComplexVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ComplexVector_bases[] = {0};
static const char *swig_ComplexVector_base_names[] = {0};
static swig_lua_class _wrap_class_ComplexVector = { "ComplexVector", "ComplexVector", &SWIGTYPE_p_kfr__univectorT_kfr__complexT_SampleType_t_t,_proxy__wrap_new_ComplexVector, swig_delete_ComplexVector, swig_ComplexVector_methods, swig_ComplexVector_attributes, &swig_ComplexVector_Sf_SwigStatic, swig_ComplexVector_meta, swig_ComplexVector_bases, swig_ComplexVector_base_names };

static int _wrap_ConvolutionFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  kfr::convolve_filter< SampleType > *arg2 = (kfr::convolve_filter< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::filter",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::filter",2,"kfr::convolve_filter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_filter_set",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("ConvolutionFilter_filter_set",2,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  kfr::convolve_filter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::filter",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_filter_get",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  result = (kfr::convolve_filter< SampleType > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__convolve_filterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionFilter_temp_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = (kfr::univector< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::temp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::temp",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::temp",2,"kfr::univector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_temp_set",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_temp_set",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  if (arg1) (arg1)->temp = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionFilter_temp_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::temp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::temp",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_temp_get",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  result = (kfr::univector< SampleType > *)& ((arg1)->temp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionFilter_out_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = (kfr::univector< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::out",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::out",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::out",2,"kfr::univector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_out_set",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_out_set",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  if (arg1) (arg1)->out = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionFilter_out_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::out",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_out_get",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  result = (kfr::univector< SampleType > *)& ((arg1)->out);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionFilter_ola_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = (kfr::univector< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::ola",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::ola",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::ola",2,"kfr::univector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_ola_set",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_ola_set",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  if (arg1) (arg1)->ola = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionFilter_ola_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::ola",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::ola",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_ola_get",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  result = (kfr::univector< SampleType > *)& ((arg1)->ola);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionFilter_h_size_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::h_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::h_size",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::h_size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_h_size_set",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->h_size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionFilter_h_size_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::h_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::h_size",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_h_size_get",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  result =  ((arg1)->h_size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionFilter_block_size_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::block_size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::block_size",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::block_size",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_block_size_set",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->block_size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionFilter_block_size_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::block_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::block_size",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_block_size_get",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  result =  ((arg1)->block_size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConvolutionFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  size_t arg2 ;
  KfrDSP1::ConvolutionFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::ConvolutionFilter",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::ConvolutionFilter",1,"kfr::univector< SampleType > &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::ConvolutionFilter",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("new_ConvolutionFilter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (KfrDSP1::ConvolutionFilter< SampleType > *)new KfrDSP1::ConvolutionFilter< SampleType >(*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConvolutionFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  KfrDSP1::ConvolutionFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::ConvolutionFilter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::ConvolutionFilter",1,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("new_ConvolutionFilter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = (KfrDSP1::ConvolutionFilter< SampleType > *)new KfrDSP1::ConvolutionFilter< SampleType >(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConvolutionFilter(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ConvolutionFilter__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ConvolutionFilter__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ConvolutionFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::ConvolutionFilter< SampleType >::ConvolutionFilter(kfr::univector< SampleType > &,size_t)\n"
    "    KfrDSP1::ConvolutionFilter< SampleType >::ConvolutionFilter(kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_ConvolutionFilter_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType *arg3 = (SampleType *) 0 ;
  SampleType *arg4 = (SampleType *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::ProcessBlock",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::ProcessBlock",3,"SampleType *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::ProcessBlock",4,"SampleType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_ProcessBlock",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("ConvolutionFilter_ProcessBlock",3,SWIGTYPE_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("ConvolutionFilter_ProcessBlock",4,SWIGTYPE_p_SampleType);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvolutionFilter_Process(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > result;
  
  SWIG_check_num_args("KfrDSP1::ConvolutionFilter< SampleType >::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::Process",1,"KfrDSP1::ConvolutionFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::ConvolutionFilter< SampleType >::Process",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_Process",1,SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("ConvolutionFilter_Process",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = (arg1)->Process(*arg2);
  {
    kfr::univector< SampleType > * resultptr = new kfr::univector< SampleType >((const kfr::univector< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univectorT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ConvolutionFilter(void *obj) {
KfrDSP1::ConvolutionFilter< SampleType > *arg1 = (KfrDSP1::ConvolutionFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ConvolutionFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ConvolutionFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ConvolutionFilter_attributes[] = {
    { "filter", _wrap_ConvolutionFilter_filter_get, _wrap_ConvolutionFilter_filter_set },
    { "temp", _wrap_ConvolutionFilter_temp_get, _wrap_ConvolutionFilter_temp_set },
    { "out", _wrap_ConvolutionFilter_out_get, _wrap_ConvolutionFilter_out_set },
    { "ola", _wrap_ConvolutionFilter_ola_get, _wrap_ConvolutionFilter_ola_set },
    { "h_size", _wrap_ConvolutionFilter_h_size_get, _wrap_ConvolutionFilter_h_size_set },
    { "block_size", _wrap_ConvolutionFilter_block_size_get, _wrap_ConvolutionFilter_block_size_set },
    {0,0,0}
};
static swig_lua_method swig_ConvolutionFilter_methods[]= {
    { "ProcessBlock", _wrap_ConvolutionFilter_ProcessBlock},
    { "Process", _wrap_ConvolutionFilter_Process},
    {0,0}
};
static swig_lua_method swig_ConvolutionFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ConvolutionFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ConvolutionFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ConvolutionFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ConvolutionFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ConvolutionFilter_Sf_SwigStatic = {
    "ConvolutionFilter",
    swig_ConvolutionFilter_Sf_SwigStatic_methods,
    swig_ConvolutionFilter_Sf_SwigStatic_attributes,
    swig_ConvolutionFilter_Sf_SwigStatic_constants,
    swig_ConvolutionFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ConvolutionFilter_bases[] = {0};
static const char *swig_ConvolutionFilter_base_names[] = {0};
static swig_lua_class _wrap_class_ConvolutionFilter = { "ConvolutionFilter", "ConvolutionFilter", &SWIGTYPE_p_KfrDSP1__ConvolutionFilterT_SampleType_t,_proxy__wrap_new_ConvolutionFilter, swig_delete_ConvolutionFilter, swig_ConvolutionFilter_methods, swig_ConvolutionFilter_attributes, &swig_ConvolutionFilter_Sf_SwigStatic, swig_ConvolutionFilter_meta, swig_ConvolutionFilter_bases, swig_ConvolutionFilter_base_names };

static int _wrap_StereoConvolutionFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::StereoConvolutionFilter< SampleType > *arg1 = (KfrDSP1::StereoConvolutionFilter< SampleType > *) 0 ;
  KfrDSP1::ConvolutionFilter< SampleType > **arg2 ;
  
  SWIG_check_num_args("KfrDSP1::StereoConvolutionFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::filter",1,"KfrDSP1::StereoConvolutionFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::filter",2,"KfrDSP1::ConvolutionFilter< SampleType > *[2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_filter_set",1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_filter_set",2,SWIGTYPE_p_p_KfrDSP1__ConvolutionFilterT_SampleType_t);
  }
  
  {
    size_t ii;
    KfrDSP1::ConvolutionFilter< SampleType > * *b = (KfrDSP1::ConvolutionFilter< SampleType > * *) arg1->filter;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((KfrDSP1::ConvolutionFilter< SampleType > * *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoConvolutionFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::StereoConvolutionFilter< SampleType > *arg1 = (KfrDSP1::StereoConvolutionFilter< SampleType > *) 0 ;
  KfrDSP1::ConvolutionFilter< SampleType > **result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::StereoConvolutionFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::filter",1,"KfrDSP1::StereoConvolutionFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_filter_get",1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t);
  }
  
  result = (KfrDSP1::ConvolutionFilter< SampleType > **)(KfrDSP1::ConvolutionFilter< SampleType > **) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_KfrDSP1__ConvolutionFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoConvolutionFilter_temp_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::StereoConvolutionFilter< SampleType > *arg1 = (KfrDSP1::StereoConvolutionFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::StereoConvolutionFilter< SampleType >::temp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::temp",1,"KfrDSP1::StereoConvolutionFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::temp",2,"kfr::univector< SampleType > [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_temp_set",1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_temp_set",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  {
    size_t ii;
    kfr::univector< SampleType > *b = (kfr::univector< SampleType > *) arg1->temp;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((kfr::univector< SampleType > *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoConvolutionFilter_temp_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::StereoConvolutionFilter< SampleType > *arg1 = (KfrDSP1::StereoConvolutionFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::StereoConvolutionFilter< SampleType >::temp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::temp",1,"KfrDSP1::StereoConvolutionFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_temp_get",1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t);
  }
  
  result = (kfr::univector< SampleType > *)(kfr::univector< SampleType > *) ((arg1)->temp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoConvolutionFilter_out_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::StereoConvolutionFilter< SampleType > *arg1 = (KfrDSP1::StereoConvolutionFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::StereoConvolutionFilter< SampleType >::out",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::out",1,"KfrDSP1::StereoConvolutionFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::out",2,"kfr::univector< SampleType > [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_out_set",1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_out_set",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  {
    size_t ii;
    kfr::univector< SampleType > *b = (kfr::univector< SampleType > *) arg1->out;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((kfr::univector< SampleType > *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoConvolutionFilter_out_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::StereoConvolutionFilter< SampleType > *arg1 = (KfrDSP1::StereoConvolutionFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::StereoConvolutionFilter< SampleType >::out",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::out",1,"KfrDSP1::StereoConvolutionFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_out_get",1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t);
  }
  
  result = (kfr::univector< SampleType > *)(kfr::univector< SampleType > *) ((arg1)->out);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoConvolutionFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  size_t arg3 ;
  KfrDSP1::StereoConvolutionFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::StereoConvolutionFilter< SampleType >::StereoConvolutionFilter",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::StereoConvolutionFilter",1,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::StereoConvolutionFilter",2,"kfr::univector< SampleType > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::StereoConvolutionFilter",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("new_StereoConvolutionFilter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("new_StereoConvolutionFilter",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (KfrDSP1::StereoConvolutionFilter< SampleType > *)new KfrDSP1::StereoConvolutionFilter< SampleType >(*arg1,*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoConvolutionFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  KfrDSP1::StereoConvolutionFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::StereoConvolutionFilter< SampleType >::StereoConvolutionFilter",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::StereoConvolutionFilter",1,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::StereoConvolutionFilter",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("new_StereoConvolutionFilter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("new_StereoConvolutionFilter",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = (KfrDSP1::StereoConvolutionFilter< SampleType > *)new KfrDSP1::StereoConvolutionFilter< SampleType >(*arg1,*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StereoConvolutionFilter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_StereoConvolutionFilter__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_StereoConvolutionFilter__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StereoConvolutionFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::StereoConvolutionFilter< SampleType >::StereoConvolutionFilter(kfr::univector< SampleType > &,kfr::univector< SampleType > &,size_t)\n"
    "    KfrDSP1::StereoConvolutionFilter< SampleType >::StereoConvolutionFilter(kfr::univector< SampleType > &,kfr::univector< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_StereoConvolutionFilter_ProcessBlock(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::StereoConvolutionFilter< SampleType > *arg1 = (KfrDSP1::StereoConvolutionFilter< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType **arg3 = (SampleType **) 0 ;
  SampleType **arg4 = (SampleType **) 0 ;
  
  SWIG_check_num_args("KfrDSP1::StereoConvolutionFilter< SampleType >::ProcessBlock",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::ProcessBlock",1,"KfrDSP1::StereoConvolutionFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::ProcessBlock",2,"size_t");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::ProcessBlock",3,"SampleType **");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::ProcessBlock",4,"SampleType **");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_ProcessBlock",1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_p_SampleType,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_ProcessBlock",3,SWIGTYPE_p_p_SampleType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_p_SampleType,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_ProcessBlock",4,SWIGTYPE_p_p_SampleType);
  }
  
  (arg1)->ProcessBlock(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StereoConvolutionFilter_Process(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::StereoConvolutionFilter< SampleType > *arg1 = (KfrDSP1::StereoConvolutionFilter< SampleType > *) 0 ;
  kfr::univector2d< SampleType > *arg2 = 0 ;
  SwigValueWrapper< kfr::univector2d< SampleType > > result;
  
  SWIG_check_num_args("KfrDSP1::StereoConvolutionFilter< SampleType >::Process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::Process",1,"KfrDSP1::StereoConvolutionFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::StereoConvolutionFilter< SampleType >::Process",2,"kfr::univector2d< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_Process",1,SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univector2dT_SampleType_t,0))){
    SWIG_fail_ptr("StereoConvolutionFilter_Process",2,SWIGTYPE_p_kfr__univector2dT_SampleType_t);
  }
  
  result = (arg1)->Process(*arg2);
  {
    kfr::univector2d< SampleType > * resultptr = new kfr::univector2d< SampleType >((const kfr::univector2d< SampleType > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_kfr__univector2dT_SampleType_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StereoConvolutionFilter(void *obj) {
KfrDSP1::StereoConvolutionFilter< SampleType > *arg1 = (KfrDSP1::StereoConvolutionFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StereoConvolutionFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StereoConvolutionFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StereoConvolutionFilter_attributes[] = {
    { "filter", _wrap_StereoConvolutionFilter_filter_get, _wrap_StereoConvolutionFilter_filter_set },
    { "temp", _wrap_StereoConvolutionFilter_temp_get, _wrap_StereoConvolutionFilter_temp_set },
    { "out", _wrap_StereoConvolutionFilter_out_get, _wrap_StereoConvolutionFilter_out_set },
    {0,0,0}
};
static swig_lua_method swig_StereoConvolutionFilter_methods[]= {
    { "ProcessBlock", _wrap_StereoConvolutionFilter_ProcessBlock},
    { "Process", _wrap_StereoConvolutionFilter_Process},
    {0,0}
};
static swig_lua_method swig_StereoConvolutionFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StereoConvolutionFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StereoConvolutionFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StereoConvolutionFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StereoConvolutionFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StereoConvolutionFilter_Sf_SwigStatic = {
    "StereoConvolutionFilter",
    swig_StereoConvolutionFilter_Sf_SwigStatic_methods,
    swig_StereoConvolutionFilter_Sf_SwigStatic_attributes,
    swig_StereoConvolutionFilter_Sf_SwigStatic_constants,
    swig_StereoConvolutionFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StereoConvolutionFilter_bases[] = {0};
static const char *swig_StereoConvolutionFilter_base_names[] = {0};
static swig_lua_class _wrap_class_StereoConvolutionFilter = { "StereoConvolutionFilter", "StereoConvolutionFilter", &SWIGTYPE_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,_proxy__wrap_new_StereoConvolutionFilter, swig_delete_StereoConvolutionFilter, swig_StereoConvolutionFilter_methods, swig_StereoConvolutionFilter_attributes, &swig_StereoConvolutionFilter_Sf_SwigStatic, swig_StereoConvolutionFilter_meta, swig_StereoConvolutionFilter_bases, swig_StereoConvolutionFilter_base_names };

static int _wrap_CombFilter_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  KfrDSP1::DelayLine< SampleType > *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::delay",1,"KfrDSP1::CombFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::delay",2,"KfrDSP1::DelayLine< SampleType > [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_delay_set",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_delay_set",2,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  {
    size_t ii;
    KfrDSP1::DelayLine< SampleType > *b = (KfrDSP1::DelayLine< SampleType > *) arg1->delay;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((KfrDSP1::DelayLine< SampleType > *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  KfrDSP1::DelayLine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::delay",1,"KfrDSP1::CombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_delay_get",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  result = (KfrDSP1::DelayLine< SampleType > *)(KfrDSP1::DelayLine< SampleType > *) ((arg1)->delay);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_x1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::x1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::x1",1,"KfrDSP1::CombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::x1",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_x1_set",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_x1_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->x1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_x1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::x1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::x1",1,"KfrDSP1::CombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_x1_get",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  result =  ((arg1)->x1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_y_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::y",1,"KfrDSP1::CombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::y",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_y_set",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_y_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_y_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::y",1,"KfrDSP1::CombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_y_get",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  result =  ((arg1)->y);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_y1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::y1",1,"KfrDSP1::CombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::y1",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_y1_set",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_y1_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_y1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::y1",1,"KfrDSP1::CombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_y1_get",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  result =  ((arg1)->y1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::gain",1,"KfrDSP1::CombFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::gain",2,"SampleType [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_gain_set",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_gain_set",2,SWIGTYPE_p_SampleType);
  }
  
  {
    size_t ii;
    SampleType *b = (SampleType *) arg1->gain;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((SampleType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::gain",1,"KfrDSP1::CombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_gain_get",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  result = (SampleType *)(SampleType *) ((arg1)->gain);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SampleType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_delayTime_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::delayTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::delayTime",1,"KfrDSP1::CombFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::delayTime",2,"SampleType [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_delayTime_set",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_delayTime_set",2,SWIGTYPE_p_SampleType);
  }
  
  {
    size_t ii;
    SampleType *b = (SampleType *) arg1->delayTime;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((SampleType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_delayTime_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::delayTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::delayTime",1,"KfrDSP1::CombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_delayTime_get",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  result = (SampleType *)(SampleType *) ((arg1)->delayTime);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SampleType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CombFilter(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  KfrDSP1::CombFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::CombFilter",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::CombFilter",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::CombFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::CombFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::CombFilter",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_CombFilter",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_CombFilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_CombFilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_CombFilter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (KfrDSP1::CombFilter< SampleType > *)new KfrDSP1::CombFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",1,"KfrDSP1::CombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",5,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_Tick",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_Tick",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_Tick",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  result = (arg1)->Tick(arg2,arg3,arg4,arg5);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",1,"KfrDSP1::CombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_Tick",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_Tick",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (arg1)->Tick(arg2,arg3,arg4);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",1,"KfrDSP1::CombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_Tick",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Tick(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::CombFilter< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",1,"KfrDSP1::CombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::CombFilter< SampleType >::Tick",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("CombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("CombFilter_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = (arg1)->Tick(arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CombFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_CombFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_CombFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_CombFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_CombFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'CombFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::CombFilter< SampleType >::Tick(SampleType,SampleType,SampleType,SampleType)\n"
    "    KfrDSP1::CombFilter< SampleType >::Tick(SampleType,SampleType,SampleType)\n"
    "    KfrDSP1::CombFilter< SampleType >::Tick(SampleType,SampleType)\n"
    "    KfrDSP1::CombFilter< SampleType >::Tick(SampleType)\n");
  lua_error(L);return 0;
}


static void swig_delete_CombFilter(void *obj) {
KfrDSP1::CombFilter< SampleType > *arg1 = (KfrDSP1::CombFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_CombFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CombFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CombFilter_attributes[] = {
    { "delay", _wrap_CombFilter_delay_get, _wrap_CombFilter_delay_set },
    { "x1", _wrap_CombFilter_x1_get, _wrap_CombFilter_x1_set },
    { "y", _wrap_CombFilter_y_get, _wrap_CombFilter_y_set },
    { "y1", _wrap_CombFilter_y1_get, _wrap_CombFilter_y1_set },
    { "gain", _wrap_CombFilter_gain_get, _wrap_CombFilter_gain_set },
    { "delayTime", _wrap_CombFilter_delayTime_get, _wrap_CombFilter_delayTime_set },
    {0,0,0}
};
static swig_lua_method swig_CombFilter_methods[]= {
    { "Tick", _wrap_CombFilter_Tick},
    {0,0}
};
static swig_lua_method swig_CombFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CombFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CombFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("X_index", KfrDSP1::CombFilter< SampleType >::X_index)},
    {SWIG_LUA_CONSTTAB_INT("Y_index", KfrDSP1::CombFilter< SampleType >::Y_index)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CombFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CombFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CombFilter_Sf_SwigStatic = {
    "CombFilter",
    swig_CombFilter_Sf_SwigStatic_methods,
    swig_CombFilter_Sf_SwigStatic_attributes,
    swig_CombFilter_Sf_SwigStatic_constants,
    swig_CombFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CombFilter_bases[] = {0};
static const char *swig_CombFilter_base_names[] = {0};
static swig_lua_class _wrap_class_CombFilter = { "CombFilter", "CombFilter", &SWIGTYPE_p_KfrDSP1__CombFilterT_SampleType_t,_proxy__wrap_new_CombFilter, swig_delete_CombFilter, swig_CombFilter_methods, swig_CombFilter_attributes, &swig_CombFilter_Sf_SwigStatic, swig_CombFilter_meta, swig_CombFilter_bases, swig_CombFilter_base_names };

static int _wrap_FirCombFilter_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  KfrDSP1::DelayLine< SampleType > *arg2 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::delay",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::delay",2,"KfrDSP1::DelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_delay_set",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_delay_set",2,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  if (arg1) (arg1)->delay = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  KfrDSP1::DelayLine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::delay",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_delay_get",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  result = (KfrDSP1::DelayLine< SampleType > *)& ((arg1)->delay);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_g_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::g",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::g",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_g_set",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_g_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::g",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_g_get",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_x_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::x",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_x_set",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_x_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::x",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_x_get",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_x1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::x1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::x1",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::x1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_x1_set",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_x1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::x1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::x1",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_x1_get",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->x1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_y_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::y",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_y_set",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_y_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::y",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_y_get",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirCombFilter(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  KfrDSP1::FIRCombFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::FIRCombFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::FIRCombFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::FIRCombFilter",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (KfrDSP1::FIRCombFilter< SampleType > *)new KfrDSP1::FIRCombFilter< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (arg1)->Tick(arg2,arg3,arg4,arg5);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (arg1)->Tick(arg2,arg3,arg4);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->Tick(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::FIRCombFilter< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",1,"KfrDSP1::FIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::FIRCombFilter< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->Tick(arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirCombFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FirCombFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FirCombFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FirCombFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_FirCombFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FirCombFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRCombFilter< SampleType >::Tick(float,float,float,float)\n"
    "    KfrDSP1::FIRCombFilter< SampleType >::Tick(float,float,float)\n"
    "    KfrDSP1::FIRCombFilter< SampleType >::Tick(float,float)\n"
    "    KfrDSP1::FIRCombFilter< SampleType >::Tick(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_FirCombFilter(void *obj) {
KfrDSP1::FIRCombFilter< SampleType > *arg1 = (KfrDSP1::FIRCombFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FirCombFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FirCombFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FirCombFilter_attributes[] = {
    { "delay", _wrap_FirCombFilter_delay_get, _wrap_FirCombFilter_delay_set },
    { "g", _wrap_FirCombFilter_g_get, _wrap_FirCombFilter_g_set },
    { "x", _wrap_FirCombFilter_x_get, _wrap_FirCombFilter_x_set },
    { "x1", _wrap_FirCombFilter_x1_get, _wrap_FirCombFilter_x1_set },
    { "y", _wrap_FirCombFilter_y_get, _wrap_FirCombFilter_y_set },
    {0,0,0}
};
static swig_lua_method swig_FirCombFilter_methods[]= {
    { "Tick", _wrap_FirCombFilter_Tick},
    {0,0}
};
static swig_lua_method swig_FirCombFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FirCombFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FirCombFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FirCombFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FirCombFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FirCombFilter_Sf_SwigStatic = {
    "FirCombFilter",
    swig_FirCombFilter_Sf_SwigStatic_methods,
    swig_FirCombFilter_Sf_SwigStatic_attributes,
    swig_FirCombFilter_Sf_SwigStatic_constants,
    swig_FirCombFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FirCombFilter_bases[] = {0};
static const char *swig_FirCombFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FirCombFilter = { "FirCombFilter", "FirCombFilter", &SWIGTYPE_p_KfrDSP1__FIRCombFilterT_SampleType_t,_proxy__wrap_new_FirCombFilter, swig_delete_FirCombFilter, swig_FirCombFilter_methods, swig_FirCombFilter_attributes, &swig_FirCombFilter_Sf_SwigStatic, swig_FirCombFilter_meta, swig_FirCombFilter_bases, swig_FirCombFilter_base_names };

static int _wrap_IirCombFilter_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  KfrDSP1::DelayLine< SampleType > *arg2 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::delay",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::delay",2,"KfrDSP1::DelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_delay_set",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_delay_set",2,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  if (arg1) (arg1)->delay = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  KfrDSP1::DelayLine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::delay",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_delay_get",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  result = (KfrDSP1::DelayLine< SampleType > *)& ((arg1)->delay);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_g_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::g",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::g",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_g_set",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_g_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::g",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_g_get",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_x_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::x",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_x_set",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_x_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::x",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_x_get",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_y_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::y",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_y_set",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_y_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::y",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_y_get",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_y1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::y1",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::y1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_y1_set",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_y1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::y1",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_y1_get",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->y1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IirCombFilter(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  KfrDSP1::IIRCombFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::IIRCombFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::IIRCombFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::IIRCombFilter",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (KfrDSP1::IIRCombFilter< SampleType > *)new KfrDSP1::IIRCombFilter< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (arg1)->Tick(arg2,arg3,arg4,arg5);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (arg1)->Tick(arg2,arg3,arg4);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->Tick(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::IIRCombFilter< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",1,"KfrDSP1::IIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::IIRCombFilter< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("IirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->Tick(arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IirCombFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_IirCombFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_IirCombFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_IirCombFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_IirCombFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'IirCombFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::IIRCombFilter< SampleType >::Tick(float,float,float,float)\n"
    "    KfrDSP1::IIRCombFilter< SampleType >::Tick(float,float,float)\n"
    "    KfrDSP1::IIRCombFilter< SampleType >::Tick(float,float)\n"
    "    KfrDSP1::IIRCombFilter< SampleType >::Tick(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_IirCombFilter(void *obj) {
KfrDSP1::IIRCombFilter< SampleType > *arg1 = (KfrDSP1::IIRCombFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_IirCombFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IirCombFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IirCombFilter_attributes[] = {
    { "delay", _wrap_IirCombFilter_delay_get, _wrap_IirCombFilter_delay_set },
    { "g", _wrap_IirCombFilter_g_get, _wrap_IirCombFilter_g_set },
    { "x", _wrap_IirCombFilter_x_get, _wrap_IirCombFilter_x_set },
    { "y", _wrap_IirCombFilter_y_get, _wrap_IirCombFilter_y_set },
    { "y1", _wrap_IirCombFilter_y1_get, _wrap_IirCombFilter_y1_set },
    {0,0,0}
};
static swig_lua_method swig_IirCombFilter_methods[]= {
    { "Tick", _wrap_IirCombFilter_Tick},
    {0,0}
};
static swig_lua_method swig_IirCombFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IirCombFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IirCombFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IirCombFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IirCombFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IirCombFilter_Sf_SwigStatic = {
    "IirCombFilter",
    swig_IirCombFilter_Sf_SwigStatic_methods,
    swig_IirCombFilter_Sf_SwigStatic_attributes,
    swig_IirCombFilter_Sf_SwigStatic_constants,
    swig_IirCombFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IirCombFilter_bases[] = {0};
static const char *swig_IirCombFilter_base_names[] = {0};
static swig_lua_class _wrap_class_IirCombFilter = { "IirCombFilter", "IirCombFilter", &SWIGTYPE_p_KfrDSP1__IIRCombFilterT_SampleType_t,_proxy__wrap_new_IirCombFilter, swig_delete_IirCombFilter, swig_IirCombFilter_methods, swig_IirCombFilter_attributes, &swig_IirCombFilter_Sf_SwigStatic, swig_IirCombFilter_meta, swig_IirCombFilter_bases, swig_IirCombFilter_base_names };

static int _wrap_MultitapCombFilter_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::delay",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::delay",2,"KfrDSP1::MultiTapDelayLine< SampleType > [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_delay_set",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_delay_set",2,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  {
    size_t ii;
    KfrDSP1::MultiTapDelayLine< SampleType > *b = (KfrDSP1::MultiTapDelayLine< SampleType > *) arg1->delay;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((KfrDSP1::MultiTapDelayLine< SampleType > *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  KfrDSP1::MultiTapDelayLine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::delay",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_delay_get",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  result = (KfrDSP1::MultiTapDelayLine< SampleType > *)(KfrDSP1::MultiTapDelayLine< SampleType > *) ((arg1)->delay);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_x1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::x1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::x1",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::x1",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_x1_set",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_x1_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->x1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_x1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::x1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::x1",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_x1_get",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  result =  ((arg1)->x1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_y_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::y",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::y",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_y_set",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_y_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_y_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::y",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_y_get",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  result =  ((arg1)->y);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_y1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::y1",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::y1",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_y1_set",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_y1_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_y1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::y1",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_y1_get",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  result =  ((arg1)->y1);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_gain_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::gain",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::gain",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::gain",2,"SampleType [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_gain_set",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_gain_set",2,SWIGTYPE_p_SampleType);
  }
  
  {
    size_t ii;
    SampleType *b = (SampleType *) arg1->gain;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((SampleType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_gain_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::gain",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::gain",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_gain_get",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  result = (SampleType *)(SampleType *) ((arg1)->gain);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SampleType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_delayTime_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType *arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::delayTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::delayTime",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::delayTime",2,"SampleType [2]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_delayTime_set",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_delayTime_set",2,SWIGTYPE_p_SampleType);
  }
  
  {
    size_t ii;
    SampleType *b = (SampleType *) arg1->delayTime;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((SampleType *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_delayTime_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::delayTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::delayTime",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_delayTime_get",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  result = (SampleType *)(SampleType *) ((arg1)->delayTime);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SampleType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MultitapCombFilter(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  KfrDSP1::MultiTapCombFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::MultiTapCombFilter",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::MultiTapCombFilter",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::MultiTapCombFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::MultiTapCombFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::MultiTapCombFilter",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_MultitapCombFilter",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_MultitapCombFilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_MultitapCombFilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_MultitapCombFilter",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (KfrDSP1::MultiTapCombFilter< SampleType > *)new KfrDSP1::MultiTapCombFilter< SampleType >(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_addTap(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::addTap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::addTap",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::addTap",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_addTap",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->addTap(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",5,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  result = (arg1)->Tick(arg2,arg3,arg4,arg5);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (arg1)->Tick(arg2,arg3,arg4);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Tick(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",1,"KfrDSP1::MultiTapCombFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapCombFilter< SampleType >::Tick",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapCombFilter_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = (arg1)->Tick(arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapCombFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MultitapCombFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_MultitapCombFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_MultitapCombFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_MultitapCombFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MultitapCombFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::MultiTapCombFilter< SampleType >::Tick(SampleType,SampleType,SampleType,SampleType)\n"
    "    KfrDSP1::MultiTapCombFilter< SampleType >::Tick(SampleType,SampleType,SampleType)\n"
    "    KfrDSP1::MultiTapCombFilter< SampleType >::Tick(SampleType,SampleType)\n"
    "    KfrDSP1::MultiTapCombFilter< SampleType >::Tick(SampleType)\n");
  lua_error(L);return 0;
}


static void swig_delete_MultitapCombFilter(void *obj) {
KfrDSP1::MultiTapCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapCombFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_MultitapCombFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MultitapCombFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MultitapCombFilter_attributes[] = {
    { "delay", _wrap_MultitapCombFilter_delay_get, _wrap_MultitapCombFilter_delay_set },
    { "x1", _wrap_MultitapCombFilter_x1_get, _wrap_MultitapCombFilter_x1_set },
    { "y", _wrap_MultitapCombFilter_y_get, _wrap_MultitapCombFilter_y_set },
    { "y1", _wrap_MultitapCombFilter_y1_get, _wrap_MultitapCombFilter_y1_set },
    { "gain", _wrap_MultitapCombFilter_gain_get, _wrap_MultitapCombFilter_gain_set },
    { "delayTime", _wrap_MultitapCombFilter_delayTime_get, _wrap_MultitapCombFilter_delayTime_set },
    {0,0,0}
};
static swig_lua_method swig_MultitapCombFilter_methods[]= {
    { "addTap", _wrap_MultitapCombFilter_addTap},
    { "Tick", _wrap_MultitapCombFilter_Tick},
    {0,0}
};
static swig_lua_method swig_MultitapCombFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MultitapCombFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MultitapCombFilter_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("X_index", KfrDSP1::MultiTapCombFilter< SampleType >::X_index)},
    {SWIG_LUA_CONSTTAB_INT("Y_index", KfrDSP1::MultiTapCombFilter< SampleType >::Y_index)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MultitapCombFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MultitapCombFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MultitapCombFilter_Sf_SwigStatic = {
    "MultitapCombFilter",
    swig_MultitapCombFilter_Sf_SwigStatic_methods,
    swig_MultitapCombFilter_Sf_SwigStatic_attributes,
    swig_MultitapCombFilter_Sf_SwigStatic_constants,
    swig_MultitapCombFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MultitapCombFilter_bases[] = {0};
static const char *swig_MultitapCombFilter_base_names[] = {0};
static swig_lua_class _wrap_class_MultitapCombFilter = { "MultitapCombFilter", "MultitapCombFilter", &SWIGTYPE_p_KfrDSP1__MultiTapCombFilterT_SampleType_t,_proxy__wrap_new_MultitapCombFilter, swig_delete_MultitapCombFilter, swig_MultitapCombFilter_methods, swig_MultitapCombFilter_attributes, &swig_MultitapCombFilter_Sf_SwigStatic, swig_MultitapCombFilter_meta, swig_MultitapCombFilter_bases, swig_MultitapCombFilter_base_names };

static int _wrap_MultitapFirCombFilter_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg2 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::delay",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::delay",2,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_delay_set",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_delay_set",2,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  if (arg1) (arg1)->delay = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  KfrDSP1::MultiTapDelayLine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::delay",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_delay_get",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  result = (KfrDSP1::MultiTapDelayLine< SampleType > *)& ((arg1)->delay);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_g_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::g",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::g",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_g_set",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_g_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::g",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_g_get",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_x_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::x",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_x_set",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_x_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::x",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_x_get",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_x1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::x1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::x1",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::x1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_x1_set",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_x1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::x1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::x1",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_x1_get",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->x1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_y_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::y",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_y_set",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_y_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::y",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_y_get",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MultitapFirCombFilter(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::MultiTapFIRCombFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::MultiTapFIRCombFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::MultiTapFIRCombFilter",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *)new KfrDSP1::MultiTapFIRCombFilter< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_addTap(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::addTap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::addTap",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::addTap",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_addTap",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->addTap(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (arg1)->Tick(arg2,arg3,arg4,arg5);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (arg1)->Tick(arg2,arg3,arg4);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->Tick(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",1,"KfrDSP1::MultiTapFIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapFirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->Tick(arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapFirCombFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MultitapFirCombFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MultitapFirCombFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MultitapFirCombFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MultitapFirCombFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MultitapFirCombFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick(float,float,float,float)\n"
    "    KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick(float,float,float)\n"
    "    KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick(float,float)\n"
    "    KfrDSP1::MultiTapFIRCombFilter< SampleType >::Tick(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_MultitapFirCombFilter(void *obj) {
KfrDSP1::MultiTapFIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapFIRCombFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_MultitapFirCombFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MultitapFirCombFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MultitapFirCombFilter_attributes[] = {
    { "delay", _wrap_MultitapFirCombFilter_delay_get, _wrap_MultitapFirCombFilter_delay_set },
    { "g", _wrap_MultitapFirCombFilter_g_get, _wrap_MultitapFirCombFilter_g_set },
    { "x", _wrap_MultitapFirCombFilter_x_get, _wrap_MultitapFirCombFilter_x_set },
    { "x1", _wrap_MultitapFirCombFilter_x1_get, _wrap_MultitapFirCombFilter_x1_set },
    { "y", _wrap_MultitapFirCombFilter_y_get, _wrap_MultitapFirCombFilter_y_set },
    {0,0,0}
};
static swig_lua_method swig_MultitapFirCombFilter_methods[]= {
    { "addTap", _wrap_MultitapFirCombFilter_addTap},
    { "Tick", _wrap_MultitapFirCombFilter_Tick},
    {0,0}
};
static swig_lua_method swig_MultitapFirCombFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MultitapFirCombFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MultitapFirCombFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MultitapFirCombFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MultitapFirCombFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MultitapFirCombFilter_Sf_SwigStatic = {
    "MultitapFirCombFilter",
    swig_MultitapFirCombFilter_Sf_SwigStatic_methods,
    swig_MultitapFirCombFilter_Sf_SwigStatic_attributes,
    swig_MultitapFirCombFilter_Sf_SwigStatic_constants,
    swig_MultitapFirCombFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MultitapFirCombFilter_bases[] = {0};
static const char *swig_MultitapFirCombFilter_base_names[] = {0};
static swig_lua_class _wrap_class_MultitapFirCombFilter = { "MultitapFirCombFilter", "MultitapFirCombFilter", &SWIGTYPE_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,_proxy__wrap_new_MultitapFirCombFilter, swig_delete_MultitapFirCombFilter, swig_MultitapFirCombFilter_methods, swig_MultitapFirCombFilter_attributes, &swig_MultitapFirCombFilter_Sf_SwigStatic, swig_MultitapFirCombFilter_meta, swig_MultitapFirCombFilter_bases, swig_MultitapFirCombFilter_base_names };

static int _wrap_MultitapIirCombFilter_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg2 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::delay",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::delay",2,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_delay_set",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_delay_set",2,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  if (arg1) (arg1)->delay = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  KfrDSP1::MultiTapDelayLine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::delay",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_delay_get",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  result = (KfrDSP1::MultiTapDelayLine< SampleType > *)& ((arg1)->delay);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_g_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::g",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::g",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_g_set",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_g_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::g",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_g_get",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_x_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::x",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_x_set",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_x_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::x",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_x_get",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_y_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::y",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_y_set",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_y_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::y",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_y_get",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_y1_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::y1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::y1",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::y1",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_y1_set",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_y1_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::y1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::y1",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_y1_get",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  result = (float) ((arg1)->y1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MultitapIirCombFilter(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::MultiTapIIRCombFilter",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::MultiTapIIRCombFilter",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::MultiTapIIRCombFilter",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *)new KfrDSP1::MultiTapIIRCombFilter< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_addTap(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::addTap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::addTap",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::addTap",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_addTap",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->addTap(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (arg1)->Tick(arg2,arg3,arg4,arg5);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (arg1)->Tick(arg2,arg3,arg4);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  float arg3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->Tick(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) 0 ;
  float arg2 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",1,"KfrDSP1::MultiTapIIRCombFilter< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapIirCombFilter_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (arg1)->Tick(arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapIirCombFilter_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MultitapIirCombFilter_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MultitapIirCombFilter_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_MultitapIirCombFilter_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_MultitapIirCombFilter_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MultitapIirCombFilter_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick(float,float,float,float)\n"
    "    KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick(float,float,float)\n"
    "    KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick(float,float)\n"
    "    KfrDSP1::MultiTapIIRCombFilter< SampleType >::Tick(float)\n");
  lua_error(L);return 0;
}


static void swig_delete_MultitapIirCombFilter(void *obj) {
KfrDSP1::MultiTapIIRCombFilter< SampleType > *arg1 = (KfrDSP1::MultiTapIIRCombFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_MultitapIirCombFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MultitapIirCombFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MultitapIirCombFilter_attributes[] = {
    { "delay", _wrap_MultitapIirCombFilter_delay_get, _wrap_MultitapIirCombFilter_delay_set },
    { "g", _wrap_MultitapIirCombFilter_g_get, _wrap_MultitapIirCombFilter_g_set },
    { "x", _wrap_MultitapIirCombFilter_x_get, _wrap_MultitapIirCombFilter_x_set },
    { "y", _wrap_MultitapIirCombFilter_y_get, _wrap_MultitapIirCombFilter_y_set },
    { "y1", _wrap_MultitapIirCombFilter_y1_get, _wrap_MultitapIirCombFilter_y1_set },
    {0,0,0}
};
static swig_lua_method swig_MultitapIirCombFilter_methods[]= {
    { "addTap", _wrap_MultitapIirCombFilter_addTap},
    { "Tick", _wrap_MultitapIirCombFilter_Tick},
    {0,0}
};
static swig_lua_method swig_MultitapIirCombFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MultitapIirCombFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MultitapIirCombFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MultitapIirCombFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MultitapIirCombFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MultitapIirCombFilter_Sf_SwigStatic = {
    "MultitapIirCombFilter",
    swig_MultitapIirCombFilter_Sf_SwigStatic_methods,
    swig_MultitapIirCombFilter_Sf_SwigStatic_attributes,
    swig_MultitapIirCombFilter_Sf_SwigStatic_constants,
    swig_MultitapIirCombFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MultitapIirCombFilter_bases[] = {0};
static const char *swig_MultitapIirCombFilter_base_names[] = {0};
static swig_lua_class _wrap_class_MultitapIirCombFilter = { "MultitapIirCombFilter", "MultitapIirCombFilter", &SWIGTYPE_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,_proxy__wrap_new_MultitapIirCombFilter, swig_delete_MultitapIirCombFilter, swig_MultitapIirCombFilter_methods, swig_MultitapIirCombFilter_attributes, &swig_MultitapIirCombFilter_Sf_SwigStatic, swig_MultitapIirCombFilter_meta, swig_MultitapIirCombFilter_bases, swig_MultitapIirCombFilter_base_names };

static int _wrap_DelayLine_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = (kfr::univector< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::delay",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::delay",2,"kfr::univector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_delay_set",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_delay_set",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  if (arg1) (arg1)->delay = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  kfr::univector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::delay",1,"KfrDSP1::DelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_delay_get",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  result = (kfr::univector< SampleType > *)& ((arg1)->delay);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_read_cursor_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::read_cursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::read_cursor",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::read_cursor",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_read_cursor_set",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->read_cursor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_read_cursor_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::read_cursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::read_cursor",1,"KfrDSP1::DelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_read_cursor_get",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  result =  ((arg1)->read_cursor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_write_cursor_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::write_cursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::write_cursor",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::write_cursor",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_write_cursor_set",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->write_cursor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_write_cursor_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::write_cursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::write_cursor",1,"KfrDSP1::DelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_write_cursor_get",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  result =  ((arg1)->write_cursor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_feedback_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::feedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::feedback",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::feedback",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_feedback_set",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_feedback_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->feedback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_feedback_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::feedback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::feedback",1,"KfrDSP1::DelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_feedback_get",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  result =  ((arg1)->feedback);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_mix_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::mix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::mix",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::mix",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_mix_set",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_mix_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mix = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_mix_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::mix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::mix",1,"KfrDSP1::DelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_mix_get",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  result =  ((arg1)->mix);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_delayLen_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::delayLen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::delayLen",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::delayLen",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_delayLen_set",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->delayLen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_delayLen_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::delayLen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::delayLen",1,"KfrDSP1::DelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_delayLen_get",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  result =  ((arg1)->delayLen);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_delayTime_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::delayTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::delayTime",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::delayTime",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_delayTime_set",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_delayTime_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->delayTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_delayTime_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::delayTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::delayTime",1,"KfrDSP1::DelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_delayTime_get",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  result =  ((arg1)->delayTime);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_interpType_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  enum KfrDSP1::DelayLine< SampleType >::InterpType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::interpType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::interpType",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::interpType",2,"enum KfrDSP1::DelayLine< SampleType >::InterpType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_interpType_set",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  arg2 = (enum KfrDSP1::DelayLine< SampleType >::InterpType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->interpType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_interpType_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  enum KfrDSP1::DelayLine< SampleType >::InterpType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::interpType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::interpType",1,"KfrDSP1::DelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_interpType_get",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  result = (enum KfrDSP1::DelayLine< SampleType >::InterpType) ((arg1)->interpType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayLine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::DelayLine",0,0)
  result = (KfrDSP1::DelayLine< SampleType > *)new KfrDSP1::DelayLine< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayLine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType arg2 ;
  SampleType *argp1 ;
  SampleType *argp2 ;
  KfrDSP1::DelayLine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::DelayLine",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::DelayLine",1,"SampleType");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::DelayLine",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_DelayLine",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_DelayLine",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = (KfrDSP1::DelayLine< SampleType > *)new KfrDSP1::DelayLine< SampleType >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayLine__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType *argp1 ;
  KfrDSP1::DelayLine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::DelayLine",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::DelayLine",1,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_DelayLine",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  result = (KfrDSP1::DelayLine< SampleType > *)new KfrDSP1::DelayLine< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DelayLine(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_DelayLine__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_DelayLine__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_DelayLine__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DelayLine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::DelayLine< SampleType >::DelayLine()\n"
    "    KfrDSP1::DelayLine< SampleType >::DelayLine(SampleType,SampleType)\n"
    "    KfrDSP1::DelayLine< SampleType >::DelayLine(SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_DelayLine_setDelaySize(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::setDelaySize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::setDelaySize",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::setDelaySize",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_setDelaySize",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_setDelaySize",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  (arg1)->setDelaySize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_reset(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::reset",1,"KfrDSP1::DelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_reset",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_setDelayTime(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::setDelayTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::setDelayTime",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::setDelayTime",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_setDelayTime",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_setDelayTime",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  (arg1)->setDelayTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_setFeedback(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::setFeedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::setFeedback",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::setFeedback",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_setFeedback",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_setFeedback",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  (arg1)->setFeedback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_setMix(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::setMix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::setMix",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::setMix",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_setMix",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_setMix",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  (arg1)->setMix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_resize(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::resize",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_resize",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",5,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_Tick",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Tick",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Tick",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Tick",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  result = (arg1)->Tick(arg2,arg3,arg4,arg5);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_Tick",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Tick",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Tick",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (arg1)->Tick(arg2,arg3,arg4);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_Tick",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Tick",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Tick(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Tick",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_Tick",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = (arg1)->Tick(arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_DelayLine_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DelayLine_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_DelayLine_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_DelayLine_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DelayLine_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::DelayLine< SampleType >::Tick(SampleType,SampleType,SampleType,SampleType)\n"
    "    KfrDSP1::DelayLine< SampleType >::Tick(SampleType,SampleType,SampleType)\n"
    "    KfrDSP1::DelayLine< SampleType >::Tick(SampleType,SampleType)\n"
    "    KfrDSP1::DelayLine< SampleType >::Tick(SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_DelayLine_size(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::size",1,"KfrDSP1::DelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_size",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  result = (arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Interpolate",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_Interpolate",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_NearestNeighborInterpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::NearestNeighborInterpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::NearestNeighborInterpolate",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::NearestNeighborInterpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::NearestNeighborInterpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_NearestNeighborInterpolate",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_NearestNeighborInterpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->NearestNeighborInterpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_LinearInterpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::LinearInterpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::LinearInterpolate",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::LinearInterpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::LinearInterpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_LinearInterpolate",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_LinearInterpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->LinearInterpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_CubicInterpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::CubicInterpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::CubicInterpolate",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::CubicInterpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::CubicInterpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_CubicInterpolate",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_CubicInterpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->CubicInterpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_Hermite1Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::Hermite1Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Hermite1Interpolate",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Hermite1Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Hermite1Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_Hermite1Interpolate",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Hermite1Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Hermite1Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_Hermite2Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::Hermite2Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Hermite2Interpolate",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Hermite2Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Hermite2Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_Hermite2Interpolate",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Hermite2Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Hermite2Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_Hermite3Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::Hermite3Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Hermite3Interpolate",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Hermite3Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Hermite3Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_Hermite3Interpolate",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Hermite3Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Hermite3Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_Hermite4Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::Hermite4Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Hermite4Interpolate",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Hermite4Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Hermite4Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_Hermite4Interpolate",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Hermite4Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Hermite4Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_Spline3Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::Spline3Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Spline3Interpolate",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Spline3Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Spline3Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_Spline3Interpolate",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Spline3Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Spline3Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DelayLine_Spline5Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::DelayLine< SampleType >::Spline5Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Spline5Interpolate",1,"KfrDSP1::DelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Spline5Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::DelayLine< SampleType >::Spline5Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("DelayLine_Spline5Interpolate",1,SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("DelayLine_Spline5Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Spline5Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DelayLine(void *obj) {
KfrDSP1::DelayLine< SampleType > *arg1 = (KfrDSP1::DelayLine< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_DelayLine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DelayLine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DelayLine_attributes[] = {
    { "delay", _wrap_DelayLine_delay_get, _wrap_DelayLine_delay_set },
    { "read_cursor", _wrap_DelayLine_read_cursor_get, _wrap_DelayLine_read_cursor_set },
    { "write_cursor", _wrap_DelayLine_write_cursor_get, _wrap_DelayLine_write_cursor_set },
    { "feedback", _wrap_DelayLine_feedback_get, _wrap_DelayLine_feedback_set },
    { "mix", _wrap_DelayLine_mix_get, _wrap_DelayLine_mix_set },
    { "delayLen", _wrap_DelayLine_delayLen_get, _wrap_DelayLine_delayLen_set },
    { "delayTime", _wrap_DelayLine_delayTime_get, _wrap_DelayLine_delayTime_set },
    { "interpType", _wrap_DelayLine_interpType_get, _wrap_DelayLine_interpType_set },
    {0,0,0}
};
static swig_lua_method swig_DelayLine_methods[]= {
    { "setDelaySize", _wrap_DelayLine_setDelaySize},
    { "reset", _wrap_DelayLine_reset},
    { "setDelayTime", _wrap_DelayLine_setDelayTime},
    { "setFeedback", _wrap_DelayLine_setFeedback},
    { "setMix", _wrap_DelayLine_setMix},
    { "resize", _wrap_DelayLine_resize},
    { "Tick", _wrap_DelayLine_Tick},
    { "size", _wrap_DelayLine_size},
    { "Interpolate", _wrap_DelayLine_Interpolate},
    { "NearestNeighborInterpolate", _wrap_DelayLine_NearestNeighborInterpolate},
    { "LinearInterpolate", _wrap_DelayLine_LinearInterpolate},
    { "CubicInterpolate", _wrap_DelayLine_CubicInterpolate},
    { "Hermite1Interpolate", _wrap_DelayLine_Hermite1Interpolate},
    { "Hermite2Interpolate", _wrap_DelayLine_Hermite2Interpolate},
    { "Hermite3Interpolate", _wrap_DelayLine_Hermite3Interpolate},
    { "Hermite4Interpolate", _wrap_DelayLine_Hermite4Interpolate},
    { "Spline3Interpolate", _wrap_DelayLine_Spline3Interpolate},
    { "Spline5Interpolate", _wrap_DelayLine_Spline5Interpolate},
    {0,0}
};
static swig_lua_method swig_DelayLine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DelayLine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DelayLine_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("None", KfrDSP1::DelayLine< SampleType >::None)},
    {SWIG_LUA_CONSTTAB_INT("NearestNeighbor", KfrDSP1::DelayLine< SampleType >::NearestNeighbor)},
    {SWIG_LUA_CONSTTAB_INT("Linear", KfrDSP1::DelayLine< SampleType >::Linear)},
    {SWIG_LUA_CONSTTAB_INT("Cubic", KfrDSP1::DelayLine< SampleType >::Cubic)},
    {SWIG_LUA_CONSTTAB_INT("Spline3", KfrDSP1::DelayLine< SampleType >::Spline3)},
    {SWIG_LUA_CONSTTAB_INT("Spline5", KfrDSP1::DelayLine< SampleType >::Spline5)},
    {SWIG_LUA_CONSTTAB_INT("Hermite1", KfrDSP1::DelayLine< SampleType >::Hermite1)},
    {SWIG_LUA_CONSTTAB_INT("Hermite2", KfrDSP1::DelayLine< SampleType >::Hermite2)},
    {SWIG_LUA_CONSTTAB_INT("Hermite3", KfrDSP1::DelayLine< SampleType >::Hermite3)},
    {SWIG_LUA_CONSTTAB_INT("Hermite4", KfrDSP1::DelayLine< SampleType >::Hermite4)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DelayLine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DelayLine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DelayLine_Sf_SwigStatic = {
    "DelayLine",
    swig_DelayLine_Sf_SwigStatic_methods,
    swig_DelayLine_Sf_SwigStatic_attributes,
    swig_DelayLine_Sf_SwigStatic_constants,
    swig_DelayLine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DelayLine_bases[] = {0};
static const char *swig_DelayLine_base_names[] = {0};
static swig_lua_class _wrap_class_DelayLine = { "DelayLine", "DelayLine", &SWIGTYPE_p_KfrDSP1__DelayLineT_SampleType_t,_proxy__wrap_new_DelayLine, swig_delete_DelayLine, swig_DelayLine_methods, swig_DelayLine_attributes, &swig_DelayLine_Sf_SwigStatic, swig_DelayLine_meta, swig_DelayLine_bases, swig_DelayLine_base_names };

static int _wrap_MultitapDelayLine_tap_reads_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  std::vector< size_t > *arg2 = (std::vector< size_t > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::tap_reads",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::tap_reads",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::tap_reads",2,"std::vector< size_t > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_tap_reads_set",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_size_t_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_tap_reads_set",2,SWIGTYPE_p_std__vectorT_size_t_t);
  }
  
  if (arg1) (arg1)->tap_reads = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_tap_reads_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  std::vector< size_t > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::tap_reads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::tap_reads",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_tap_reads_get",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  result = (std::vector< size_t > *)& ((arg1)->tap_reads);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_size_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_taps_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::taps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::taps",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::taps",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_taps_set",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->taps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_taps_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::taps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::taps",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_taps_get",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  result =  ((arg1)->taps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_write_cursor_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::write_cursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::write_cursor",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::write_cursor",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_write_cursor_set",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->write_cursor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_write_cursor_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::write_cursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::write_cursor",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_write_cursor_get",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  result =  ((arg1)->write_cursor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_read_cursor_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::read_cursor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::read_cursor",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::read_cursor",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_read_cursor_set",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->read_cursor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_read_cursor_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::read_cursor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::read_cursor",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_read_cursor_get",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  result =  ((arg1)->read_cursor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_delayLen_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::delayLen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::delayLen",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::delayLen",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_delayLen_set",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->delayLen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_delayLen_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::delayLen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::delayLen",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_delayLen_get",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  result =  ((arg1)->delayLen);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_delay_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = (kfr::univector< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::delay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::delay",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::delay",2,"kfr::univector< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_delay_set",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_delay_set",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  if (arg1) (arg1)->delay = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_delay_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  kfr::univector< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::delay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::delay",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_delay_get",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  result = (kfr::univector< SampleType > *)& ((arg1)->delay);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_kfr__univectorT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_feedback_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::feedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::feedback",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::feedback",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_feedback_set",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_feedback_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->feedback = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_feedback_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::feedback",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::feedback",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_feedback_get",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  result =  ((arg1)->feedback);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_mix_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::mix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::mix",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::mix",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_mix_set",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_mix_set",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->mix = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_mix_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::mix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::mix",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_mix_get",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  result =  ((arg1)->mix);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_interpType_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  enum KfrDSP1::MultiTapDelayLine< SampleType >::InterpType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::interpType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::interpType",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::interpType",2,"enum KfrDSP1::MultiTapDelayLine< SampleType >::InterpType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_interpType_set",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  arg2 = (enum KfrDSP1::MultiTapDelayLine< SampleType >::InterpType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->interpType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_interpType_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  enum KfrDSP1::MultiTapDelayLine< SampleType >::InterpType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::interpType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::interpType",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_interpType_get",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  result = (enum KfrDSP1::MultiTapDelayLine< SampleType >::InterpType) ((arg1)->interpType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MultitapDelayLine__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  SampleType arg1 ;
  SampleType *argp1 ;
  KfrDSP1::MultiTapDelayLine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::MultiTapDelayLine",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::MultiTapDelayLine",1,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_MultitapDelayLine",1,SWIGTYPE_p_SampleType);
  }
  arg1 = *argp1;
  
  result = (KfrDSP1::MultiTapDelayLine< SampleType > *)new KfrDSP1::MultiTapDelayLine< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MultitapDelayLine__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::MultiTapDelayLine",0,0)
  result = (KfrDSP1::MultiTapDelayLine< SampleType > *)new KfrDSP1::MultiTapDelayLine< SampleType >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MultitapDelayLine(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MultitapDelayLine__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MultitapDelayLine__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MultitapDelayLine'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::MultiTapDelayLine< SampleType >::MultiTapDelayLine(SampleType)\n"
    "    KfrDSP1::MultiTapDelayLine< SampleType >::MultiTapDelayLine()\n");
  lua_error(L);return 0;
}


static int _wrap_MultitapDelayLine_setDelayTime(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::setDelayTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::setDelayTime",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::setDelayTime",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_setDelayTime",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_setDelayTime",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  (arg1)->setDelayTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_setInterp(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  KfrDSP1::MultiTapDelayLine< SampleType >::InterpType arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::setInterp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::setInterp",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::setInterp",2,"KfrDSP1::MultiTapDelayLine< SampleType >::InterpType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_setInterp",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  arg2 = (KfrDSP1::MultiTapDelayLine< SampleType >::InterpType)(int)lua_tonumber(L, 2);
  (arg1)->setInterp(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_setFeedback(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::setFeedback",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::setFeedback",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::setFeedback",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_setFeedback",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_setFeedback",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  (arg1)->setFeedback(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_setMix(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::setMix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::setMix",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::setMix",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_setMix",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_setMix",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  (arg1)->setMix(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_setDelaySize(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::setDelaySize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::setDelaySize",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::setDelaySize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_setDelaySize",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->setDelaySize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_addTap(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::addTap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::addTap",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::addTap",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_addTap",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_addTap",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  (arg1)->addTap(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_Tick__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType *argp5 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",4,"SampleType");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",5,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",5,SWIGTYPE_p_SampleType);
  }
  arg5 = *argp5;
  
  result = (arg1)->Tick(arg2,arg3,arg4,arg5);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_Tick__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType arg4 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType *argp4 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",4,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",4,SWIGTYPE_p_SampleType);
  }
  arg4 = *argp4;
  
  result = (arg1)->Tick(arg2,arg3,arg4);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_Tick__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Tick(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_Tick__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType *argp2 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Tick",2,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Tick",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  result = (arg1)->Tick(arg2);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_Tick(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_MultitapDelayLine_Tick__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_MultitapDelayLine_Tick__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_MultitapDelayLine_Tick__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_MultitapDelayLine_Tick__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'MultitapDelayLine_Tick'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::MultiTapDelayLine< SampleType >::Tick(SampleType,SampleType,SampleType,SampleType)\n"
    "    KfrDSP1::MultiTapDelayLine< SampleType >::Tick(SampleType,SampleType,SampleType)\n"
    "    KfrDSP1::MultiTapDelayLine< SampleType >::Tick(SampleType,SampleType)\n"
    "    KfrDSP1::MultiTapDelayLine< SampleType >::Tick(SampleType)\n");
  lua_error(L);return 0;
}


static int _wrap_MultitapDelayLine_Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Interpolate",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_Interpolate",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_NearestNeighborInterpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::NearestNeighborInterpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::NearestNeighborInterpolate",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::NearestNeighborInterpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::NearestNeighborInterpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_NearestNeighborInterpolate",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_NearestNeighborInterpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->NearestNeighborInterpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_LinearInterpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::LinearInterpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::LinearInterpolate",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::LinearInterpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::LinearInterpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_LinearInterpolate",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_LinearInterpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->LinearInterpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_CubicInterpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::CubicInterpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::CubicInterpolate",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::CubicInterpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::CubicInterpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_CubicInterpolate",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_CubicInterpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->CubicInterpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_Hermite1Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite1Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite1Interpolate",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite1Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite1Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_Hermite1Interpolate",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Hermite1Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Hermite1Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_Hermite2Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite2Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite2Interpolate",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite2Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite2Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_Hermite2Interpolate",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Hermite2Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Hermite2Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_Hermite3Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite3Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite3Interpolate",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite3Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite3Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_Hermite3Interpolate",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Hermite3Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Hermite3Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_Hermite4Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite4Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite4Interpolate",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite4Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Hermite4Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_Hermite4Interpolate",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Hermite4Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Hermite4Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_Spline3Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::Spline3Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Spline3Interpolate",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Spline3Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Spline3Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_Spline3Interpolate",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Spline3Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Spline3Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MultitapDelayLine_Spline5Interpolate(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) 0 ;
  size_t arg2 ;
  SampleType arg3 ;
  SampleType *argp3 ;
  SampleType result;
  
  SWIG_check_num_args("KfrDSP1::MultiTapDelayLine< SampleType >::Spline5Interpolate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Spline5Interpolate",1,"KfrDSP1::MultiTapDelayLine< SampleType > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Spline5Interpolate",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::MultiTapDelayLine< SampleType >::Spline5Interpolate",3,"SampleType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,0))){
    SWIG_fail_ptr("MultitapDelayLine_Spline5Interpolate",1,SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("MultitapDelayLine_Spline5Interpolate",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  result = (arg1)->Spline5Interpolate(arg2,arg3);
  {
    SampleType * resultptr = new SampleType((const SampleType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SampleType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MultitapDelayLine(void *obj) {
KfrDSP1::MultiTapDelayLine< SampleType > *arg1 = (KfrDSP1::MultiTapDelayLine< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_MultitapDelayLine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MultitapDelayLine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MultitapDelayLine_attributes[] = {
    { "tap_reads", _wrap_MultitapDelayLine_tap_reads_get, _wrap_MultitapDelayLine_tap_reads_set },
    { "taps", _wrap_MultitapDelayLine_taps_get, _wrap_MultitapDelayLine_taps_set },
    { "write_cursor", _wrap_MultitapDelayLine_write_cursor_get, _wrap_MultitapDelayLine_write_cursor_set },
    { "read_cursor", _wrap_MultitapDelayLine_read_cursor_get, _wrap_MultitapDelayLine_read_cursor_set },
    { "delayLen", _wrap_MultitapDelayLine_delayLen_get, _wrap_MultitapDelayLine_delayLen_set },
    { "delay", _wrap_MultitapDelayLine_delay_get, _wrap_MultitapDelayLine_delay_set },
    { "feedback", _wrap_MultitapDelayLine_feedback_get, _wrap_MultitapDelayLine_feedback_set },
    { "mix", _wrap_MultitapDelayLine_mix_get, _wrap_MultitapDelayLine_mix_set },
    { "interpType", _wrap_MultitapDelayLine_interpType_get, _wrap_MultitapDelayLine_interpType_set },
    {0,0,0}
};
static swig_lua_method swig_MultitapDelayLine_methods[]= {
    { "setDelayTime", _wrap_MultitapDelayLine_setDelayTime},
    { "setInterp", _wrap_MultitapDelayLine_setInterp},
    { "setFeedback", _wrap_MultitapDelayLine_setFeedback},
    { "setMix", _wrap_MultitapDelayLine_setMix},
    { "setDelaySize", _wrap_MultitapDelayLine_setDelaySize},
    { "addTap", _wrap_MultitapDelayLine_addTap},
    { "Tick", _wrap_MultitapDelayLine_Tick},
    { "Interpolate", _wrap_MultitapDelayLine_Interpolate},
    { "NearestNeighborInterpolate", _wrap_MultitapDelayLine_NearestNeighborInterpolate},
    { "LinearInterpolate", _wrap_MultitapDelayLine_LinearInterpolate},
    { "CubicInterpolate", _wrap_MultitapDelayLine_CubicInterpolate},
    { "Hermite1Interpolate", _wrap_MultitapDelayLine_Hermite1Interpolate},
    { "Hermite2Interpolate", _wrap_MultitapDelayLine_Hermite2Interpolate},
    { "Hermite3Interpolate", _wrap_MultitapDelayLine_Hermite3Interpolate},
    { "Hermite4Interpolate", _wrap_MultitapDelayLine_Hermite4Interpolate},
    { "Spline3Interpolate", _wrap_MultitapDelayLine_Spline3Interpolate},
    { "Spline5Interpolate", _wrap_MultitapDelayLine_Spline5Interpolate},
    {0,0}
};
static swig_lua_method swig_MultitapDelayLine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MultitapDelayLine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MultitapDelayLine_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("None", KfrDSP1::MultiTapDelayLine< SampleType >::None)},
    {SWIG_LUA_CONSTTAB_INT("NearestNeighbor", KfrDSP1::MultiTapDelayLine< SampleType >::NearestNeighbor)},
    {SWIG_LUA_CONSTTAB_INT("Linear", KfrDSP1::MultiTapDelayLine< SampleType >::Linear)},
    {SWIG_LUA_CONSTTAB_INT("Cubic", KfrDSP1::MultiTapDelayLine< SampleType >::Cubic)},
    {SWIG_LUA_CONSTTAB_INT("Spline3", KfrDSP1::MultiTapDelayLine< SampleType >::Spline3)},
    {SWIG_LUA_CONSTTAB_INT("Spline5", KfrDSP1::MultiTapDelayLine< SampleType >::Spline5)},
    {SWIG_LUA_CONSTTAB_INT("Hermite1", KfrDSP1::MultiTapDelayLine< SampleType >::Hermite1)},
    {SWIG_LUA_CONSTTAB_INT("Hermite2", KfrDSP1::MultiTapDelayLine< SampleType >::Hermite2)},
    {SWIG_LUA_CONSTTAB_INT("Hermite3", KfrDSP1::MultiTapDelayLine< SampleType >::Hermite3)},
    {SWIG_LUA_CONSTTAB_INT("Hermite4", KfrDSP1::MultiTapDelayLine< SampleType >::Hermite4)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MultitapDelayLine_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MultitapDelayLine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MultitapDelayLine_Sf_SwigStatic = {
    "MultitapDelayLine",
    swig_MultitapDelayLine_Sf_SwigStatic_methods,
    swig_MultitapDelayLine_Sf_SwigStatic_attributes,
    swig_MultitapDelayLine_Sf_SwigStatic_constants,
    swig_MultitapDelayLine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MultitapDelayLine_bases[] = {0};
static const char *swig_MultitapDelayLine_base_names[] = {0};
static swig_lua_class _wrap_class_MultitapDelayLine = { "MultitapDelayLine", "MultitapDelayLine", &SWIGTYPE_p_KfrDSP1__MultiTapDelayLineT_SampleType_t,_proxy__wrap_new_MultitapDelayLine, swig_delete_MultitapDelayLine, swig_MultitapDelayLine_methods, swig_MultitapDelayLine_attributes, &swig_MultitapDelayLine_Sf_SwigStatic, swig_MultitapDelayLine_meta, swig_MultitapDelayLine_bases, swig_MultitapDelayLine_base_names };

static int _wrap_new_FirFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  KfrDSP1::FIRFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::FIRFilter",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::FIRFilter",1,"size_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  result = (KfrDSP1::FIRFilter< SampleType > *)new KfrDSP1::FIRFilter< SampleType >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  kfr::univector< SampleType > *arg1 = 0 ;
  KfrDSP1::FIRFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::FIRFilter",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::FIRFilter",1,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("new_FirFilter",1,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  result = (KfrDSP1::FIRFilter< SampleType > *)new KfrDSP1::FIRFilter< SampleType >((kfr::univector< SampleType > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirFilter(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FirFilter__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FirFilter__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FirFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRFilter< SampleType >::FIRFilter(size_t)\n"
    "    KfrDSP1::FIRFilter< SampleType >::FIRFilter(kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirFilter_set_taps(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::set_taps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::set_taps",1,"KfrDSP1::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::set_taps",2,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_set_taps",1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_set_taps",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->set_taps((kfr::univector< SampleType > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirFilter_bandpass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  bool arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::bandpass",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandpass",1,"KfrDSP1::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandpass",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandpass",4,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandpass",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_bandpass",1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("FirFilter_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("FirFilter_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_bandpass",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->bandpass(arg2,arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirFilter_bandpass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::bandpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandpass",1,"KfrDSP1::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandpass",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandpass",4,"kfr::expression_pointer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_bandpass",1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("FirFilter_bandpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("FirFilter_bandpass",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_bandpass",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  (arg1)->bandpass(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirFilter_bandpass(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FirFilter_bandpass__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FirFilter_bandpass__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FirFilter_bandpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRFilter< SampleType >::bandpass(SampleType,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    KfrDSP1::FIRFilter< SampleType >::bandpass(SampleType,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirFilter_bandstop__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  bool arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::bandstop",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandstop",1,"KfrDSP1::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandstop",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandstop",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandstop",4,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandstop",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_bandstop",1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("FirFilter_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("FirFilter_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_bandstop",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->bandstop(arg2,arg3,*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirFilter_bandstop__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::bandstop",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandstop",1,"KfrDSP1::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandstop",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandstop",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::bandstop",4,"kfr::expression_pointer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_bandstop",1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("FirFilter_bandstop",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("FirFilter_bandstop",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_bandstop",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  (arg1)->bandstop(arg2,arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirFilter_bandstop(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FirFilter_bandstop__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FirFilter_bandstop__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FirFilter_bandstop'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRFilter< SampleType >::bandstop(SampleType,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    KfrDSP1::FIRFilter< SampleType >::bandstop(SampleType,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirFilter_highpass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  bool arg4 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::highpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::highpass",1,"KfrDSP1::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::highpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::highpass",3,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::highpass",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_highpass",1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("FirFilter_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_highpass",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->highpass(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirFilter_highpass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::highpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::highpass",1,"KfrDSP1::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::highpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::highpass",3,"kfr::expression_pointer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_highpass",1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("FirFilter_highpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_highpass",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  (arg1)->highpass(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirFilter_highpass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FirFilter_highpass__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FirFilter_highpass__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FirFilter_highpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRFilter< SampleType >::highpass(SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    KfrDSP1::FIRFilter< SampleType >::highpass(SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirFilter_lowpass__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  bool arg4 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::lowpass",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::lowpass",1,"KfrDSP1::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::lowpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::lowpass",3,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::lowpass",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_lowpass",1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("FirFilter_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_lowpass",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->lowpass(arg2,*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirFilter_lowpass__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  SampleType *argp2 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::lowpass",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::lowpass",1,"KfrDSP1::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::lowpass",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::lowpass",3,"kfr::expression_pointer< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_lowpass",1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("FirFilter_lowpass",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_lowpass",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  (arg1)->lowpass(arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirFilter_lowpass(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FirFilter_lowpass__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FirFilter_lowpass__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FirFilter_lowpass'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRFilter< SampleType >::lowpass(SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    KfrDSP1::FIRFilter< SampleType >::lowpass(SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::apply",1,"KfrDSP1::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_apply",1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::apply",1,"KfrDSP1::FIRFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::apply",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_apply",1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FirFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FirFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FirFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    KfrDSP1::FIRFilter< SampleType >::apply(kfr::univector< SampleType > &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRFilter< SampleType >::reset",1,"KfrDSP1::FIRFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirFilter_reset",1,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FirFilter(void *obj) {
KfrDSP1::FIRFilter< SampleType > *arg1 = (KfrDSP1::FIRFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FirFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FirFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FirFilter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FirFilter_methods[]= {
    { "set_taps", _wrap_FirFilter_set_taps},
    { "bandpass", _wrap_FirFilter_bandpass},
    { "bandstop", _wrap_FirFilter_bandstop},
    { "highpass", _wrap_FirFilter_highpass},
    { "lowpass", _wrap_FirFilter_lowpass},
    { "apply", _wrap_FirFilter_apply},
    { "reset", _wrap_FirFilter_reset},
    {0,0}
};
static swig_lua_method swig_FirFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FirFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FirFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FirFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FirFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FirFilter_Sf_SwigStatic = {
    "FirFilter",
    swig_FirFilter_Sf_SwigStatic_methods,
    swig_FirFilter_Sf_SwigStatic_attributes,
    swig_FirFilter_Sf_SwigStatic_constants,
    swig_FirFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FirFilter_bases[] = {0};
static const char *swig_FirFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FirFilter = { "FirFilter", "FirFilter", &SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,_proxy__wrap_new_FirFilter, swig_delete_FirFilter, swig_FirFilter_methods, swig_FirFilter_attributes, &swig_FirFilter_Sf_SwigStatic, swig_FirFilter_meta, swig_FirFilter_bases, swig_FirFilter_base_names };

static int _wrap_FirLowpassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRLowpassFilter< SampleType > *arg1 = (KfrDSP1::FIRLowpassFilter< SampleType > *) 0 ;
  KfrDSP1::FIRFilter< SampleType > *arg2 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRLowpassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::filter",1,"KfrDSP1::FIRLowpassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::filter",2,"KfrDSP1::FIRFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirLowpassFilter_filter_set",1,SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FirLowpassFilter_filter_set",2,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirLowpassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRLowpassFilter< SampleType > *arg1 = (KfrDSP1::FIRLowpassFilter< SampleType > *) 0 ;
  KfrDSP1::FIRFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRLowpassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::filter",1,"KfrDSP1::FIRLowpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirLowpassFilter_filter_get",1,SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t);
  }
  
  result = (KfrDSP1::FIRFilter< SampleType > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirLowpassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  bool arg4 ;
  SampleType *argp2 ;
  KfrDSP1::FIRLowpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRLowpassFilter< SampleType >::FIRLowpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::FIRLowpassFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::FIRLowpassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::FIRLowpassFilter",3,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::FIRLowpassFilter",4,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_FirLowpassFilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_FirLowpassFilter",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (KfrDSP1::FIRLowpassFilter< SampleType > *)new KfrDSP1::FIRLowpassFilter< SampleType >(arg1,arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirLowpassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  SampleType *argp2 ;
  KfrDSP1::FIRLowpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRLowpassFilter< SampleType >::FIRLowpassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::FIRLowpassFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::FIRLowpassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::FIRLowpassFilter",3,"kfr::expression_pointer< SampleType > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_FirLowpassFilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_FirLowpassFilter",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  result = (KfrDSP1::FIRLowpassFilter< SampleType > *)new KfrDSP1::FIRLowpassFilter< SampleType >(arg1,arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirLowpassFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_FirLowpassFilter__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FirLowpassFilter__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FirLowpassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRLowpassFilter< SampleType >::FIRLowpassFilter(size_t,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    KfrDSP1::FIRLowpassFilter< SampleType >::FIRLowpassFilter(size_t,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirLowpassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRLowpassFilter< SampleType > *arg1 = (KfrDSP1::FIRLowpassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRLowpassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::apply",1,"KfrDSP1::FIRLowpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirLowpassFilter_apply",1,SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirLowpassFilter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirLowpassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRLowpassFilter< SampleType > *arg1 = (KfrDSP1::FIRLowpassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRLowpassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::apply",1,"KfrDSP1::FIRLowpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::apply",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirLowpassFilter_apply",1,SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirLowpassFilter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirLowpassFilter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirLowpassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FirLowpassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FirLowpassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FirLowpassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRLowpassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    KfrDSP1::FIRLowpassFilter< SampleType >::apply(kfr::univector< SampleType > &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirLowpassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRLowpassFilter< SampleType > *arg1 = (KfrDSP1::FIRLowpassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRLowpassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRLowpassFilter< SampleType >::reset",1,"KfrDSP1::FIRLowpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirLowpassFilter_reset",1,SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FirLowpassFilter(void *obj) {
KfrDSP1::FIRLowpassFilter< SampleType > *arg1 = (KfrDSP1::FIRLowpassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FirLowpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FirLowpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FirLowpassFilter_attributes[] = {
    { "filter", _wrap_FirLowpassFilter_filter_get, _wrap_FirLowpassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FirLowpassFilter_methods[]= {
    { "apply", _wrap_FirLowpassFilter_apply},
    { "reset", _wrap_FirLowpassFilter_reset},
    {0,0}
};
static swig_lua_method swig_FirLowpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FirLowpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FirLowpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FirLowpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FirLowpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FirLowpassFilter_Sf_SwigStatic = {
    "FirLowpassFilter",
    swig_FirLowpassFilter_Sf_SwigStatic_methods,
    swig_FirLowpassFilter_Sf_SwigStatic_attributes,
    swig_FirLowpassFilter_Sf_SwigStatic_constants,
    swig_FirLowpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FirLowpassFilter_bases[] = {0};
static const char *swig_FirLowpassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FirLowpassFilter = { "FirLowpassFilter", "FirLowpassFilter", &SWIGTYPE_p_KfrDSP1__FIRLowpassFilterT_SampleType_t,_proxy__wrap_new_FirLowpassFilter, swig_delete_FirLowpassFilter, swig_FirLowpassFilter_methods, swig_FirLowpassFilter_attributes, &swig_FirLowpassFilter_Sf_SwigStatic, swig_FirLowpassFilter_meta, swig_FirLowpassFilter_bases, swig_FirLowpassFilter_base_names };

static int _wrap_FirHighpassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRHighpassFilter< SampleType > *arg1 = (KfrDSP1::FIRHighpassFilter< SampleType > *) 0 ;
  KfrDSP1::FIRFilter< SampleType > *arg2 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRHighpassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::filter",1,"KfrDSP1::FIRHighpassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::filter",2,"KfrDSP1::FIRFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirHighpassFilter_filter_set",1,SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FirHighpassFilter_filter_set",2,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirHighpassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRHighpassFilter< SampleType > *arg1 = (KfrDSP1::FIRHighpassFilter< SampleType > *) 0 ;
  KfrDSP1::FIRFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRHighpassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::filter",1,"KfrDSP1::FIRHighpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirHighpassFilter_filter_get",1,SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t);
  }
  
  result = (KfrDSP1::FIRFilter< SampleType > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirHighpassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  bool arg4 ;
  SampleType *argp2 ;
  KfrDSP1::FIRHighpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRHighpassFilter< SampleType >::FIRHighpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::FIRHighpassFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::FIRHighpassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::FIRHighpassFilter",3,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::FIRHighpassFilter",4,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_FirHighpassFilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_FirHighpassFilter",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (KfrDSP1::FIRHighpassFilter< SampleType > *)new KfrDSP1::FIRHighpassFilter< SampleType >(arg1,arg2,*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirHighpassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  kfr::expression_pointer< SampleType > *arg3 = 0 ;
  SampleType *argp2 ;
  KfrDSP1::FIRHighpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRHighpassFilter< SampleType >::FIRHighpassFilter",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::FIRHighpassFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::FIRHighpassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::FIRHighpassFilter",3,"kfr::expression_pointer< SampleType > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_FirHighpassFilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_FirHighpassFilter",3,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  result = (KfrDSP1::FIRHighpassFilter< SampleType > *)new KfrDSP1::FIRHighpassFilter< SampleType >(arg1,arg2,*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirHighpassFilter(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_FirHighpassFilter__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FirHighpassFilter__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FirHighpassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRHighpassFilter< SampleType >::FIRHighpassFilter(size_t,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    KfrDSP1::FIRHighpassFilter< SampleType >::FIRHighpassFilter(size_t,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirHighpassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRHighpassFilter< SampleType > *arg1 = (KfrDSP1::FIRHighpassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRHighpassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::apply",1,"KfrDSP1::FIRHighpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirHighpassFilter_apply",1,SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirHighpassFilter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirHighpassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRHighpassFilter< SampleType > *arg1 = (KfrDSP1::FIRHighpassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRHighpassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::apply",1,"KfrDSP1::FIRHighpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::apply",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirHighpassFilter_apply",1,SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirHighpassFilter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirHighpassFilter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirHighpassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FirHighpassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FirHighpassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FirHighpassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRHighpassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    KfrDSP1::FIRHighpassFilter< SampleType >::apply(kfr::univector< SampleType > &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirHighpassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRHighpassFilter< SampleType > *arg1 = (KfrDSP1::FIRHighpassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRHighpassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRHighpassFilter< SampleType >::reset",1,"KfrDSP1::FIRHighpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirHighpassFilter_reset",1,SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FirHighpassFilter(void *obj) {
KfrDSP1::FIRHighpassFilter< SampleType > *arg1 = (KfrDSP1::FIRHighpassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FirHighpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FirHighpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FirHighpassFilter_attributes[] = {
    { "filter", _wrap_FirHighpassFilter_filter_get, _wrap_FirHighpassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FirHighpassFilter_methods[]= {
    { "apply", _wrap_FirHighpassFilter_apply},
    { "reset", _wrap_FirHighpassFilter_reset},
    {0,0}
};
static swig_lua_method swig_FirHighpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FirHighpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FirHighpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FirHighpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FirHighpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FirHighpassFilter_Sf_SwigStatic = {
    "FirHighpassFilter",
    swig_FirHighpassFilter_Sf_SwigStatic_methods,
    swig_FirHighpassFilter_Sf_SwigStatic_attributes,
    swig_FirHighpassFilter_Sf_SwigStatic_constants,
    swig_FirHighpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FirHighpassFilter_bases[] = {0};
static const char *swig_FirHighpassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FirHighpassFilter = { "FirHighpassFilter", "FirHighpassFilter", &SWIGTYPE_p_KfrDSP1__FIRHighpassFilterT_SampleType_t,_proxy__wrap_new_FirHighpassFilter, swig_delete_FirHighpassFilter, swig_FirHighpassFilter_methods, swig_FirHighpassFilter_attributes, &swig_FirHighpassFilter_Sf_SwigStatic, swig_FirHighpassFilter_meta, swig_FirHighpassFilter_bases, swig_FirHighpassFilter_base_names };

static int _wrap_FirBandpassFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRBandpassFilter< SampleType > *arg1 = (KfrDSP1::FIRBandpassFilter< SampleType > *) 0 ;
  KfrDSP1::FIRFilter< SampleType > *arg2 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandpassFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::filter",1,"KfrDSP1::FIRBandpassFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::filter",2,"KfrDSP1::FIRFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandpassFilter_filter_set",1,SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FirBandpassFilter_filter_set",2,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirBandpassFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRBandpassFilter< SampleType > *arg1 = (KfrDSP1::FIRBandpassFilter< SampleType > *) 0 ;
  KfrDSP1::FIRFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandpassFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::filter",1,"KfrDSP1::FIRBandpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandpassFilter_filter_get",1,SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t);
  }
  
  result = (KfrDSP1::FIRFilter< SampleType > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirBandpassFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  bool arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  KfrDSP1::FIRBandpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter",4,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter",5,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_FirBandpassFilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_FirBandpassFilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_FirBandpassFilter",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (KfrDSP1::FIRBandpassFilter< SampleType > *)new KfrDSP1::FIRBandpassFilter< SampleType >(arg1,arg2,arg3,*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirBandpassFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  KfrDSP1::FIRBandpassFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter",4,"kfr::expression_pointer< SampleType > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_FirBandpassFilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_FirBandpassFilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_FirBandpassFilter",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  result = (KfrDSP1::FIRBandpassFilter< SampleType > *)new KfrDSP1::FIRBandpassFilter< SampleType >(arg1,arg2,arg3,*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirBandpassFilter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_FirBandpassFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FirBandpassFilter__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FirBandpassFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter(size_t,SampleType,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    KfrDSP1::FIRBandpassFilter< SampleType >::FIRBandpassFilter(size_t,SampleType,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirBandpassFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRBandpassFilter< SampleType > *arg1 = (KfrDSP1::FIRBandpassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandpassFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::apply",1,"KfrDSP1::FIRBandpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandpassFilter_apply",1,SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandpassFilter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirBandpassFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRBandpassFilter< SampleType > *arg1 = (KfrDSP1::FIRBandpassFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandpassFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::apply",1,"KfrDSP1::FIRBandpassFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::apply",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandpassFilter_apply",1,SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandpassFilter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandpassFilter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirBandpassFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FirBandpassFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FirBandpassFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FirBandpassFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRBandpassFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    KfrDSP1::FIRBandpassFilter< SampleType >::apply(kfr::univector< SampleType > &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirBandpassFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRBandpassFilter< SampleType > *arg1 = (KfrDSP1::FIRBandpassFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandpassFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandpassFilter< SampleType >::reset",1,"KfrDSP1::FIRBandpassFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandpassFilter_reset",1,SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FirBandpassFilter(void *obj) {
KfrDSP1::FIRBandpassFilter< SampleType > *arg1 = (KfrDSP1::FIRBandpassFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FirBandpassFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FirBandpassFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FirBandpassFilter_attributes[] = {
    { "filter", _wrap_FirBandpassFilter_filter_get, _wrap_FirBandpassFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FirBandpassFilter_methods[]= {
    { "apply", _wrap_FirBandpassFilter_apply},
    { "reset", _wrap_FirBandpassFilter_reset},
    {0,0}
};
static swig_lua_method swig_FirBandpassFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FirBandpassFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FirBandpassFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FirBandpassFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FirBandpassFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FirBandpassFilter_Sf_SwigStatic = {
    "FirBandpassFilter",
    swig_FirBandpassFilter_Sf_SwigStatic_methods,
    swig_FirBandpassFilter_Sf_SwigStatic_attributes,
    swig_FirBandpassFilter_Sf_SwigStatic_constants,
    swig_FirBandpassFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FirBandpassFilter_bases[] = {0};
static const char *swig_FirBandpassFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FirBandpassFilter = { "FirBandpassFilter", "FirBandpassFilter", &SWIGTYPE_p_KfrDSP1__FIRBandpassFilterT_SampleType_t,_proxy__wrap_new_FirBandpassFilter, swig_delete_FirBandpassFilter, swig_FirBandpassFilter_methods, swig_FirBandpassFilter_attributes, &swig_FirBandpassFilter_Sf_SwigStatic, swig_FirBandpassFilter_meta, swig_FirBandpassFilter_bases, swig_FirBandpassFilter_base_names };

static int _wrap_FirBandstopFilter_filter_set(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRBandstopFilter< SampleType > *arg1 = (KfrDSP1::FIRBandstopFilter< SampleType > *) 0 ;
  KfrDSP1::FIRFilter< SampleType > *arg2 = (KfrDSP1::FIRFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandstopFilter< SampleType >::filter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::filter",1,"KfrDSP1::FIRBandstopFilter< SampleType > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::filter",2,"KfrDSP1::FIRFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandstopFilter_filter_set",1,SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("FirBandstopFilter_filter_set",2,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t);
  }
  
  if (arg1) (arg1)->filter = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirBandstopFilter_filter_get(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRBandstopFilter< SampleType > *arg1 = (KfrDSP1::FIRBandstopFilter< SampleType > *) 0 ;
  KfrDSP1::FIRFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandstopFilter< SampleType >::filter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::filter",1,"KfrDSP1::FIRBandstopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandstopFilter_filter_get",1,SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t);
  }
  
  result = (KfrDSP1::FIRFilter< SampleType > *) ((arg1)->filter);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRFilterT_SampleType_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirBandstopFilter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  bool arg5 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  KfrDSP1::FIRBandstopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter",4,"kfr::expression_pointer< SampleType > &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter",5,"bool");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_FirBandstopFilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_FirBandstopFilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_FirBandstopFilter",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = (KfrDSP1::FIRBandstopFilter< SampleType > *)new KfrDSP1::FIRBandstopFilter< SampleType >(arg1,arg2,arg3,*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirBandstopFilter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  size_t arg1 ;
  SampleType arg2 ;
  SampleType arg3 ;
  kfr::expression_pointer< SampleType > *arg4 = 0 ;
  SampleType *argp2 ;
  SampleType *argp3 ;
  KfrDSP1::FIRBandstopFilter< SampleType > *result = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter",1,"size_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter",2,"SampleType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter",3,"SampleType");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter",4,"kfr::expression_pointer< SampleType > &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative");
  arg1 = (size_t)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_FirBandstopFilter",2,SWIGTYPE_p_SampleType);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_SampleType,0))){
    SWIG_fail_ptr("new_FirBandstopFilter",3,SWIGTYPE_p_SampleType);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t,0))){
    SWIG_fail_ptr("new_FirBandstopFilter",4,SWIGTYPE_p_kfr__expression_pointerT_SampleType_t);
  }
  
  result = (KfrDSP1::FIRBandstopFilter< SampleType > *)new KfrDSP1::FIRBandstopFilter< SampleType >(arg1,arg2,arg3,*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FirBandstopFilter(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_FirBandstopFilter__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_SampleType, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_kfr__expression_pointerT_SampleType_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_FirBandstopFilter__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FirBandstopFilter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter(size_t,SampleType,SampleType,kfr::expression_pointer< SampleType > &,bool)\n"
    "    KfrDSP1::FIRBandstopFilter< SampleType >::FIRBandstopFilter(size_t,SampleType,SampleType,kfr::expression_pointer< SampleType > &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirBandstopFilter_apply__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRBandstopFilter< SampleType > *arg1 = (KfrDSP1::FIRBandstopFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandstopFilter< SampleType >::apply",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::apply",1,"KfrDSP1::FIRBandstopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandstopFilter_apply",1,SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandstopFilter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirBandstopFilter_apply__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRBandstopFilter< SampleType > *arg1 = (KfrDSP1::FIRBandstopFilter< SampleType > *) 0 ;
  kfr::univector< SampleType > *arg2 = 0 ;
  kfr::univector< SampleType > *arg3 = 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandstopFilter< SampleType >::apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::apply",1,"KfrDSP1::FIRBandstopFilter< SampleType > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::apply",2,"kfr::univector< SampleType > &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::apply",3,"kfr::univector< SampleType > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandstopFilter_apply",1,SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandstopFilter_apply",2,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_kfr__univectorT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandstopFilter_apply",3,SWIGTYPE_p_kfr__univectorT_SampleType_t);
  }
  
  (arg1)->apply(*arg2,(kfr::univector< SampleType > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FirBandstopFilter_apply(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FirBandstopFilter_apply__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_kfr__univectorT_SampleType_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FirBandstopFilter_apply__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FirBandstopFilter_apply'\n"
    "  Possible C/C++ prototypes are:\n"
    "    KfrDSP1::FIRBandstopFilter< SampleType >::apply(kfr::univector< SampleType > &)\n"
    "    KfrDSP1::FIRBandstopFilter< SampleType >::apply(kfr::univector< SampleType > &,kfr::univector< SampleType > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FirBandstopFilter_reset(lua_State* L) {
  int SWIG_arg = 0;
  KfrDSP1::FIRBandstopFilter< SampleType > *arg1 = (KfrDSP1::FIRBandstopFilter< SampleType > *) 0 ;
  
  SWIG_check_num_args("KfrDSP1::FIRBandstopFilter< SampleType >::reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("KfrDSP1::FIRBandstopFilter< SampleType >::reset",1,"KfrDSP1::FIRBandstopFilter< SampleType > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t,0))){
    SWIG_fail_ptr("FirBandstopFilter_reset",1,SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FirBandstopFilter(void *obj) {
KfrDSP1::FIRBandstopFilter< SampleType > *arg1 = (KfrDSP1::FIRBandstopFilter< SampleType > *) obj;
delete arg1;
}
static int _proxy__wrap_new_FirBandstopFilter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FirBandstopFilter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FirBandstopFilter_attributes[] = {
    { "filter", _wrap_FirBandstopFilter_filter_get, _wrap_FirBandstopFilter_filter_set },
    {0,0,0}
};
static swig_lua_method swig_FirBandstopFilter_methods[]= {
    { "apply", _wrap_FirBandstopFilter_apply},
    { "reset", _wrap_FirBandstopFilter_reset},
    {0,0}
};
static swig_lua_method swig_FirBandstopFilter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FirBandstopFilter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FirBandstopFilter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FirBandstopFilter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FirBandstopFilter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FirBandstopFilter_Sf_SwigStatic = {
    "FirBandstopFilter",
    swig_FirBandstopFilter_Sf_SwigStatic_methods,
    swig_FirBandstopFilter_Sf_SwigStatic_attributes,
    swig_FirBandstopFilter_Sf_SwigStatic_constants,
    swig_FirBandstopFilter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FirBandstopFilter_bases[] = {0};
static const char *swig_FirBandstopFilter_base_names[] = {0};
static swig_lua_class _wrap_class_FirBandstopFilter = { "FirBandstopFilter", "FirBandstopFilter", &SWIGTYPE_p_KfrDSP1__FIRBandstopFilterT_SampleType_t,_proxy__wrap_new_FirBandstopFilter, swig_delete_FirBandstopFilter, swig_FirBandstopFilter_methods, swig_FirBandstopFilter_attributes, &swig_FirBandstopFilter_Sf_SwigStatic, swig_FirBandstopFilter_meta, swig_FirBandstopFilter_bases, swig_FirBandstopFilter_base_names };

static int _wrap_sampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("sampleRate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("sampleRate",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  sampleRate = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_sampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("sampleRate",0,0)
  result = (float)sampleRate;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_invSampleRate_set(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  
  SWIG_check_num_args("invSampleRate",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("invSampleRate",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  invSampleRate = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_invSampleRate_get(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("invSampleRate",0,0)
  result = (float)invSampleRate;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_noise_set(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne arg1 ;
  Std::RandomMersenne *argp1 ;
  
  SWIG_check_num_args("noise",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("noise",1,"Std::RandomMersenne");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Std__RandomMersenne,0))){
    SWIG_fail_ptr("noise_set",1,SWIGTYPE_p_Std__RandomMersenne);
  }
  arg1 = *argp1;
  
  noise = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_noise_get(lua_State* L) {
  int SWIG_arg = 0;
  Std::RandomMersenne result;
  
  SWIG_check_num_args("noise",0,0)
  result = noise;
  {
    Std::RandomMersenne * resultptr = new Std::RandomMersenne((const Std::RandomMersenne &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Std__RandomMersenne,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "biquad_params_is_pod", _wrap_biquad_params_is_pod_get, SWIG_Lua_set_immutable },
    { "sampleRate", _wrap_sampleRate_get, _wrap_sampleRate_set },
    { "invSampleRate", _wrap_invSampleRate_get, _wrap_invSampleRate_set },
    { "noise", _wrap_noise_get, _wrap_noise_set },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("fe_divbyzero", FE_DIVBYZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_inexact", FE_INEXACT)},
    {SWIG_LUA_CONSTTAB_INT("fe_invalid", FE_INVALID)},
    {SWIG_LUA_CONSTTAB_INT("fe_overflow", FE_OVERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_underflow", FE_UNDERFLOW)},
    {SWIG_LUA_CONSTTAB_INT("fe_all_except", FE_ALL_EXCEPT)},
    {SWIG_LUA_CONSTTAB_INT("fe_downward", FE_DOWNWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_tonearest", FE_TONEAREST)},
    {SWIG_LUA_CONSTTAB_INT("fe_towardzero", FE_TOWARDZERO)},
    {SWIG_LUA_CONSTTAB_INT("fe_upward", FE_UPWARD)},
    {SWIG_LUA_CONSTTAB_INT("fe_dfl_env", FE_DFL_ENV)},
    {SWIG_LUA_CONSTTAB_INT("char_bit", CHAR_BIT)},
    {SWIG_LUA_CONSTTAB_INT("schar_min", SCHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("schar_max", SCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uchar_max", UCHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("char_min", CHAR_MIN)},
    {SWIG_LUA_CONSTTAB_INT("char_max", CHAR_MAX)},
    {SWIG_LUA_CONSTTAB_INT("mb_len_max", MB_LEN_MAX)},
    {SWIG_LUA_CONSTTAB_INT("shrt_min", SHRT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("shrt_max", SHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ushrt_max", USHRT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("int_min", INT_MIN)},
    {SWIG_LUA_CONSTTAB_INT("int_max", INT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("uint_max", UINT_MAX)},
    {SWIG_LUA_CONSTTAB_INT("long_min", LONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("long_max", LONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ulong_max", ULONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("llong_min", LLONG_MIN)},
    {SWIG_LUA_CONSTTAB_INT("llong_max", LLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("ullong_max", ULLONG_MAX)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_type_unknown", kfr::audio_sample_type::unknown)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_type_i8", kfr::audio_sample_type::i8)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_type_i16", kfr::audio_sample_type::i16)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_type_i24", kfr::audio_sample_type::i24)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_type_i32", kfr::audio_sample_type::i32)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_type_i64", kfr::audio_sample_type::i64)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_type_f32", kfr::audio_sample_type::f32)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_type_f64", kfr::audio_sample_type::f64)},
    {SWIG_LUA_CONSTTAB_INT("audio_sample_type_first_float", kfr::audio_sample_type::first_float)},
    {SWIG_LUA_CONSTTAB_INT("sample_rate_conversion_quality_draft", kfr::sample_rate_conversion_quality::draft)},
    {SWIG_LUA_CONSTTAB_INT("sample_rate_conversion_quality_low", kfr::sample_rate_conversion_quality::low)},
    {SWIG_LUA_CONSTTAB_INT("sample_rate_conversion_quality_normal", kfr::sample_rate_conversion_quality::normal)},
    {SWIG_LUA_CONSTTAB_INT("sample_rate_conversion_quality_high", kfr::sample_rate_conversion_quality::high)},
    {SWIG_LUA_CONSTTAB_INT("sample_rate_conversion_quality_perfect", kfr::sample_rate_conversion_quality::perfect)},
    {SWIG_LUA_CONSTTAB_INT("biquad_type_lowpass", kfr::biquad_type::lowpass)},
    {SWIG_LUA_CONSTTAB_INT("biquad_type_highpass", kfr::biquad_type::highpass)},
    {SWIG_LUA_CONSTTAB_INT("biquad_type_bandpass", kfr::biquad_type::bandpass)},
    {SWIG_LUA_CONSTTAB_INT("biquad_type_bandstop", kfr::biquad_type::bandstop)},
    {SWIG_LUA_CONSTTAB_INT("biquad_type_peak", kfr::biquad_type::peak)},
    {SWIG_LUA_CONSTTAB_INT("biquad_type_notch", kfr::biquad_type::notch)},
    {SWIG_LUA_CONSTTAB_INT("biquad_type_lowshelf", kfr::biquad_type::lowshelf)},
    {SWIG_LUA_CONSTTAB_INT("biquad_type_highshelf", kfr::biquad_type::highshelf)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_None", kfr::Speaker::None)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Mono", kfr::Speaker::Mono)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_M", kfr::Speaker::M)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Left", kfr::Speaker::Left)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_L", kfr::Speaker::L)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Right", kfr::Speaker::Right)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_R", kfr::Speaker::R)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Center", kfr::Speaker::Center)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_C", kfr::Speaker::C)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Lfe", kfr::Speaker::Lfe)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Ls", kfr::Speaker::Ls)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_LeftSurround", kfr::Speaker::LeftSurround)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Rs", kfr::Speaker::Rs)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_RightSurround", kfr::Speaker::RightSurround)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Lc", kfr::Speaker::Lc)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Rc", kfr::Speaker::Rc)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_S", kfr::Speaker::S)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Cs", kfr::Speaker::Cs)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Sl", kfr::Speaker::Sl)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Sr", kfr::Speaker::Sr)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Tm", kfr::Speaker::Tm)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Tfl", kfr::Speaker::Tfl)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Tfc", kfr::Speaker::Tfc)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Tfr", kfr::Speaker::Tfr)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Trl", kfr::Speaker::Trl)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Trc", kfr::Speaker::Trc)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Trr", kfr::Speaker::Trr)},
    {SWIG_LUA_CONSTTAB_INT("Speaker_Lfe2", kfr::Speaker::Lfe2)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_None", kfr::SpeakerArrangement::None)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Mono", kfr::SpeakerArrangement::Mono)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Stereo", kfr::SpeakerArrangement::Stereo)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_StereoSurround", kfr::SpeakerArrangement::StereoSurround)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_StereoCenter", kfr::SpeakerArrangement::StereoCenter)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_StereoSide", kfr::SpeakerArrangement::StereoSide)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_StereoCLfe", kfr::SpeakerArrangement::StereoCLfe)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Cine30", kfr::SpeakerArrangement::Cine30)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Music30", kfr::SpeakerArrangement::Music30)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Cine31", kfr::SpeakerArrangement::Cine31)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Music31", kfr::SpeakerArrangement::Music31)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Cine40", kfr::SpeakerArrangement::Cine40)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Music40", kfr::SpeakerArrangement::Music40)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Cine41", kfr::SpeakerArrangement::Cine41)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Music41", kfr::SpeakerArrangement::Music41)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Arr50", kfr::SpeakerArrangement::Arr50)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Arr51", kfr::SpeakerArrangement::Arr51)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Cine60", kfr::SpeakerArrangement::Cine60)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Music60", kfr::SpeakerArrangement::Music60)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Cine61", kfr::SpeakerArrangement::Cine61)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Music61", kfr::SpeakerArrangement::Music61)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Cine70", kfr::SpeakerArrangement::Cine70)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Music70", kfr::SpeakerArrangement::Music70)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Cine71", kfr::SpeakerArrangement::Cine71)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Music71", kfr::SpeakerArrangement::Music71)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Cine80", kfr::SpeakerArrangement::Cine80)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Music80", kfr::SpeakerArrangement::Music80)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Cine81", kfr::SpeakerArrangement::Cine81)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Music81", kfr::SpeakerArrangement::Music81)},
    {SWIG_LUA_CONSTTAB_INT("SpeakerArrangement_Arr102", kfr::SpeakerArrangement::Arr102)},
    {SWIG_LUA_CONSTTAB_INT("seek_origin_current", kfr::seek_origin::current)},
    {SWIG_LUA_CONSTTAB_INT("seek_origin_begin", kfr::seek_origin::begin)},
    {SWIG_LUA_CONSTTAB_INT("seek_origin_c_end", kfr::seek_origin::end)},
    { SWIG_LUA_CONSTTAB_POINTER("bessel_filter_maxorder",&DSP::BesselFilter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    { SWIG_LUA_CONSTTAB_POINTER("butterworth_filter_maxorder",&DSP::ButterworthFilter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    { SWIG_LUA_CONSTTAB_POINTER("chevyshev1_filter_maxorder",&DSP::Chebyshev1Filter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    { SWIG_LUA_CONSTTAB_POINTER("chevyshev2_filter_maxorder",&DSP::Chebyshev2Filter< SampleType >::maxorder, SWIGTYPE_p_size_t) },
    {SWIG_LUA_CONSTTAB_INT("dft_type_both", kfr::dft_type::both)},
    {SWIG_LUA_CONSTTAB_INT("dft_type_direct", kfr::dft_type::direct)},
    {SWIG_LUA_CONSTTAB_INT("dft_type_inverse", kfr::dft_type::inverse)},
    {SWIG_LUA_CONSTTAB_INT("dft_order_normal", kfr::dft_order::normal)},
    {SWIG_LUA_CONSTTAB_INT("dft_order_internal", kfr::dft_order::internal)},
    {SWIG_LUA_CONSTTAB_INT("dft_pack_format_Perm", kfr::dft_pack_format::Perm)},
    {SWIG_LUA_CONSTTAB_INT("dft_pack_format_CCs", kfr::dft_pack_format::CCs)},
    {SWIG_LUA_CONSTTAB_INT("PINK_NOISE_NUM_STAGES", 3)},
    {SWIG_LUA_CONSTTAB_INT("Lowpass", KfrDSP1::Lowpass)},
    {SWIG_LUA_CONSTTAB_INT("Highpass", KfrDSP1::Highpass)},
    {SWIG_LUA_CONSTTAB_INT("Bandpass", KfrDSP1::Bandpass)},
    {SWIG_LUA_CONSTTAB_INT("Bandpass2", KfrDSP1::Bandpass2)},
    {SWIG_LUA_CONSTTAB_INT("Notch", KfrDSP1::Notch)},
    {SWIG_LUA_CONSTTAB_INT("Bandstop", KfrDSP1::Bandstop)},
    {SWIG_LUA_CONSTTAB_INT("Allpass", KfrDSP1::Allpass)},
    {SWIG_LUA_CONSTTAB_INT("Peak", KfrDSP1::Peak)},
    {SWIG_LUA_CONSTTAB_INT("Lowshelf", KfrDSP1::Lowshelf)},
    {SWIG_LUA_CONSTTAB_INT("Highshelf", KfrDSP1::Highshelf)},
    {SWIG_LUA_CONSTTAB_INT("RbjFilter_Lowpass", KfrDSP1::RbjFilter::Lowpass)},
    {SWIG_LUA_CONSTTAB_INT("RbjFilter_Highpass", KfrDSP1::RbjFilter::Highpass)},
    {SWIG_LUA_CONSTTAB_INT("RbjFilter_Bandpass", KfrDSP1::RbjFilter::Bandpass)},
    {SWIG_LUA_CONSTTAB_INT("RbjFilter_Bandpass2", KfrDSP1::RbjFilter::Bandpass2)},
    {SWIG_LUA_CONSTTAB_INT("RbjFilter_Notch", KfrDSP1::RbjFilter::Notch)},
    {SWIG_LUA_CONSTTAB_INT("RbjFilter_Bandstop", KfrDSP1::RbjFilter::Bandstop)},
    {SWIG_LUA_CONSTTAB_INT("RbjFilter_Allpass", KfrDSP1::RbjFilter::Allpass)},
    {SWIG_LUA_CONSTTAB_INT("RbjFilter_Peak", KfrDSP1::RbjFilter::Peak)},
    {SWIG_LUA_CONSTTAB_INT("RbjFilter_Lowshelf", KfrDSP1::RbjFilter::Lowshelf)},
    {SWIG_LUA_CONSTTAB_INT("RbjFilter_Highshelf", KfrDSP1::RbjFilter::Highshelf)},
    {SWIG_LUA_CONSTTAB_INT("ZolzerBiquad_Lowpass", KfrDSP1::ZolzerBiquad::Lowpass)},
    {SWIG_LUA_CONSTTAB_INT("ZolzerBiquad_Highpass", KfrDSP1::ZolzerBiquad::Highpass)},
    {SWIG_LUA_CONSTTAB_INT("ZolzerBiquad_Bandpass", KfrDSP1::ZolzerBiquad::Bandpass)},
    {SWIG_LUA_CONSTTAB_INT("ZolzerBiquad_Bandpass2", KfrDSP1::ZolzerBiquad::Bandpass2)},
    {SWIG_LUA_CONSTTAB_INT("ZolzerBiquad_Notch", KfrDSP1::ZolzerBiquad::Notch)},
    {SWIG_LUA_CONSTTAB_INT("ZolzerBiquad_Bandstop", KfrDSP1::ZolzerBiquad::Bandstop)},
    {SWIG_LUA_CONSTTAB_INT("ZolzerBiquad_Allpass", KfrDSP1::ZolzerBiquad::Allpass)},
    {SWIG_LUA_CONSTTAB_INT("ZolzerBiquad_Peak", KfrDSP1::ZolzerBiquad::Peak)},
    {SWIG_LUA_CONSTTAB_INT("ZolzerBiquad_Lowshelf", KfrDSP1::ZolzerBiquad::Lowshelf)},
    {SWIG_LUA_CONSTTAB_INT("ZolzerBiquad_Highshelf", KfrDSP1::ZolzerBiquad::Highshelf)},
    {SWIG_LUA_CONSTTAB_INT("rectangular", KfrDSP1::rectangular)},
    {SWIG_LUA_CONSTTAB_INT("triangular", KfrDSP1::triangular)},
    {SWIG_LUA_CONSTTAB_INT("bartlett", KfrDSP1::bartlett)},
    {SWIG_LUA_CONSTTAB_INT("cosine", KfrDSP1::cosine)},
    {SWIG_LUA_CONSTTAB_INT("hann", KfrDSP1::hann)},
    {SWIG_LUA_CONSTTAB_INT("bartlett_hann", KfrDSP1::bartlett_hann)},
    {SWIG_LUA_CONSTTAB_INT("hamming", KfrDSP1::hamming)},
    {SWIG_LUA_CONSTTAB_INT("bohman", KfrDSP1::bohman)},
    {SWIG_LUA_CONSTTAB_INT("blackman", KfrDSP1::blackman)},
    {SWIG_LUA_CONSTTAB_INT("blackman_harris", KfrDSP1::blackman_harris)},
    {SWIG_LUA_CONSTTAB_INT("kaiser", KfrDSP1::kaiser)},
    {SWIG_LUA_CONSTTAB_INT("flattop", KfrDSP1::flattop)},
    {SWIG_LUA_CONSTTAB_INT("gaussian", KfrDSP1::gaussian)},
    {SWIG_LUA_CONSTTAB_INT("lanczos", KfrDSP1::lanczos)},
    {SWIG_LUA_CONSTTAB_INT("CombFilter_X_index", KfrDSP1::CombFilter< SampleType >::X_index)},
    {SWIG_LUA_CONSTTAB_INT("CombFilter_Y_index", KfrDSP1::CombFilter< SampleType >::Y_index)},
    {SWIG_LUA_CONSTTAB_INT("MultitapCombFilter_X_index", KfrDSP1::MultiTapCombFilter< SampleType >::X_index)},
    {SWIG_LUA_CONSTTAB_INT("MultitapCombFilter_Y_index", KfrDSP1::MultiTapCombFilter< SampleType >::Y_index)},
    {SWIG_LUA_CONSTTAB_INT("DelayLine_None", KfrDSP1::DelayLine< SampleType >::None)},
    {SWIG_LUA_CONSTTAB_INT("DelayLine_NearestNeighbor", KfrDSP1::DelayLine< SampleType >::NearestNeighbor)},
    {SWIG_LUA_CONSTTAB_INT("DelayLine_Linear", KfrDSP1::DelayLine< SampleType >::Linear)},
    {SWIG_LUA_CONSTTAB_INT("DelayLine_Cubic", KfrDSP1::DelayLine< SampleType >::Cubic)},
    {SWIG_LUA_CONSTTAB_INT("DelayLine_Spline3", KfrDSP1::DelayLine< SampleType >::Spline3)},
    {SWIG_LUA_CONSTTAB_INT("DelayLine_Spline5", KfrDSP1::DelayLine< SampleType >::Spline5)},
    {SWIG_LUA_CONSTTAB_INT("DelayLine_Hermite1", KfrDSP1::DelayLine< SampleType >::Hermite1)},
    {SWIG_LUA_CONSTTAB_INT("DelayLine_Hermite2", KfrDSP1::DelayLine< SampleType >::Hermite2)},
    {SWIG_LUA_CONSTTAB_INT("DelayLine_Hermite3", KfrDSP1::DelayLine< SampleType >::Hermite3)},
    {SWIG_LUA_CONSTTAB_INT("DelayLine_Hermite4", KfrDSP1::DelayLine< SampleType >::Hermite4)},
    {SWIG_LUA_CONSTTAB_INT("MultitapDelayLine_None", KfrDSP1::MultiTapDelayLine< SampleType >::None)},
    {SWIG_LUA_CONSTTAB_INT("MultitapDelayLine_NearestNeighbor", KfrDSP1::MultiTapDelayLine< SampleType >::NearestNeighbor)},
    {SWIG_LUA_CONSTTAB_INT("MultitapDelayLine_Linear", KfrDSP1::MultiTapDelayLine< SampleType >::Linear)},
    {SWIG_LUA_CONSTTAB_INT("MultitapDelayLine_Cubic", KfrDSP1::MultiTapDelayLine< SampleType >::Cubic)},
    {SWIG_LUA_CONSTTAB_INT("MultitapDelayLine_Spline3", KfrDSP1::MultiTapDelayLine< SampleType >::Spline3)},
    {SWIG_LUA_CONSTTAB_INT("MultitapDelayLine_Spline5", KfrDSP1::MultiTapDelayLine< SampleType >::Spline5)},
    {SWIG_LUA_CONSTTAB_INT("MultitapDelayLine_Hermite1", KfrDSP1::MultiTapDelayLine< SampleType >::Hermite1)},
    {SWIG_LUA_CONSTTAB_INT("MultitapDelayLine_Hermite2", KfrDSP1::MultiTapDelayLine< SampleType >::Hermite2)},
    {SWIG_LUA_CONSTTAB_INT("MultitapDelayLine_Hermite3", KfrDSP1::MultiTapDelayLine< SampleType >::Hermite3)},
    {SWIG_LUA_CONSTTAB_INT("MultitapDelayLine_Hermite4", KfrDSP1::MultiTapDelayLine< SampleType >::Hermite4)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "Huge", _wrap_Huge},
    { "Hugef", _wrap_Hugef},
    { "Infinity", _wrap_Infinity},
    { "NaN", _wrap_NaN},
    { "absf", _wrap_absf},
    { "cubef", _wrap_cubef},
    { "sqrtf", _wrap_sqrtf},
    { "expf", _wrap_expf},
    { "exp2f", _wrap_exp2f},
    { "logf", _wrap_logf},
    { "log10f", _wrap_log10f},
    { "log2f", _wrap_log2f},
    { "logbf", _wrap_logbf},
    { "powf", _wrap_powf},
    { "floorf", _wrap_floorf},
    { "acosf", _wrap_acosf},
    { "asinf", _wrap_asinf},
    { "atanf", _wrap_atanf},
    { "atan2f", _wrap_atan2f},
    { "cosf", _wrap_cosf},
    { "sinf", _wrap_sinf},
    { "tanf", _wrap_tanf},
    { "coshf", _wrap_coshf},
    { "sinhf", _wrap_sinhf},
    { "tanhf", _wrap_tanhf},
    { "lgammaf", _wrap_lgammaf},
    { "acoshf", _wrap_acoshf},
    { "asinhf", _wrap_asinhf},
    { "atanhf", _wrap_atanhf},
    { "cbrtf", _wrap_cbrtf},
    { "ceilf", _wrap_ceilf},
    { "copysignf", _wrap_copysignf},
    { "erff", _wrap_erff},
    { "erfcf", _wrap_erfcf},
    { "expm1f", _wrap_expm1f},
    { "fdimf", _wrap_fdimf},
    { "fmaf", _wrap_fmaf},
    { "fmaxf", _wrap_fmaxf},
    { "fminf", _wrap_fminf},
    { "fmodf", _wrap_fmodf},
    { "fpclassifyf", _wrap_fpclassifyf},
    { "hypotf", _wrap_hypotf},
    { "ilogbf", _wrap_ilogbf},
    { "isfinitef", _wrap_isfinitef},
    { "isgreaterf", _wrap_isgreaterf},
    { "isgreaterequalf", _wrap_isgreaterequalf},
    { "isinff", _wrap_isinff},
    { "islessf", _wrap_islessf},
    { "islessequalf", _wrap_islessequalf},
    { "isnanf", _wrap_isnanf},
    { "isnormalf", _wrap_isnormalf},
    { "isunorderedf", _wrap_isunorderedf},
    { "ldexpf", _wrap_ldexpf},
    { "llrintf", _wrap_llrintf},
    { "llroundf", _wrap_llroundf},
    { "log1pf", _wrap_log1pf},
    { "lrintf", _wrap_lrintf},
    { "lroundf", _wrap_lroundf},
    { "nanf", _wrap_nanf},
    { "nanff", _wrap_nanff},
    { "nanlf", _wrap_nanlf},
    { "nearbyintf", _wrap_nearbyintf},
    { "nextafterf", _wrap_nextafterf},
    { "nexttowardf", _wrap_nexttowardf},
    { "remainderf", _wrap_remainderf},
    { "rintf", _wrap_rintf},
    { "roundf", _wrap_roundf},
    { "scalblnf", _wrap_scalblnf},
    { "scalbnf", _wrap_scalbnf},
    { "squaref", _wrap_squaref},
    { "tgammaf", _wrap_tgammaf},
    { "truncf", _wrap_truncf},
    { "absd", _wrap_absd},
    { "sqrtd", _wrap_sqrtd},
    { "expd", _wrap_expd},
    { "exp2d", _wrap_exp2d},
    { "logd", _wrap_logd},
    { "log10d", _wrap_log10d},
    { "log2d", _wrap_log2d},
    { "logbd", _wrap_logbd},
    { "powd", _wrap_powd},
    { "floord", _wrap_floord},
    { "acosd", _wrap_acosd},
    { "asind", _wrap_asind},
    { "atand", _wrap_atand},
    { "atan2d", _wrap_atan2d},
    { "cosd", _wrap_cosd},
    { "sind", _wrap_sind},
    { "tand", _wrap_tand},
    { "coshd", _wrap_coshd},
    { "sinhd", _wrap_sinhd},
    { "tanhd", _wrap_tanhd},
    { "lgammad", _wrap_lgammad},
    { "acoshd", _wrap_acoshd},
    { "asinhd", _wrap_asinhd},
    { "atanhd", _wrap_atanhd},
    { "cbrtd", _wrap_cbrtd},
    { "ceild", _wrap_ceild},
    { "copysignd", _wrap_copysignd},
    { "erfd", _wrap_erfd},
    { "erfcd", _wrap_erfcd},
    { "expm1d", _wrap_expm1d},
    { "fdimd", _wrap_fdimd},
    { "fmad", _wrap_fmad},
    { "fmaxd", _wrap_fmaxd},
    { "fmind", _wrap_fmind},
    { "fmodd", _wrap_fmodd},
    { "fpclassifyd", _wrap_fpclassifyd},
    { "hypotd", _wrap_hypotd},
    { "ilogbd", _wrap_ilogbd},
    { "isfinited", _wrap_isfinited},
    { "isgreaterd", _wrap_isgreaterd},
    { "isgreaterequald", _wrap_isgreaterequald},
    { "isinfd", _wrap_isinfd},
    { "islessd", _wrap_islessd},
    { "islessequald", _wrap_islessequald},
    { "isnand", _wrap_isnand},
    { "isnormald", _wrap_isnormald},
    { "isunorderedd", _wrap_isunorderedd},
    { "ldexpd", _wrap_ldexpd},
    { "llrintd", _wrap_llrintd},
    { "llroundd", _wrap_llroundd},
    { "log1pd", _wrap_log1pd},
    { "lrintd", _wrap_lrintd},
    { "lroundd", _wrap_lroundd},
    { "nand", _wrap_nand},
    { "nanfd", _wrap_nanfd},
    { "nanld", _wrap_nanld},
    { "nearbyintd", _wrap_nearbyintd},
    { "nextafterd", _wrap_nextafterd},
    { "nexttowardd", _wrap_nexttowardd},
    { "remainderd", _wrap_remainderd},
    { "rintd", _wrap_rintd},
    { "roundd", _wrap_roundd},
    { "scalblnd", _wrap_scalblnd},
    { "scalbnd", _wrap_scalbnd},
    { "squared", _wrap_squared},
    { "tgammad", _wrap_tgammad},
    { "truncd", _wrap_truncd},
    { "feclearexcept", _wrap_feclearexcept},
    { "fegetexceptflag", _wrap_fegetexceptflag},
    { "feraiseexcept", _wrap_feraiseexcept},
    { "fesetexceptflag", _wrap_fesetexceptflag},
    { "fetestexcept", _wrap_fetestexcept},
    { "fegetround", _wrap_fegetround},
    { "fesetround", _wrap_fesetround},
    { "fegetenv", _wrap_fegetenv},
    { "feholdexcept", _wrap_feholdexcept},
    { "fesetenv", _wrap_fesetenv},
    { "feupdateenv", _wrap_feupdateenv},
    { "dB_to_string", _wrap_dB_to_string},
    { "dB_to_utf8string", _wrap_dB_to_utf8string},
    { "audio_sample_sizeof", _wrap_audio_sample_sizeof},
    { "audio_sample_bit_depth", _wrap_audio_sample_bit_depth},
    { "deinterleave", _wrap_deinterleave},
    { "interleave", _wrap_interleave},
    { "to_univector", _wrap_to_univector},
    { "to_vector", _wrap_to_vector},
    { "csin", _wrap_csin},
    { "ccos", _wrap_ccos},
    { "csinh", _wrap_csinh},
    { "ccosh", _wrap_ccosh},
    { "cabssqr", _wrap_cabssqr},
    { "cabs", _wrap_cabs},
    { "carg", _wrap_carg},
    { "clog", _wrap_clog},
    { "clog10", _wrap_clog10},
    { "clog2", _wrap_clog2},
    { "cexp", _wrap_cexp},
    { "cexp2", _wrap_cexp2},
    { "cexp10", _wrap_cexp10},
    { "cpolar", _wrap_cpolar},
    { "ccartesian", _wrap_ccartesian},
    { "csqrt", _wrap_csqrt},
    { "csqr", _wrap_csqr},
    { "abs", _wrap_abs},
    { "add", _wrap_add},
    { "absmax", _wrap_absmax},
    { "absmin", _wrap_absmin},
    { "clamp", _wrap_clamp},
    { "cube", _wrap_cube},
    { "div", _wrap_div},
    { "fmadd", _wrap_fmadd},
    { "fmsub", _wrap_fmsub},
    { "max", _wrap_max},
    { "min", _wrap_min},
    { "mix", _wrap_mix},
    { "mixs", _wrap_mixs},
    { "mul", _wrap_mul},
    { "neg", _wrap_neg},
    { "sqr", _wrap_sqr},
    { "sqrt", _wrap_sqrt},
    { "exp", _wrap_exp},
    { "exp10", _wrap_exp10},
    { "exp2", _wrap_exp2},
    { "exp_fmadd", _wrap_exp_fmadd},
    { "log", _wrap_log},
    { "log10", _wrap_log10},
    { "log2", _wrap_log2},
    { "log_fmadd", _wrap_log_fmadd},
    { "logb", _wrap_logb},
    { "logm", _wrap_logm},
    { "logn", _wrap_logn},
    { "pow", _wrap_pow},
    { "root", _wrap_root},
    { "floor", _wrap_floor},
    { "acos", _wrap_acos},
    { "asin", _wrap_asin},
    { "atan", _wrap_atan},
    { "atan2", _wrap_atan2},
    { "cos", _wrap_cos},
    { "sin", _wrap_sin},
    { "tan", _wrap_tan},
    { "cosh", _wrap_cosh},
    { "coth", _wrap_coth},
    { "sinh", _wrap_sinh},
    { "tanh", _wrap_tanh},
    { "atan2deg", _wrap_atan2deg},
    { "cosdeg", _wrap_cosdeg},
    { "sindeg", _wrap_sindeg},
    { "sinc", _wrap_sinc},
    { "gamma", _wrap_gamma},
    { "absmaxo", _wrap_absmaxo},
    { "dot", _wrap_dot},
    { "maxo", _wrap_maxo},
    { "mino", _wrap_mino},
    { "mean", _wrap_mean},
    { "prdocut", _wrap_prdocut},
    { "rms", _wrap_rms},
    { "sum", _wrap_sum},
    { "sumsqr", _wrap_sumsqr},
    { "ipow", _wrap_ipow},
    { "cos2x", _wrap_cos2x},
    { "sin2x", _wrap_sin2x},
    { "cos3x", _wrap_cos3x},
    { "sin3x", _wrap_sin3x},
    { "reciprocal", _wrap_reciprocal},
    { "linspace", _wrap_linspace},
    { "pad", _wrap_pad},
    { "truncate", _wrap_truncate},
    { "reverse", _wrap_reverse},
    { "ringbuf_read", _wrap_ringbuf_read},
    { "ringbuf_write", _wrap_ringbuf_write},
    { "random", _wrap_random},
    { "plot_save", _wrap_plot_save},
    { "plot_show", _wrap_plot_show},
    { "waveshaper_hardclip", _wrap_waveshaper_hardclip},
    { "waveshaper_tanh", _wrap_waveshaper_tanh},
    { "waveshaper_saturateI", _wrap_waveshaper_saturateI},
    { "waveshaper_saturateII", _wrap_waveshaper_saturateII},
    { "note_to_hertz", _wrap_note_to_hertz},
    { "hertz_to_note", _wrap_hertz_to_note},
    { "amp_to_dB", _wrap_amp_to_dB},
    { "dB_to_amp", _wrap_dB_to_amp},
    { "power_to_dB", _wrap_power_to_dB},
    { "dB_to_power", _wrap_dB_to_power},
    { "dcremove", _wrap_dcremove},
    { "window_hann", _wrap_window_hann},
    { "window_hamming", _wrap_window_hamming},
    { "window_blackman", _wrap_window_blackman},
    { "window_blackman_harris", _wrap_window_blackman_harris},
    { "window_gaussian", _wrap_window_gaussian},
    { "window_triangular", _wrap_window_triangular},
    { "window_bartlett", _wrap_window_bartlett},
    { "window_cosine", _wrap_window_cosine},
    { "window_bartlett_hann", _wrap_window_bartlett_hann},
    { "window_bohman", _wrap_window_bohman},
    { "window_lanczos", _wrap_window_lanczos},
    { "window_flattop", _wrap_window_flattop},
    { "window_kaiser", _wrap_window_kaiser},
    { "window_hann_ptr", _wrap_window_hann_ptr},
    { "window_hamming_ptr", _wrap_window_hamming_ptr},
    { "window_blackman_ptr", _wrap_window_blackman_ptr},
    { "window_blackman_harris_ptr", _wrap_window_blackman_harris_ptr},
    { "window_gaussian_ptr", _wrap_window_gaussian_ptr},
    { "window_triangular_ptr", _wrap_window_triangular_ptr},
    { "window_bartlett_ptr", _wrap_window_bartlett_ptr},
    { "window_cosine_ptr", _wrap_window_cosine_ptr},
    { "window_bartlett_hann_ptr", _wrap_window_bartlett_hann_ptr},
    { "window_bohman_ptr", _wrap_window_bohman_ptr},
    { "window_lanczos_ptr", _wrap_window_lanczos_ptr},
    { "window_flattop_ptr", _wrap_window_flattop_ptr},
    { "window_kaiser_ptr", _wrap_window_kaiser_ptr},
    { "energy_to_loudness", _wrap_energy_to_loudness},
    { "loudness_to_energy", _wrap_loudness_to_energy},
    { "sinewave", _wrap_sinewave},
    { "squarewave", _wrap_squarewave},
    { "trianglewave", _wrap_trianglewave},
    { "sawtoothwave", _wrap_sawtoothwave},
    { "generate_sine", _wrap_generate_sine},
    { "generate_linear", _wrap_generate_linear},
    { "generate_exp", _wrap_generate_exp},
    { "generate_exp2", _wrap_generate_exp2},
    { "generate_cossin", _wrap_generate_cossin},
    { "resample", _wrap_resample},
    { "convert_sample", _wrap_convert_sample},
    { "wav_load", _wrap_wav_load},
    { "wav_save", _wrap_wav_save},
    { "mp3_load", _wrap_mp3_load},
    { "flac_load", _wrap_flac_load},
    { "biquad", _wrap_biquad},
    { "notch_params", _wrap_notch_params},
    { "lowpass_params", _wrap_lowpass_params},
    { "highpass_params", _wrap_highpass_params},
    { "peak_params", _wrap_peak_params},
    { "lowshelf_params", _wrap_lowshelf_params},
    { "highshelf_params", _wrap_highshelf_params},
    { "bandpass_params", _wrap_bandpass_params},
    { "normalize_frequency", _wrap_normalize_frequency},
    { "lowpassfilter", _wrap_lowpassfilter},
    { "highpassfilter", _wrap_highpassfilter},
    { "bandpassfilter", _wrap_bandpassfilter},
    { "peakfilter", _wrap_peakfilter},
    { "lowshelffilter", _wrap_lowshelffilter},
    { "highshelffilter", _wrap_highshelffilter},
    { "notchfilter", _wrap_notchfilter},
    { "bessel_lowpass", _wrap_bessel_lowpass},
    { "bessel_highpass", _wrap_bessel_highpass},
    { "bessel_bandpass", _wrap_bessel_bandpass},
    { "bessel_bandstop", _wrap_bessel_bandstop},
    { "butterworth_lowpass", _wrap_butterworth_lowpass},
    { "butterworth_highpass", _wrap_butterworth_highpass},
    { "butterworth_bandpass", _wrap_butterworth_bandpass},
    { "butterworth_bandstop", _wrap_butterworth_bandstop},
    { "chebyshev1_lowpass", _wrap_chebyshev1_lowpass},
    { "chebyshev1_highpass", _wrap_chebyshev1_highpass},
    { "chebyshev1_bandpass", _wrap_chebyshev1_bandpass},
    { "chebyshev1_bandstop", _wrap_chebyshev1_bandstop},
    { "chebyshev2_lowpass", _wrap_chebyshev2_lowpass},
    { "chebyshev2_highpass", _wrap_chebyshev2_highpass},
    { "chebyshev2_bandpass", _wrap_chebyshev2_bandpass},
    { "chebyshev2_bandstop", _wrap_chebyshev2_bandstop},
    { "biquad_allpass", _wrap_biquad_allpass},
    { "biquad_lowpass", _wrap_biquad_lowpass},
    { "biquad_highpass", _wrap_biquad_highpass},
    { "biquad_bandpass", _wrap_biquad_bandpass},
    { "biquad_notch", _wrap_biquad_notch},
    { "biquad_peak", _wrap_biquad_peak},
    { "biquad_lowshelf", _wrap_biquad_lowshelf},
    { "biquad_highshelf", _wrap_biquad_highshelf},
    { "chebyshev1", _wrap_chebyshev1},
    { "chebyshev2", _wrap_chebyshev2},
    { "butterworth", _wrap_butterworth},
    { "bessel", _wrap_bessel},
    { "iir_lowpass", _wrap_iir_lowpass},
    { "iir_highpass", _wrap_iir_highpass},
    { "iir_bandpass", _wrap_iir_bandpass},
    { "iir_bandstop", _wrap_iir_bandstop},
    { "to_sos", _wrap_to_sos},
    { "make_convolve_filter", _wrap_make_convolve_filter},
    { "conv", _wrap_conv},
    { "complex_conv", _wrap_complex_conv},
    { "acorr", _wrap_acorr},
    { "complex_acorr", _wrap_complex_acorr},
    { "xcorr", _wrap_xcorr},
    { "complex_xcorr", _wrap_complex_xcorr},
    { "dft", _wrap_dft},
    { "dft_real", _wrap_dft_real},
    { "idft", _wrap_idft},
    { "idft_real", _wrap_idft_real},
    { "fir_lowpass", _wrap_fir_lowpass},
    { "fir_highpass", _wrap_fir_highpass},
    { "fir_bandpass", _wrap_fir_bandpass},
    { "fir_bandstop", _wrap_fir_bandstop},
    { "samplerate_converter_filter_order", _wrap_samplerate_converter_filter_order},
    { "samplerate_converter_sidelobe_attenuation", _wrap_samplerate_converter_sidelobe_attenuation},
    { "samplerate_converter_transition_width", _wrap_samplerate_converter_transition_width},
    { "samplerate_converter_window_param", _wrap_samplerate_converter_window_param},
    { "resampler", _wrap_resampler},
    { "audio_fft_forward", _wrap_audio_fft_forward},
    { "audio_fft_inverse", _wrap_audio_fft_inverse},
    { "audio_convolve", _wrap_audio_convolve},
    { "WhiteNoise", _wrap_WhiteNoise},
    { "Pink", _wrap_Pink},
    { "GaussianWhiteNoise", _wrap_GaussianWhiteNoise},
    { "GaussRand", _wrap_GaussRand},
    { "PinkNoiseGenerator", _wrap_PinkNoiseGenerator},
    { "BrownNoiseGenerator", _wrap_BrownNoiseGenerator},
    { "freq_to_midi", _wrap_freq_to_midi},
    { "midi_to_freq", _wrap_midi_to_freq},
    { "cv_to_freq", _wrap_cv_to_freq},
    { "semitone", _wrap_semitone},
    { "octave", _wrap_octave},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_gslice,
&_wrap_class_slice,
&_wrap_class_float_complex,
&_wrap_class_double_complex,
&_wrap_class_float_valarray,
&_wrap_class_float_numeric_limits,
&_wrap_class_double_numeric_limits,
&_wrap_class_int_numeric_limits,
&_wrap_class_uint_numeric_limits,
&_wrap_class_short_numeric_limits,
&_wrap_class_ushort_numeric_limits,
&_wrap_class_long_numeric_limits,
&_wrap_class_ulong_numeric_limits,
&_wrap_class_llong_numeric_limits,
&_wrap_class_ullong_numeric_limits,
&_wrap_class_audio_format,
&_wrap_class_audio_format_and_length,
&_wrap_class_fraction,
&_wrap_class_vectorf32,
&_wrap_class_vectorf64,
&_wrap_class_vectori8,
&_wrap_class_vectorui8,
&_wrap_class_vectori16,
&_wrap_class_vectorui16,
&_wrap_class_vectori32,
&_wrap_class_vectorui32,
&_wrap_class_vectori64,
&_wrap_class_vectorui64,
&_wrap_class_cvector32,
&_wrap_class_cvector64,
&_wrap_class_complex32,
&_wrap_class_complex64,
&_wrap_class_float_wavreader,
&_wrap_class_float_wavwriter,
&_wrap_class_float_mp3_reader,
&_wrap_class_float_flac_reader,
&_wrap_class_Biquad,
&_wrap_class_biquadparams,
&_wrap_class_notch_filter,
&_wrap_class_lowpass_filter,
&_wrap_class_highpass_filter,
&_wrap_class_bandpass_filter,
&_wrap_class_peak_filter,
&_wrap_class_lowshelf_filter,
&_wrap_class_highshelf_filter,
&_wrap_class_bessel_filter,
&_wrap_class_bessel_lowpass_filter,
&_wrap_class_bessel_highpass_filter,
&_wrap_class_bessel_bandpass_filter,
&_wrap_class_bessel_bandstop_filter,
&_wrap_class_butterworth_filter,
&_wrap_class_butterworth_lowpass_filter,
&_wrap_class_butterworth_highpass_filter,
&_wrap_class_butterworth_bandpass_filter,
&_wrap_class_butterworth_bandstop_filter,
&_wrap_class_chevyshev1_filter,
&_wrap_class_chevyshev1_lowpass_filter,
&_wrap_class_chevyshev1_highpass_filter,
&_wrap_class_chevyshev1_bandpass_filter,
&_wrap_class_chevyshev1_bandptop_filter,
&_wrap_class_chevyshev2_filter,
&_wrap_class_chevyshev2_lowpass_filter,
&_wrap_class_chevyshev2_highpass_filter,
&_wrap_class_chevyshev2_bandpass_filter,
&_wrap_class_chevyshev2_bandstop_filter,
&_wrap_class_biquad_params,
&_wrap_class_biquad_filter,
&_wrap_class_zpk,
&_wrap_class_biquad_params_vector,
&_wrap_class_convolve_filter,
&_wrap_class_complex_convolve_filter,
&_wrap_class_dft_plan,
&_wrap_class_dft_plan_real,
&_wrap_class_dct_plan,
&_wrap_class_DCTPlan,
&_wrap_class_DFTPlan,
&_wrap_class_DFTRealPlan,
&_wrap_class_fir_filter,
&_wrap_class_fir_bandpass_filter,
&_wrap_class_fir_lowpass_filter,
&_wrap_class_fir_highpass_filter,
&_wrap_class_fir_bandstop_filter,
&_wrap_class_samplerate_converter,
&_wrap_class_PinkNoise,
&_wrap_class_PinkingFilter,
&_wrap_class_BrowningFilter,
&_wrap_class_FilterBase,
&_wrap_class_Biquad6DB,
&_wrap_class_Biquad12DB,
&_wrap_class_BiquadCascade,
&_wrap_class_RbjFilter,
&_wrap_class_ZolzerBiquad,
&_wrap_class_BesselFilter,
&_wrap_class_ButterworthFilter,
&_wrap_class_Chebyshev1Filter,
&_wrap_class_Chebyshev2Filter,
&_wrap_class_FilterCoefficients,
&_wrap_class_BiquadSection,
&_wrap_class_BiquadTransposedTypeII,
&_wrap_class_BiquadFilterBase,
&_wrap_class_BiquadLowpassFilter,
&_wrap_class_BiquadAllpassFilter,
&_wrap_class_BiquadHighpassFilter,
&_wrap_class_BiquadBandpassFilter,
&_wrap_class_BiquadNotchFilter,
&_wrap_class_BiquadPeakFilter,
&_wrap_class_BiquadLowshelfFilter,
&_wrap_class_BiquadHighshelfFilter,
&_wrap_class_BesselLowPassFilter,
&_wrap_class_BesselHighPassFilter,
&_wrap_class_BesselBandPassFilter,
&_wrap_class_BesselBandStopFilter,
&_wrap_class_ButterworthLowPassFilter,
&_wrap_class_ButterworthHighPassFilter,
&_wrap_class_ButterworthBandPassFilter,
&_wrap_class_ButterworthBandStopFilter,
&_wrap_class_ChebyshevILowPassFilter,
&_wrap_class_ChebyshevIHighPassFilter,
&_wrap_class_ChebyshevIBandPassFilter,
&_wrap_class_ChebyshevIBandStopFilter,
&_wrap_class_ChebyshevIILowPassFilter,
&_wrap_class_ChebyshevIIHighPassFilter,
&_wrap_class_ChebyshevIIBandPassFilter,
&_wrap_class_ChebyshevIIBandStopFilter,
&_wrap_class_SampleVector,
&_wrap_class_ComplexVector,
&_wrap_class_ConvolutionFilter,
&_wrap_class_StereoConvolutionFilter,
&_wrap_class_CombFilter,
&_wrap_class_FirCombFilter,
&_wrap_class_IirCombFilter,
&_wrap_class_MultitapCombFilter,
&_wrap_class_MultitapFirCombFilter,
&_wrap_class_MultitapIirCombFilter,
&_wrap_class_DelayLine,
&_wrap_class_MultitapDelayLine,
&_wrap_class_FirFilter,
&_wrap_class_FirLowpassFilter,
&_wrap_class_FirHighpassFilter,
&_wrap_class_FirBandpassFilter,
&_wrap_class_FirBandstopFilter,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "kfr2d",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_kfr__audio_format_and_lengthTo_p_kfr__audio_format(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((kfr::audio_format *)  ((kfr::audio_format_and_length *) x));
}
static void *_p_KfrDSP1__Biquad12DBTo_p_KfrDSP1__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((KfrDSP1::FilterBase *)  ((KfrDSP1::Biquad12DB *) x));
}
static void *_p_KfrDSP1__RbjFilterTo_p_KfrDSP1__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((KfrDSP1::FilterBase *)  ((KfrDSP1::RbjFilter *) x));
}
static void *_p_KfrDSP1__Biquad6DBTo_p_KfrDSP1__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((KfrDSP1::FilterBase *)  ((KfrDSP1::Biquad6DB *) x));
}
static void *_p_KfrDSP1__BiquadCascadeTo_p_KfrDSP1__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((KfrDSP1::FilterBase *)  ((KfrDSP1::BiquadCascade *) x));
}
static void *_p_KfrDSP1__ZolzerBiquadTo_p_KfrDSP1__FilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((KfrDSP1::FilterBase *)  ((KfrDSP1::ZolzerBiquad *) x));
}
static void *_p_Filters__ButterworthHighPassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::ButterworthHighPassFilter *) x));
}
static void *_p_Filters__ButterworthLowPassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::ButterworthLowPassFilter *) x));
}
static void *_p_Filters__BesselBandPassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::BesselBandPassFilter *) x));
}
static void *_p_Filters__BesselHighPassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::BesselHighPassFilter *) x));
}
static void *_p_Filters__BesselLowPassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::BesselLowPassFilter *) x));
}
static void *_p_Filters__BiquadPeakFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::BiquadPeakFilter *) x));
}
static void *_p_Filters__BiquadBandpassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::BiquadBandpassFilter *) x));
}
static void *_p_Filters__BiquadHighpassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::BiquadHighpassFilter *) x));
}
static void *_p_Filters__BiquadAllpassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::BiquadAllpassFilter *) x));
}
static void *_p_Filters__BiquadLowpassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::BiquadLowpassFilter *) x));
}
static void *_p_Filters__ButterworthBandPassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::ButterworthBandPassFilter *) x));
}
static void *_p_Filters__ChebyshevILowPassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::ChebyshevILowPassFilter *) x));
}
static void *_p_Filters__ChebyshevIHighPassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::ChebyshevIHighPassFilter *) x));
}
static void *_p_Filters__ChebyshevIBandPassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::ChebyshevIBandPassFilter *) x));
}
static void *_p_Filters__ChebyshevIILowPassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::ChebyshevIILowPassFilter *) x));
}
static void *_p_Filters__ChebyshevIIHighPassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::ChebyshevIIHighPassFilter *) x));
}
static void *_p_Filters__ChebyshevIIBandPassFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::ChebyshevIIBandPassFilter *) x));
}
static void *_p_Filters__BesselBandStopFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::BesselBandStopFilter *) x));
}
static void *_p_Filters__BiquadHighshelfFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::BiquadHighshelfFilter *) x));
}
static void *_p_Filters__BiquadLowshelfFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::BiquadLowshelfFilter *) x));
}
static void *_p_Filters__BiquadNotchFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::BiquadNotchFilter *) x));
}
static void *_p_Filters__ButterworthBandStopFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::ButterworthBandStopFilter *) x));
}
static void *_p_Filters__ChebyshevIBandStopFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::ChebyshevIBandStopFilter *) x));
}
static void *_p_Filters__ChebyshevIIBandStopFilterTo_p_Filters__BiquadFilterBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Filters::BiquadFilterBase *)  ((Filters::ChebyshevIIBandStopFilter *) x));
}
static swig_type_info _swigt__p_DSP__BandPassFilterT_SampleType_t = {"_p_DSP__BandPassFilterT_SampleType_t", "DSP::BandPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_bandpass_filter, 0};
static swig_type_info _swigt__p_DSP__BesselBandPassFilterT_SampleType_t = {"_p_DSP__BesselBandPassFilterT_SampleType_t", "DSP::BesselBandPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_bessel_bandpass_filter, 0};
static swig_type_info _swigt__p_DSP__BesselBandStopFilterT_SampleType_t = {"_p_DSP__BesselBandStopFilterT_SampleType_t", "DSP::BesselBandStopFilter< SampleType > *", 0, 0, (void*)&_wrap_class_bessel_bandstop_filter, 0};
static swig_type_info _swigt__p_DSP__BesselFilterT_SampleType_t = {"_p_DSP__BesselFilterT_SampleType_t", "DSP::BesselFilter< SampleType > *", 0, 0, (void*)&_wrap_class_bessel_filter, 0};
static swig_type_info _swigt__p_DSP__BesselHighPassFilterT_SampleType_t = {"_p_DSP__BesselHighPassFilterT_SampleType_t", "DSP::BesselHighPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_bessel_highpass_filter, 0};
static swig_type_info _swigt__p_DSP__BesselLowPassFilterT_SampleType_t = {"_p_DSP__BesselLowPassFilterT_SampleType_t", "DSP::BesselLowPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_bessel_lowpass_filter, 0};
static swig_type_info _swigt__p_DSP__BiQuadParamsT_SampleType_t = {"_p_DSP__BiQuadParamsT_SampleType_t", "DSP::BiQuadParams< SampleType > *", 0, 0, (void*)&_wrap_class_biquadparams, 0};
static swig_type_info _swigt__p_DSP__BiquadT_SampleType_t = {"_p_DSP__BiquadT_SampleType_t", "DSP::Biquad< SampleType > *", 0, 0, (void*)&_wrap_class_Biquad, 0};
static swig_type_info _swigt__p_DSP__ButterworthBandPassFilterT_SampleType_t = {"_p_DSP__ButterworthBandPassFilterT_SampleType_t", "DSP::ButterworthBandPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_butterworth_bandpass_filter, 0};
static swig_type_info _swigt__p_DSP__ButterworthBandStopFilterT_SampleType_t = {"_p_DSP__ButterworthBandStopFilterT_SampleType_t", "DSP::ButterworthBandStopFilter< SampleType > *", 0, 0, (void*)&_wrap_class_butterworth_bandstop_filter, 0};
static swig_type_info _swigt__p_DSP__ButterworthFilterT_SampleType_t = {"_p_DSP__ButterworthFilterT_SampleType_t", "DSP::ButterworthFilter< SampleType > *", 0, 0, (void*)&_wrap_class_butterworth_filter, 0};
static swig_type_info _swigt__p_DSP__ButterworthHighPassFilterT_SampleType_t = {"_p_DSP__ButterworthHighPassFilterT_SampleType_t", "DSP::ButterworthHighPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_butterworth_highpass_filter, 0};
static swig_type_info _swigt__p_DSP__ButterworthLowPassFilterT_SampleType_t = {"_p_DSP__ButterworthLowPassFilterT_SampleType_t", "DSP::ButterworthLowPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_butterworth_lowpass_filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1BandPassFilterT_SampleType_t = {"_p_DSP__Chebyshev1BandPassFilterT_SampleType_t", "DSP::Chebyshev1BandPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_chevyshev1_bandpass_filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1BandStopFilterT_SampleType_t = {"_p_DSP__Chebyshev1BandStopFilterT_SampleType_t", "DSP::Chebyshev1BandStopFilter< SampleType > *", 0, 0, (void*)&_wrap_class_chevyshev1_bandptop_filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1FilterT_SampleType_t = {"_p_DSP__Chebyshev1FilterT_SampleType_t", "DSP::Chebyshev1Filter< SampleType > *", 0, 0, (void*)&_wrap_class_chevyshev1_filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1HighPassFilterT_SampleType_t = {"_p_DSP__Chebyshev1HighPassFilterT_SampleType_t", "DSP::Chebyshev1HighPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_chevyshev1_highpass_filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev1LowPassFilterT_SampleType_t = {"_p_DSP__Chebyshev1LowPassFilterT_SampleType_t", "DSP::Chebyshev1LowPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_chevyshev1_lowpass_filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2BandPassFilterT_SampleType_t = {"_p_DSP__Chebyshev2BandPassFilterT_SampleType_t", "DSP::Chebyshev2BandPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_chevyshev2_bandpass_filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2BandStopFilterT_SampleType_t = {"_p_DSP__Chebyshev2BandStopFilterT_SampleType_t", "DSP::Chebyshev2BandStopFilter< SampleType > *", 0, 0, (void*)&_wrap_class_chevyshev2_bandstop_filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2FilterT_SampleType_t = {"_p_DSP__Chebyshev2FilterT_SampleType_t", "DSP::Chebyshev2Filter< SampleType > *", 0, 0, (void*)&_wrap_class_chevyshev2_filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2HighPassFilterT_SampleType_t = {"_p_DSP__Chebyshev2HighPassFilterT_SampleType_t", "DSP::Chebyshev2HighPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_chevyshev2_highpass_filter, 0};
static swig_type_info _swigt__p_DSP__Chebyshev2LowPassFilterT_SampleType_t = {"_p_DSP__Chebyshev2LowPassFilterT_SampleType_t", "DSP::Chebyshev2LowPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_chevyshev2_lowpass_filter, 0};
static swig_type_info _swigt__p_DSP__DCTPlanT_SampleType_t = {"_p_DSP__DCTPlanT_SampleType_t", "DSP::DCTPlan< SampleType > *", 0, 0, (void*)&_wrap_class_DCTPlan, 0};
static swig_type_info _swigt__p_DSP__DFTPlanT_SampleType_t = {"_p_DSP__DFTPlanT_SampleType_t", "DSP::DFTPlan< SampleType > *", 0, 0, (void*)&_wrap_class_DFTPlan, 0};
static swig_type_info _swigt__p_DSP__DFTRealPlanT_SampleType_t = {"_p_DSP__DFTRealPlanT_SampleType_t", "DSP::DFTRealPlan< SampleType > *", 0, 0, (void*)&_wrap_class_DFTRealPlan, 0};
static swig_type_info _swigt__p_DSP__FIRBandpassFilterT_SampleType_t = {"_p_DSP__FIRBandpassFilterT_SampleType_t", "DSP::FIRBandpassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_fir_bandpass_filter, 0};
static swig_type_info _swigt__p_DSP__FIRBandstopFilterT_SampleType_t = {"_p_DSP__FIRBandstopFilterT_SampleType_t", "DSP::FIRBandstopFilter< SampleType > *", 0, 0, (void*)&_wrap_class_fir_bandstop_filter, 0};
static swig_type_info _swigt__p_DSP__FIRFilterT_SampleType_t = {"_p_DSP__FIRFilterT_SampleType_t", "DSP::FIRFilter< SampleType > *", 0, 0, (void*)&_wrap_class_fir_filter, 0};
static swig_type_info _swigt__p_DSP__FIRHighpassFilterT_SampleType_t = {"_p_DSP__FIRHighpassFilterT_SampleType_t", "DSP::FIRHighpassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_fir_highpass_filter, 0};
static swig_type_info _swigt__p_DSP__FIRLowpassFilterT_SampleType_t = {"_p_DSP__FIRLowpassFilterT_SampleType_t", "DSP::FIRLowpassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_fir_lowpass_filter, 0};
static swig_type_info _swigt__p_DSP__FlacReaderT_SampleType_t = {"_p_DSP__FlacReaderT_SampleType_t", "DSP::FlacReader< SampleType > *", 0, 0, (void*)&_wrap_class_float_flac_reader, 0};
static swig_type_info _swigt__p_DSP__HighPassFilterT_SampleType_t = {"_p_DSP__HighPassFilterT_SampleType_t", "DSP::HighPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_highpass_filter, 0};
static swig_type_info _swigt__p_DSP__HighShelfFilterT_SampleType_t = {"_p_DSP__HighShelfFilterT_SampleType_t", "DSP::HighShelfFilter< SampleType > *", 0, 0, (void*)&_wrap_class_highshelf_filter, 0};
static swig_type_info _swigt__p_DSP__LowPassFilterT_SampleType_t = {"_p_DSP__LowPassFilterT_SampleType_t", "DSP::LowPassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_lowpass_filter, 0};
static swig_type_info _swigt__p_DSP__LowShelfFilterT_SampleType_t = {"_p_DSP__LowShelfFilterT_SampleType_t", "DSP::LowShelfFilter< SampleType > *", 0, 0, (void*)&_wrap_class_lowshelf_filter, 0};
static swig_type_info _swigt__p_DSP__MP3ReaderT_SampleType_t = {"_p_DSP__MP3ReaderT_SampleType_t", "DSP::MP3Reader< SampleType > *", 0, 0, (void*)&_wrap_class_float_mp3_reader, 0};
static swig_type_info _swigt__p_DSP__NotchFilterT_SampleType_t = {"_p_DSP__NotchFilterT_SampleType_t", "DSP::NotchFilter< SampleType > *", 0, 0, (void*)&_wrap_class_notch_filter, 0};
static swig_type_info _swigt__p_DSP__PeakFilterT_SampleType_t = {"_p_DSP__PeakFilterT_SampleType_t", "DSP::PeakFilter< SampleType > *", 0, 0, (void*)&_wrap_class_peak_filter, 0};
static swig_type_info _swigt__p_DSP__WavReaderT_SampleType_t = {"_p_DSP__WavReaderT_SampleType_t", "DSP::WavReader< SampleType > *", 0, 0, (void*)&_wrap_class_float_wavreader, 0};
static swig_type_info _swigt__p_DSP__WavWriterT_SampleType_t = {"_p_DSP__WavWriterT_SampleType_t", "DSP::WavWriter< SampleType > *", 0, 0, (void*)&_wrap_class_float_wavwriter, 0};
static swig_type_info _swigt__p_Filters__BesselBandPassFilter = {"_p_Filters__BesselBandPassFilter", "Filters::BesselBandPassFilter *", 0, 0, (void*)&_wrap_class_BesselBandPassFilter, 0};
static swig_type_info _swigt__p_Filters__BesselBandStopFilter = {"_p_Filters__BesselBandStopFilter", "Filters::BesselBandStopFilter *", 0, 0, (void*)&_wrap_class_BesselBandStopFilter, 0};
static swig_type_info _swigt__p_Filters__BesselHighPassFilter = {"_p_Filters__BesselHighPassFilter", "Filters::BesselHighPassFilter *", 0, 0, (void*)&_wrap_class_BesselHighPassFilter, 0};
static swig_type_info _swigt__p_Filters__BesselLowPassFilter = {"_p_Filters__BesselLowPassFilter", "Filters::BesselLowPassFilter *", 0, 0, (void*)&_wrap_class_BesselLowPassFilter, 0};
static swig_type_info _swigt__p_Filters__BiquadAllpassFilter = {"_p_Filters__BiquadAllpassFilter", "Filters::BiquadAllpassFilter *", 0, 0, (void*)&_wrap_class_BiquadAllpassFilter, 0};
static swig_type_info _swigt__p_Filters__BiquadBandpassFilter = {"_p_Filters__BiquadBandpassFilter", "Filters::BiquadBandpassFilter *", 0, 0, (void*)&_wrap_class_BiquadBandpassFilter, 0};
static swig_type_info _swigt__p_Filters__BiquadFilterBase = {"_p_Filters__BiquadFilterBase", "Filters::BiquadFilterBase *", 0, 0, (void*)&_wrap_class_BiquadFilterBase, 0};
static swig_type_info _swigt__p_Filters__BiquadHighpassFilter = {"_p_Filters__BiquadHighpassFilter", "Filters::BiquadHighpassFilter *", 0, 0, (void*)&_wrap_class_BiquadHighpassFilter, 0};
static swig_type_info _swigt__p_Filters__BiquadHighshelfFilter = {"_p_Filters__BiquadHighshelfFilter", "Filters::BiquadHighshelfFilter *", 0, 0, (void*)&_wrap_class_BiquadHighshelfFilter, 0};
static swig_type_info _swigt__p_Filters__BiquadLowpassFilter = {"_p_Filters__BiquadLowpassFilter", "Filters::BiquadLowpassFilter *", 0, 0, (void*)&_wrap_class_BiquadLowpassFilter, 0};
static swig_type_info _swigt__p_Filters__BiquadLowshelfFilter = {"_p_Filters__BiquadLowshelfFilter", "Filters::BiquadLowshelfFilter *", 0, 0, (void*)&_wrap_class_BiquadLowshelfFilter, 0};
static swig_type_info _swigt__p_Filters__BiquadNotchFilter = {"_p_Filters__BiquadNotchFilter", "Filters::BiquadNotchFilter *", 0, 0, (void*)&_wrap_class_BiquadNotchFilter, 0};
static swig_type_info _swigt__p_Filters__BiquadPeakFilter = {"_p_Filters__BiquadPeakFilter", "Filters::BiquadPeakFilter *", 0, 0, (void*)&_wrap_class_BiquadPeakFilter, 0};
static swig_type_info _swigt__p_Filters__BiquadSection = {"_p_Filters__BiquadSection", "Filters::BiquadSection *", 0, 0, (void*)&_wrap_class_BiquadSection, 0};
static swig_type_info _swigt__p_Filters__BiquadTransposedTypeII = {"_p_Filters__BiquadTransposedTypeII", "Filters::BiquadTransposedTypeII *", 0, 0, (void*)&_wrap_class_BiquadTransposedTypeII, 0};
static swig_type_info _swigt__p_Filters__ButterworthBandPassFilter = {"_p_Filters__ButterworthBandPassFilter", "Filters::ButterworthBandPassFilter *", 0, 0, (void*)&_wrap_class_ButterworthBandPassFilter, 0};
static swig_type_info _swigt__p_Filters__ButterworthBandStopFilter = {"_p_Filters__ButterworthBandStopFilter", "Filters::ButterworthBandStopFilter *", 0, 0, (void*)&_wrap_class_ButterworthBandStopFilter, 0};
static swig_type_info _swigt__p_Filters__ButterworthHighPassFilter = {"_p_Filters__ButterworthHighPassFilter", "Filters::ButterworthHighPassFilter *", 0, 0, (void*)&_wrap_class_ButterworthHighPassFilter, 0};
static swig_type_info _swigt__p_Filters__ButterworthLowPassFilter = {"_p_Filters__ButterworthLowPassFilter", "Filters::ButterworthLowPassFilter *", 0, 0, (void*)&_wrap_class_ButterworthLowPassFilter, 0};
static swig_type_info _swigt__p_Filters__ChebyshevIBandPassFilter = {"_p_Filters__ChebyshevIBandPassFilter", "Filters::ChebyshevIBandPassFilter *", 0, 0, (void*)&_wrap_class_ChebyshevIBandPassFilter, 0};
static swig_type_info _swigt__p_Filters__ChebyshevIBandStopFilter = {"_p_Filters__ChebyshevIBandStopFilter", "Filters::ChebyshevIBandStopFilter *", 0, 0, (void*)&_wrap_class_ChebyshevIBandStopFilter, 0};
static swig_type_info _swigt__p_Filters__ChebyshevIHighPassFilter = {"_p_Filters__ChebyshevIHighPassFilter", "Filters::ChebyshevIHighPassFilter *", 0, 0, (void*)&_wrap_class_ChebyshevIHighPassFilter, 0};
static swig_type_info _swigt__p_Filters__ChebyshevIIBandPassFilter = {"_p_Filters__ChebyshevIIBandPassFilter", "Filters::ChebyshevIIBandPassFilter *", 0, 0, (void*)&_wrap_class_ChebyshevIIBandPassFilter, 0};
static swig_type_info _swigt__p_Filters__ChebyshevIIBandStopFilter = {"_p_Filters__ChebyshevIIBandStopFilter", "Filters::ChebyshevIIBandStopFilter *", 0, 0, (void*)&_wrap_class_ChebyshevIIBandStopFilter, 0};
static swig_type_info _swigt__p_Filters__ChebyshevIIHighPassFilter = {"_p_Filters__ChebyshevIIHighPassFilter", "Filters::ChebyshevIIHighPassFilter *", 0, 0, (void*)&_wrap_class_ChebyshevIIHighPassFilter, 0};
static swig_type_info _swigt__p_Filters__ChebyshevIILowPassFilter = {"_p_Filters__ChebyshevIILowPassFilter", "Filters::ChebyshevIILowPassFilter *", 0, 0, (void*)&_wrap_class_ChebyshevIILowPassFilter, 0};
static swig_type_info _swigt__p_Filters__ChebyshevILowPassFilter = {"_p_Filters__ChebyshevILowPassFilter", "Filters::ChebyshevILowPassFilter *", 0, 0, (void*)&_wrap_class_ChebyshevILowPassFilter, 0};
static swig_type_info _swigt__p_Filters__FilterCoefficients = {"_p_Filters__FilterCoefficients", "Filters::FilterCoefficients *", 0, 0, (void*)&_wrap_class_FilterCoefficients, 0};
static swig_type_info _swigt__p_KfrDSP1__BesselFilter = {"_p_KfrDSP1__BesselFilter", "KfrDSP1::BesselFilter *", 0, 0, (void*)&_wrap_class_BesselFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__Biquad12DB = {"_p_KfrDSP1__Biquad12DB", "KfrDSP1::Biquad12DB *", 0, 0, (void*)&_wrap_class_Biquad12DB, 0};
static swig_type_info _swigt__p_KfrDSP1__Biquad6DB = {"_p_KfrDSP1__Biquad6DB", "KfrDSP1::Biquad6DB *", 0, 0, (void*)&_wrap_class_Biquad6DB, 0};
static swig_type_info _swigt__p_KfrDSP1__BiquadCascade = {"_p_KfrDSP1__BiquadCascade", "KfrDSP1::BiquadCascade *", 0, 0, (void*)&_wrap_class_BiquadCascade, 0};
static swig_type_info _swigt__p_KfrDSP1__BrowningFilter = {"_p_KfrDSP1__BrowningFilter", "KfrDSP1::BrowningFilter *", 0, 0, (void*)&_wrap_class_BrowningFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__ButterworthFilter = {"_p_KfrDSP1__ButterworthFilter", "KfrDSP1::ButterworthFilter *", 0, 0, (void*)&_wrap_class_ButterworthFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__Chebyshev1Filter = {"_p_KfrDSP1__Chebyshev1Filter", "KfrDSP1::Chebyshev1Filter *", 0, 0, (void*)&_wrap_class_Chebyshev1Filter, 0};
static swig_type_info _swigt__p_KfrDSP1__Chebyshev2Filter = {"_p_KfrDSP1__Chebyshev2Filter", "KfrDSP1::Chebyshev2Filter *", 0, 0, (void*)&_wrap_class_Chebyshev2Filter, 0};
static swig_type_info _swigt__p_KfrDSP1__CombFilterT_SampleType_t = {"_p_KfrDSP1__CombFilterT_SampleType_t", "KfrDSP1::CombFilter< SampleType > *", 0, 0, (void*)&_wrap_class_CombFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__ConvolutionFilterT_SampleType_t = {"_p_KfrDSP1__ConvolutionFilterT_SampleType_t", "KfrDSP1::ConvolutionFilter< SampleType > *", 0, 0, (void*)&_wrap_class_ConvolutionFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__DelayLineT_SampleType_t = {"_p_KfrDSP1__DelayLineT_SampleType_t", "KfrDSP1::DelayLine< SampleType > *", 0, 0, (void*)&_wrap_class_DelayLine, 0};
static swig_type_info _swigt__p_KfrDSP1__FIRBandpassFilterT_SampleType_t = {"_p_KfrDSP1__FIRBandpassFilterT_SampleType_t", "KfrDSP1::FIRBandpassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_FirBandpassFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__FIRBandstopFilterT_SampleType_t = {"_p_KfrDSP1__FIRBandstopFilterT_SampleType_t", "KfrDSP1::FIRBandstopFilter< SampleType > *", 0, 0, (void*)&_wrap_class_FirBandstopFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__FIRCombFilterT_SampleType_t = {"_p_KfrDSP1__FIRCombFilterT_SampleType_t", "KfrDSP1::FIRCombFilter< SampleType > *", 0, 0, (void*)&_wrap_class_FirCombFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__FIRFilterT_SampleType_t = {"_p_KfrDSP1__FIRFilterT_SampleType_t", "KfrDSP1::FIRFilter< SampleType > *", 0, 0, (void*)&_wrap_class_FirFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__FIRHighpassFilterT_SampleType_t = {"_p_KfrDSP1__FIRHighpassFilterT_SampleType_t", "KfrDSP1::FIRHighpassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_FirHighpassFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__FIRLowpassFilterT_SampleType_t = {"_p_KfrDSP1__FIRLowpassFilterT_SampleType_t", "KfrDSP1::FIRLowpassFilter< SampleType > *", 0, 0, (void*)&_wrap_class_FirLowpassFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__FilterBase = {"_p_KfrDSP1__FilterBase", "KfrDSP1::FilterBase *", 0, 0, (void*)&_wrap_class_FilterBase, 0};
static swig_type_info _swigt__p_KfrDSP1__IIRCombFilterT_SampleType_t = {"_p_KfrDSP1__IIRCombFilterT_SampleType_t", "KfrDSP1::IIRCombFilter< SampleType > *", 0, 0, (void*)&_wrap_class_IirCombFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__MultiTapCombFilterT_SampleType_t = {"_p_KfrDSP1__MultiTapCombFilterT_SampleType_t", "KfrDSP1::MultiTapCombFilter< SampleType > *", 0, 0, (void*)&_wrap_class_MultitapCombFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__MultiTapDelayLineT_SampleType_t = {"_p_KfrDSP1__MultiTapDelayLineT_SampleType_t", "KfrDSP1::MultiTapDelayLine< SampleType > *", 0, 0, (void*)&_wrap_class_MultitapDelayLine, 0};
static swig_type_info _swigt__p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t = {"_p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t", "KfrDSP1::MultiTapFIRCombFilter< SampleType > *", 0, 0, (void*)&_wrap_class_MultitapFirCombFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t = {"_p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t", "KfrDSP1::MultiTapIIRCombFilter< SampleType > *", 0, 0, (void*)&_wrap_class_MultitapIirCombFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__PinkNoise = {"_p_KfrDSP1__PinkNoise", "KfrDSP1::PinkNoise *", 0, 0, (void*)&_wrap_class_PinkNoise, 0};
static swig_type_info _swigt__p_KfrDSP1__PinkingFilter = {"_p_KfrDSP1__PinkingFilter", "KfrDSP1::PinkingFilter *", 0, 0, (void*)&_wrap_class_PinkingFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__RbjFilter = {"_p_KfrDSP1__RbjFilter", "KfrDSP1::RbjFilter *", 0, 0, (void*)&_wrap_class_RbjFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__StereoConvolutionFilterT_SampleType_t = {"_p_KfrDSP1__StereoConvolutionFilterT_SampleType_t", "KfrDSP1::StereoConvolutionFilter< SampleType > *", 0, 0, (void*)&_wrap_class_StereoConvolutionFilter, 0};
static swig_type_info _swigt__p_KfrDSP1__ZolzerBiquad = {"_p_KfrDSP1__ZolzerBiquad", "KfrDSP1::ZolzerBiquad *", 0, 0, (void*)&_wrap_class_ZolzerBiquad, 0};
static swig_type_info _swigt__p_SampleType = {"_p_SampleType", "SampleType *|kfr::fbase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Std__RandomMersenne = {"_p_Std__RandomMersenne", "Std::RandomMersenne *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "kfr::b8 *|bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "f64 *|double *|kfr::fmax *|kfr::f64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_float__float = {"_p_f_float__float", "float (*)(float)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_r_q_const__float__float = {"_p_f_r_q_const__float__float", "float (*)(float const &)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fenv_t = {"_p_fenv_t", "fenv_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fexcept_t = {"_p_fexcept_t", "fexcept_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "Filters::DspFloatType *|f32 *|float *|kfr::f32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ftype = {"_p_ftype", "ftype *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|kfr::i32 *|int_fast16_t *|i32 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_itype = {"_p_itype", "itype *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t = {"_p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t", "kfr::CMT_ARCH_NAME::biquad_filter< SampleType,64 > *|kfr::CMT_ARCH_NAME::biquad_filter< SampleType > *", 0, 0, (void*)&_wrap_class_biquad_filter, 0};
static swig_type_info _swigt__p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t = {"_p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t", "kfr::CMT_ARCH_NAME::samplerate_converter< SampleType > *", 0, 0, (void*)&_wrap_class_samplerate_converter, 0};
static swig_type_info _swigt__p_kfr__audio_format = {"_p_kfr__audio_format", "kfr::audio_format *", 0, 0, (void*)&_wrap_class_audio_format, 0};
static swig_type_info _swigt__p_kfr__audio_format_and_length = {"_p_kfr__audio_format_and_length", "kfr::audio_format_and_length *|DSP::audio_format *", 0, 0, (void*)&_wrap_class_audio_format_and_length, 0};
static swig_type_info _swigt__p_kfr__audio_reader_flacT_SampleType_t = {"_p_kfr__audio_reader_flacT_SampleType_t", "kfr::audio_reader_flac< SampleType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_reader_mp3T_SampleType_t = {"_p_kfr__audio_reader_mp3T_SampleType_t", "kfr::audio_reader_mp3< SampleType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__audio_writer_wavT_SampleType_t = {"_p_kfr__audio_writer_wavT_SampleType_t", "kfr::audio_writer_wav< SampleType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__biquad_filterT_SampleType_t = {"_p_kfr__biquad_filterT_SampleType_t", "kfr::biquad_filter< SampleType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__biquad_paramsT_SampleType_t = {"_p_kfr__biquad_paramsT_SampleType_t", "kfr::biquad_params< SampleType > *", 0, 0, (void*)&_wrap_class_biquad_params, 0};
static swig_type_info _swigt__p_kfr__biquad_paramsT_double_t = {"_p_kfr__biquad_paramsT_double_t", "kfr::biquad_params< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__complexT_SampleType_t = {"_p_kfr__complexT_SampleType_t", "kfr::complex< SampleType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__complexT_double_t = {"_p_kfr__complexT_double_t", "kfr::complex< double > *", 0, 0, (void*)&_wrap_class_complex64, 0};
static swig_type_info _swigt__p_kfr__complexT_float_t = {"_p_kfr__complexT_float_t", "kfr::complex< float > *", 0, 0, (void*)&_wrap_class_complex32, 0};
static swig_type_info _swigt__p_kfr__convolve_filterT_SampleType_t = {"_p_kfr__convolve_filterT_SampleType_t", "kfr::convolve_filter< SampleType > *", 0, 0, (void*)&_wrap_class_convolve_filter, 0};
static swig_type_info _swigt__p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t = {"_p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t", "kfr::convolve_filter< kfr::complex< SampleType > > *", 0, 0, (void*)&_wrap_class_complex_convolve_filter, 0};
static swig_type_info _swigt__p_kfr__dct_planT_SampleType_t = {"_p_kfr__dct_planT_SampleType_t", "kfr::dct_plan< SampleType > *", 0, 0, (void*)&_wrap_class_dct_plan, 0};
static swig_type_info _swigt__p_kfr__dft_order = {"_p_kfr__dft_order", "enum kfr::dft_order *|DSP::dft_order *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__dft_planT_SampleType_t = {"_p_kfr__dft_planT_SampleType_t", "kfr::dft_plan< SampleType > *", 0, 0, (void*)&_wrap_class_dft_plan, 0};
static swig_type_info _swigt__p_kfr__dft_plan_realT_SampleType_t = {"_p_kfr__dft_plan_realT_SampleType_t", "kfr::dft_plan_real< SampleType > *", 0, 0, (void*)&_wrap_class_dft_plan_real, 0};
static swig_type_info _swigt__p_kfr__expression_pointerT_SampleType_t = {"_p_kfr__expression_pointerT_SampleType_t", "kfr::expression_pointer< SampleType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__filterT_SampleType_t = {"_p_kfr__filterT_SampleType_t", "kfr::filter< SampleType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__fraction = {"_p_kfr__fraction", "kfr::fraction *", 0, 0, (void*)&_wrap_class_fraction, 0};
static swig_type_info _swigt__p_kfr__sample_rate_conversion_quality = {"_p_kfr__sample_rate_conversion_quality", "enum kfr::sample_rate_conversion_quality *|kfr::CMT_ARCH_NAME::resample_quality *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__seek_origin = {"_p_kfr__seek_origin", "enum kfr::seek_origin *|DSP::seek_origin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univector2dT_SampleType_t = {"_p_kfr__univector2dT_SampleType_t", "kfr::univector2d< SampleType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_SampleType_t = {"_p_kfr__univectorT_SampleType_t", "kfr::univector< SampleType > *", 0, 0, (void*)&_wrap_class_SampleVector, 0};
static swig_type_info _swigt__p_kfr__univectorT_float_t = {"_p_kfr__univectorT_float_t", "kfr::univector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_kfr__complexT_SampleType_t_t = {"_p_kfr__univectorT_kfr__complexT_SampleType_t_t", "kfr::univector< kfr::complex< SampleType > > *", 0, 0, (void*)&_wrap_class_ComplexVector, 0};
static swig_type_info _swigt__p_kfr__univectorT_kfr__complexT_float_t_t = {"_p_kfr__univectorT_kfr__complexT_float_t_t", "kfr::univector< kfr::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__univectorT_unsigned_char_t = {"_p_kfr__univectorT_unsigned_char_t", "kfr::univector< unsigned char > *|kfr::univector< kfr::u8 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__window_symmetry = {"_p_kfr__window_symmetry", "kfr::window_symmetry *|DSP::window_symmetry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_kfr__zpkT_SampleType_t = {"_p_kfr__zpkT_SampleType_t", "kfr::zpk< SampleType > *", 0, 0, (void*)&_wrap_class_zpk, 0};
static swig_type_info _swigt__p_long = {"_p_long", "ilong *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_double = {"_p_long_double", "long double *|kfr::f80 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|kfr::i64 *|kfr::imax *|intmax_t *|i64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_KfrDSP1__ConvolutionFilterT_SampleType_t = {"_p_p_KfrDSP1__ConvolutionFilterT_SampleType_t", "KfrDSP1::ConvolutionFilter< SampleType > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_SampleType = {"_p_p_SampleType", "SampleType **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "kfr::i16 *|short *|i16 *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "kfr::i8 *|signed char *|i8 *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std::complex< double > *", 0, 0, (void*)&_wrap_class_double_complex, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *", 0, 0, (void*)&_wrap_class_float_complex, 0};
static swig_type_info _swigt__p_std__gslice = {"_p_std__gslice", "std::gslice *", 0, 0, (void*)&_wrap_class_gslice, 0};
static swig_type_info _swigt__p_std__gslice_arrayT_float_t = {"_p_std__gslice_arrayT_float_t", "std::gslice_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__indirect_arrayT_float_t = {"_p_std__indirect_arrayT_float_t", "std::indirect_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mask_arrayT_float_t = {"_p_std__mask_arrayT_float_t", "std::mask_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_double_t = {"_p_std__numeric_limitsT_double_t", "std::numeric_limits< double > *", 0, 0, (void*)&_wrap_class_double_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_float_t = {"_p_std__numeric_limitsT_float_t", "std::numeric_limits< float > *", 0, 0, (void*)&_wrap_class_float_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_int_t = {"_p_std__numeric_limitsT_int_t", "std::numeric_limits< int > *", 0, 0, (void*)&_wrap_class_int_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_long_t = {"_p_std__numeric_limitsT_long_long_t", "std::numeric_limits< long long > *", 0, 0, (void*)&_wrap_class_llong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_long_t = {"_p_std__numeric_limitsT_long_t", "std::numeric_limits< long > *", 0, 0, (void*)&_wrap_class_long_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_short_t = {"_p_std__numeric_limitsT_short_t", "std::numeric_limits< short > *", 0, 0, (void*)&_wrap_class_short_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_int_t = {"_p_std__numeric_limitsT_unsigned_int_t", "std::numeric_limits< unsigned int > *", 0, 0, (void*)&_wrap_class_uint_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_long_t = {"_p_std__numeric_limitsT_unsigned_long_long_t", "std::numeric_limits< unsigned long long > *", 0, 0, (void*)&_wrap_class_ullong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_long_t = {"_p_std__numeric_limitsT_unsigned_long_t", "std::numeric_limits< unsigned long > *", 0, 0, (void*)&_wrap_class_ulong_numeric_limits, 0};
static swig_type_info _swigt__p_std__numeric_limitsT_unsigned_short_t = {"_p_std__numeric_limitsT_unsigned_short_t", "std::numeric_limits< unsigned short > *", 0, 0, (void*)&_wrap_class_ushort_numeric_limits, 0};
static swig_type_info _swigt__p_std__slice = {"_p_std__slice", "std::slice *", 0, 0, (void*)&_wrap_class_slice, 0};
static swig_type_info _swigt__p_std__slice_arrayT_float_t = {"_p_std__slice_arrayT_float_t", "std::slice_array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__valarrayT_float_t = {"_p_std__valarrayT_float_t", "std::valarray< float > *", 0, 0, (void*)&_wrap_class_float_valarray, 0};
static swig_type_info _swigt__p_std__vectorT_Filters__BiquadSection_t = {"_p_std__vectorT_Filters__BiquadSection_t", "std::vector< Filters::BiquadSection > *|Filters::BiquadSOS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Filters__BiquadTransposedTypeII_t = {"_p_std__vectorT_Filters__BiquadTransposedTypeII_t", "std::vector< Filters::BiquadTransposedTypeII > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_KfrDSP1__Biquad12DB_p_t = {"_p_std__vectorT_KfrDSP1__Biquad12DB_p_t", "std::vector< KfrDSP1::Biquad12DB * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_KfrDSP1__Biquad12DB_t = {"_p_std__vectorT_KfrDSP1__Biquad12DB_t", "std::vector< KfrDSP1::Biquad12DB > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_SampleType_t = {"_p_std__vectorT_SampleType_t", "std::vector< SampleType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_t = {"_p_std__vectorT_double_t", "std::vector< f64 > *|std::vector< double > *", 0, 0, (void*)&_wrap_class_vectorf64, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *|std::vector< f32 > *", 0, 0, (void*)&_wrap_class_vectorf32, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< i32 > *|std::vector< int > *", 0, 0, (void*)&_wrap_class_vectori32, 0};
static swig_type_info _swigt__p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t = {"_p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t", "std::vector< kfr::biquad_params< SampleType > > *", 0, 0, (void*)&_wrap_class_biquad_params_vector, 0};
static swig_type_info _swigt__p_std__vectorT_kfr__complexT_double_t_t = {"_p_std__vectorT_kfr__complexT_double_t_t", "std::vector< kfr::complex< double > > *", 0, 0, (void*)&_wrap_class_cvector64, 0};
static swig_type_info _swigt__p_std__vectorT_kfr__complexT_float_t_t = {"_p_std__vectorT_kfr__complexT_float_t_t", "std::vector< kfr::complex< float > > *", 0, 0, (void*)&_wrap_class_cvector32, 0};
static swig_type_info _swigt__p_std__vectorT_long_long_t = {"_p_std__vectorT_long_long_t", "std::vector< long long > *|std::vector< i64 > *", 0, 0, (void*)&_wrap_class_vectori64, 0};
static swig_type_info _swigt__p_std__vectorT_short_t = {"_p_std__vectorT_short_t", "std::vector< short > *|std::vector< i16 > *", 0, 0, (void*)&_wrap_class_vectori16, 0};
static swig_type_info _swigt__p_std__vectorT_signed_char_t = {"_p_std__vectorT_signed_char_t", "std::vector< signed char > *|std::vector< i8 > *", 0, 0, (void*)&_wrap_class_vectori8, 0};
static swig_type_info _swigt__p_std__vectorT_size_t_t = {"_p_std__vectorT_size_t_t", "std::vector< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_t = {"_p_std__vectorT_unsigned_char_t", "std::vector< unsigned char > *|std::vector< u8 > *", 0, 0, (void*)&_wrap_class_vectorui8, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_t = {"_p_std__vectorT_unsigned_int_t", "std::vector< u32 > *|std::vector< unsigned int > *", 0, 0, (void*)&_wrap_class_vectorui32, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_long_long_t = {"_p_std__vectorT_unsigned_long_long_t", "std::vector< unsigned long long > *|std::vector< u64 > *", 0, 0, (void*)&_wrap_class_vectorui64, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *|std::vector< u16 > *", 0, 0, (void*)&_wrap_class_vectorui16, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_double_t = {"_p_std__vector_iteratorT_double_t", "std::vector_iterator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_float_t = {"_p_std__vector_iteratorT_float_t", "std::vector_iterator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_int_t = {"_p_std__vector_iteratorT_int_t", "std::vector_iterator< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_kfr__biquad_paramsT_SampleType_t_t = {"_p_std__vector_iteratorT_kfr__biquad_paramsT_SampleType_t_t", "std::vector_iterator< kfr::biquad_params< SampleType > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_kfr__complexT_double_t_t = {"_p_std__vector_iteratorT_kfr__complexT_double_t_t", "std::vector_iterator< kfr::complex< double > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_kfr__complexT_float_t_t = {"_p_std__vector_iteratorT_kfr__complexT_float_t_t", "std::vector_iterator< kfr::complex< float > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_long_long_t = {"_p_std__vector_iteratorT_long_long_t", "std::vector_iterator< long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_short_t = {"_p_std__vector_iteratorT_short_t", "std::vector_iterator< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_signed_char_t = {"_p_std__vector_iteratorT_signed_char_t", "std::vector_iterator< signed char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_unsigned_char_t = {"_p_std__vector_iteratorT_unsigned_char_t", "std::vector_iterator< unsigned char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_unsigned_int_t = {"_p_std__vector_iteratorT_unsigned_int_t", "std::vector_iterator< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_unsigned_long_long_t = {"_p_std__vector_iteratorT_unsigned_long_long_t", "std::vector_iterator< unsigned long long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vector_iteratorT_unsigned_short_t = {"_p_std__vector_iteratorT_unsigned_short_t", "std::vector_iterator< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_subtypeT_SampleType_t = {"_p_subtypeT_SampleType_t", "kfr::CMT_ARCH_NAME::samplerate_converter< SampleType >::ftype *|subtype< SampleType > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "u8 *|unsigned char *|uint_least8_t *|uint_fast8_t *|kfr::u8 *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|kfr::u32 *|u32 *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "ulong *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|kfr::u64 *|unsigned long long *|u64 *|uintmax_t *|kfr::umax *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "kfr::u16 *|unsigned short *|u16 *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_DSP__BandPassFilterT_SampleType_t,
  &_swigt__p_DSP__BesselBandPassFilterT_SampleType_t,
  &_swigt__p_DSP__BesselBandStopFilterT_SampleType_t,
  &_swigt__p_DSP__BesselFilterT_SampleType_t,
  &_swigt__p_DSP__BesselHighPassFilterT_SampleType_t,
  &_swigt__p_DSP__BesselLowPassFilterT_SampleType_t,
  &_swigt__p_DSP__BiQuadParamsT_SampleType_t,
  &_swigt__p_DSP__BiquadT_SampleType_t,
  &_swigt__p_DSP__ButterworthBandPassFilterT_SampleType_t,
  &_swigt__p_DSP__ButterworthBandStopFilterT_SampleType_t,
  &_swigt__p_DSP__ButterworthFilterT_SampleType_t,
  &_swigt__p_DSP__ButterworthHighPassFilterT_SampleType_t,
  &_swigt__p_DSP__ButterworthLowPassFilterT_SampleType_t,
  &_swigt__p_DSP__Chebyshev1BandPassFilterT_SampleType_t,
  &_swigt__p_DSP__Chebyshev1BandStopFilterT_SampleType_t,
  &_swigt__p_DSP__Chebyshev1FilterT_SampleType_t,
  &_swigt__p_DSP__Chebyshev1HighPassFilterT_SampleType_t,
  &_swigt__p_DSP__Chebyshev1LowPassFilterT_SampleType_t,
  &_swigt__p_DSP__Chebyshev2BandPassFilterT_SampleType_t,
  &_swigt__p_DSP__Chebyshev2BandStopFilterT_SampleType_t,
  &_swigt__p_DSP__Chebyshev2FilterT_SampleType_t,
  &_swigt__p_DSP__Chebyshev2HighPassFilterT_SampleType_t,
  &_swigt__p_DSP__Chebyshev2LowPassFilterT_SampleType_t,
  &_swigt__p_DSP__DCTPlanT_SampleType_t,
  &_swigt__p_DSP__DFTPlanT_SampleType_t,
  &_swigt__p_DSP__DFTRealPlanT_SampleType_t,
  &_swigt__p_DSP__FIRBandpassFilterT_SampleType_t,
  &_swigt__p_DSP__FIRBandstopFilterT_SampleType_t,
  &_swigt__p_DSP__FIRFilterT_SampleType_t,
  &_swigt__p_DSP__FIRHighpassFilterT_SampleType_t,
  &_swigt__p_DSP__FIRLowpassFilterT_SampleType_t,
  &_swigt__p_DSP__FlacReaderT_SampleType_t,
  &_swigt__p_DSP__HighPassFilterT_SampleType_t,
  &_swigt__p_DSP__HighShelfFilterT_SampleType_t,
  &_swigt__p_DSP__LowPassFilterT_SampleType_t,
  &_swigt__p_DSP__LowShelfFilterT_SampleType_t,
  &_swigt__p_DSP__MP3ReaderT_SampleType_t,
  &_swigt__p_DSP__NotchFilterT_SampleType_t,
  &_swigt__p_DSP__PeakFilterT_SampleType_t,
  &_swigt__p_DSP__WavReaderT_SampleType_t,
  &_swigt__p_DSP__WavWriterT_SampleType_t,
  &_swigt__p_Filters__BesselBandPassFilter,
  &_swigt__p_Filters__BesselBandStopFilter,
  &_swigt__p_Filters__BesselHighPassFilter,
  &_swigt__p_Filters__BesselLowPassFilter,
  &_swigt__p_Filters__BiquadAllpassFilter,
  &_swigt__p_Filters__BiquadBandpassFilter,
  &_swigt__p_Filters__BiquadFilterBase,
  &_swigt__p_Filters__BiquadHighpassFilter,
  &_swigt__p_Filters__BiquadHighshelfFilter,
  &_swigt__p_Filters__BiquadLowpassFilter,
  &_swigt__p_Filters__BiquadLowshelfFilter,
  &_swigt__p_Filters__BiquadNotchFilter,
  &_swigt__p_Filters__BiquadPeakFilter,
  &_swigt__p_Filters__BiquadSection,
  &_swigt__p_Filters__BiquadTransposedTypeII,
  &_swigt__p_Filters__ButterworthBandPassFilter,
  &_swigt__p_Filters__ButterworthBandStopFilter,
  &_swigt__p_Filters__ButterworthHighPassFilter,
  &_swigt__p_Filters__ButterworthLowPassFilter,
  &_swigt__p_Filters__ChebyshevIBandPassFilter,
  &_swigt__p_Filters__ChebyshevIBandStopFilter,
  &_swigt__p_Filters__ChebyshevIHighPassFilter,
  &_swigt__p_Filters__ChebyshevIIBandPassFilter,
  &_swigt__p_Filters__ChebyshevIIBandStopFilter,
  &_swigt__p_Filters__ChebyshevIIHighPassFilter,
  &_swigt__p_Filters__ChebyshevIILowPassFilter,
  &_swigt__p_Filters__ChebyshevILowPassFilter,
  &_swigt__p_Filters__FilterCoefficients,
  &_swigt__p_KfrDSP1__BesselFilter,
  &_swigt__p_KfrDSP1__Biquad12DB,
  &_swigt__p_KfrDSP1__Biquad6DB,
  &_swigt__p_KfrDSP1__BiquadCascade,
  &_swigt__p_KfrDSP1__BrowningFilter,
  &_swigt__p_KfrDSP1__ButterworthFilter,
  &_swigt__p_KfrDSP1__Chebyshev1Filter,
  &_swigt__p_KfrDSP1__Chebyshev2Filter,
  &_swigt__p_KfrDSP1__CombFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__ConvolutionFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__DelayLineT_SampleType_t,
  &_swigt__p_KfrDSP1__FIRBandpassFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__FIRBandstopFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__FIRCombFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__FIRFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__FIRHighpassFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__FIRLowpassFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__FilterBase,
  &_swigt__p_KfrDSP1__IIRCombFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__MultiTapCombFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__MultiTapDelayLineT_SampleType_t,
  &_swigt__p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__PinkNoise,
  &_swigt__p_KfrDSP1__PinkingFilter,
  &_swigt__p_KfrDSP1__RbjFilter,
  &_swigt__p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,
  &_swigt__p_KfrDSP1__ZolzerBiquad,
  &_swigt__p_SampleType,
  &_swigt__p_Std__RandomMersenne,
  &_swigt__p_bool,
  &_swigt__p_double,
  &_swigt__p_f_float__float,
  &_swigt__p_f_r_q_const__float__float,
  &_swigt__p_fenv_t,
  &_swigt__p_fexcept_t,
  &_swigt__p_float,
  &_swigt__p_ftype,
  &_swigt__p_int,
  &_swigt__p_itype,
  &_swigt__p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t,
  &_swigt__p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,
  &_swigt__p_kfr__audio_format,
  &_swigt__p_kfr__audio_format_and_length,
  &_swigt__p_kfr__audio_reader_flacT_SampleType_t,
  &_swigt__p_kfr__audio_reader_mp3T_SampleType_t,
  &_swigt__p_kfr__audio_writer_wavT_SampleType_t,
  &_swigt__p_kfr__biquad_filterT_SampleType_t,
  &_swigt__p_kfr__biquad_paramsT_SampleType_t,
  &_swigt__p_kfr__biquad_paramsT_double_t,
  &_swigt__p_kfr__complexT_SampleType_t,
  &_swigt__p_kfr__complexT_double_t,
  &_swigt__p_kfr__complexT_float_t,
  &_swigt__p_kfr__convolve_filterT_SampleType_t,
  &_swigt__p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,
  &_swigt__p_kfr__dct_planT_SampleType_t,
  &_swigt__p_kfr__dft_order,
  &_swigt__p_kfr__dft_planT_SampleType_t,
  &_swigt__p_kfr__dft_plan_realT_SampleType_t,
  &_swigt__p_kfr__expression_pointerT_SampleType_t,
  &_swigt__p_kfr__filterT_SampleType_t,
  &_swigt__p_kfr__fraction,
  &_swigt__p_kfr__sample_rate_conversion_quality,
  &_swigt__p_kfr__seek_origin,
  &_swigt__p_kfr__univector2dT_SampleType_t,
  &_swigt__p_kfr__univectorT_SampleType_t,
  &_swigt__p_kfr__univectorT_float_t,
  &_swigt__p_kfr__univectorT_kfr__complexT_SampleType_t_t,
  &_swigt__p_kfr__univectorT_kfr__complexT_float_t_t,
  &_swigt__p_kfr__univectorT_unsigned_char_t,
  &_swigt__p_kfr__window_symmetry,
  &_swigt__p_kfr__zpkT_SampleType_t,
  &_swigt__p_long,
  &_swigt__p_long_double,
  &_swigt__p_long_long,
  &_swigt__p_p_KfrDSP1__ConvolutionFilterT_SampleType_t,
  &_swigt__p_p_SampleType,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_t,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__gslice,
  &_swigt__p_std__gslice_arrayT_float_t,
  &_swigt__p_std__indirect_arrayT_float_t,
  &_swigt__p_std__mask_arrayT_float_t,
  &_swigt__p_std__numeric_limitsT_double_t,
  &_swigt__p_std__numeric_limitsT_float_t,
  &_swigt__p_std__numeric_limitsT_int_t,
  &_swigt__p_std__numeric_limitsT_long_long_t,
  &_swigt__p_std__numeric_limitsT_long_t,
  &_swigt__p_std__numeric_limitsT_short_t,
  &_swigt__p_std__numeric_limitsT_unsigned_int_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_long_t,
  &_swigt__p_std__numeric_limitsT_unsigned_short_t,
  &_swigt__p_std__slice,
  &_swigt__p_std__slice_arrayT_float_t,
  &_swigt__p_std__string,
  &_swigt__p_std__valarrayT_float_t,
  &_swigt__p_std__vectorT_Filters__BiquadSection_t,
  &_swigt__p_std__vectorT_Filters__BiquadTransposedTypeII_t,
  &_swigt__p_std__vectorT_KfrDSP1__Biquad12DB_p_t,
  &_swigt__p_std__vectorT_KfrDSP1__Biquad12DB_t,
  &_swigt__p_std__vectorT_SampleType_t,
  &_swigt__p_std__vectorT_double_t,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,
  &_swigt__p_std__vectorT_kfr__complexT_double_t_t,
  &_swigt__p_std__vectorT_kfr__complexT_float_t_t,
  &_swigt__p_std__vectorT_long_long_t,
  &_swigt__p_std__vectorT_short_t,
  &_swigt__p_std__vectorT_signed_char_t,
  &_swigt__p_std__vectorT_size_t_t,
  &_swigt__p_std__vectorT_unsigned_char_t,
  &_swigt__p_std__vectorT_unsigned_int_t,
  &_swigt__p_std__vectorT_unsigned_long_long_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__p_std__vector_iteratorT_double_t,
  &_swigt__p_std__vector_iteratorT_float_t,
  &_swigt__p_std__vector_iteratorT_int_t,
  &_swigt__p_std__vector_iteratorT_kfr__biquad_paramsT_SampleType_t_t,
  &_swigt__p_std__vector_iteratorT_kfr__complexT_double_t_t,
  &_swigt__p_std__vector_iteratorT_kfr__complexT_float_t_t,
  &_swigt__p_std__vector_iteratorT_long_long_t,
  &_swigt__p_std__vector_iteratorT_short_t,
  &_swigt__p_std__vector_iteratorT_signed_char_t,
  &_swigt__p_std__vector_iteratorT_unsigned_char_t,
  &_swigt__p_std__vector_iteratorT_unsigned_int_t,
  &_swigt__p_std__vector_iteratorT_unsigned_long_long_t,
  &_swigt__p_std__vector_iteratorT_unsigned_short_t,
  &_swigt__p_subtypeT_SampleType_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_DSP__BandPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__BandPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselBandPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__BesselBandPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselBandStopFilterT_SampleType_t[] = {  {&_swigt__p_DSP__BesselBandStopFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselFilterT_SampleType_t[] = {  {&_swigt__p_DSP__BesselFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselHighPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__BesselHighPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BesselLowPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__BesselLowPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BiQuadParamsT_SampleType_t[] = {  {&_swigt__p_DSP__BiQuadParamsT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__BiquadT_SampleType_t[] = {  {&_swigt__p_DSP__BiquadT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthBandPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__ButterworthBandPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthBandStopFilterT_SampleType_t[] = {  {&_swigt__p_DSP__ButterworthBandStopFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthFilterT_SampleType_t[] = {  {&_swigt__p_DSP__ButterworthFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthHighPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__ButterworthHighPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__ButterworthLowPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__ButterworthLowPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1BandPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__Chebyshev1BandPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1BandStopFilterT_SampleType_t[] = {  {&_swigt__p_DSP__Chebyshev1BandStopFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1FilterT_SampleType_t[] = {  {&_swigt__p_DSP__Chebyshev1FilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1HighPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__Chebyshev1HighPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev1LowPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__Chebyshev1LowPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2BandPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__Chebyshev2BandPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2BandStopFilterT_SampleType_t[] = {  {&_swigt__p_DSP__Chebyshev2BandStopFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2FilterT_SampleType_t[] = {  {&_swigt__p_DSP__Chebyshev2FilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2HighPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__Chebyshev2HighPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__Chebyshev2LowPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__Chebyshev2LowPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__DCTPlanT_SampleType_t[] = {  {&_swigt__p_DSP__DCTPlanT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__DFTPlanT_SampleType_t[] = {  {&_swigt__p_DSP__DFTPlanT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__DFTRealPlanT_SampleType_t[] = {  {&_swigt__p_DSP__DFTRealPlanT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRBandpassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__FIRBandpassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRBandstopFilterT_SampleType_t[] = {  {&_swigt__p_DSP__FIRBandstopFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRFilterT_SampleType_t[] = {  {&_swigt__p_DSP__FIRFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRHighpassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__FIRHighpassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FIRLowpassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__FIRLowpassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__FlacReaderT_SampleType_t[] = {  {&_swigt__p_DSP__FlacReaderT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__HighPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__HighPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__HighShelfFilterT_SampleType_t[] = {  {&_swigt__p_DSP__HighShelfFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__LowPassFilterT_SampleType_t[] = {  {&_swigt__p_DSP__LowPassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__LowShelfFilterT_SampleType_t[] = {  {&_swigt__p_DSP__LowShelfFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__MP3ReaderT_SampleType_t[] = {  {&_swigt__p_DSP__MP3ReaderT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__NotchFilterT_SampleType_t[] = {  {&_swigt__p_DSP__NotchFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__PeakFilterT_SampleType_t[] = {  {&_swigt__p_DSP__PeakFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__WavReaderT_SampleType_t[] = {  {&_swigt__p_DSP__WavReaderT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DSP__WavWriterT_SampleType_t[] = {  {&_swigt__p_DSP__WavWriterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BesselBandPassFilter[] = {  {&_swigt__p_Filters__BesselBandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BesselBandStopFilter[] = {  {&_swigt__p_Filters__BesselBandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BesselHighPassFilter[] = {  {&_swigt__p_Filters__BesselHighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BesselLowPassFilter[] = {  {&_swigt__p_Filters__BesselLowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadAllpassFilter[] = {  {&_swigt__p_Filters__BiquadAllpassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadBandpassFilter[] = {  {&_swigt__p_Filters__BiquadBandpassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadFilterBase[] = {  {&_swigt__p_Filters__ButterworthHighPassFilter, _p_Filters__ButterworthHighPassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__ButterworthLowPassFilter, _p_Filters__ButterworthLowPassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__BesselBandPassFilter, _p_Filters__BesselBandPassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__BesselHighPassFilter, _p_Filters__BesselHighPassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__BesselLowPassFilter, _p_Filters__BesselLowPassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__BiquadPeakFilter, _p_Filters__BiquadPeakFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__BiquadBandpassFilter, _p_Filters__BiquadBandpassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__BiquadHighpassFilter, _p_Filters__BiquadHighpassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__BiquadAllpassFilter, _p_Filters__BiquadAllpassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__BiquadLowpassFilter, _p_Filters__BiquadLowpassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__ButterworthBandPassFilter, _p_Filters__ButterworthBandPassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__ChebyshevILowPassFilter, _p_Filters__ChebyshevILowPassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__ChebyshevIHighPassFilter, _p_Filters__ChebyshevIHighPassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__ChebyshevIBandPassFilter, _p_Filters__ChebyshevIBandPassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__ChebyshevIILowPassFilter, _p_Filters__ChebyshevIILowPassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__ChebyshevIIHighPassFilter, _p_Filters__ChebyshevIIHighPassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__ChebyshevIIBandPassFilter, _p_Filters__ChebyshevIIBandPassFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__BiquadFilterBase, 0, 0, 0},  {&_swigt__p_Filters__BesselBandStopFilter, _p_Filters__BesselBandStopFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__BiquadHighshelfFilter, _p_Filters__BiquadHighshelfFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__BiquadLowshelfFilter, _p_Filters__BiquadLowshelfFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__BiquadNotchFilter, _p_Filters__BiquadNotchFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__ButterworthBandStopFilter, _p_Filters__ButterworthBandStopFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__ChebyshevIBandStopFilter, _p_Filters__ChebyshevIBandStopFilterTo_p_Filters__BiquadFilterBase, 0, 0},  {&_swigt__p_Filters__ChebyshevIIBandStopFilter, _p_Filters__ChebyshevIIBandStopFilterTo_p_Filters__BiquadFilterBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadHighpassFilter[] = {  {&_swigt__p_Filters__BiquadHighpassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadHighshelfFilter[] = {  {&_swigt__p_Filters__BiquadHighshelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadLowpassFilter[] = {  {&_swigt__p_Filters__BiquadLowpassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadLowshelfFilter[] = {  {&_swigt__p_Filters__BiquadLowshelfFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadNotchFilter[] = {  {&_swigt__p_Filters__BiquadNotchFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadPeakFilter[] = {  {&_swigt__p_Filters__BiquadPeakFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadSection[] = {  {&_swigt__p_Filters__BiquadSection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__BiquadTransposedTypeII[] = {  {&_swigt__p_Filters__BiquadTransposedTypeII, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__ButterworthBandPassFilter[] = {  {&_swigt__p_Filters__ButterworthBandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__ButterworthBandStopFilter[] = {  {&_swigt__p_Filters__ButterworthBandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__ButterworthHighPassFilter[] = {  {&_swigt__p_Filters__ButterworthHighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__ButterworthLowPassFilter[] = {  {&_swigt__p_Filters__ButterworthLowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__ChebyshevIBandPassFilter[] = {  {&_swigt__p_Filters__ChebyshevIBandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__ChebyshevIBandStopFilter[] = {  {&_swigt__p_Filters__ChebyshevIBandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__ChebyshevIHighPassFilter[] = {  {&_swigt__p_Filters__ChebyshevIHighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__ChebyshevIIBandPassFilter[] = {  {&_swigt__p_Filters__ChebyshevIIBandPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__ChebyshevIIBandStopFilter[] = {  {&_swigt__p_Filters__ChebyshevIIBandStopFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__ChebyshevIIHighPassFilter[] = {  {&_swigt__p_Filters__ChebyshevIIHighPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__ChebyshevIILowPassFilter[] = {  {&_swigt__p_Filters__ChebyshevIILowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__ChebyshevILowPassFilter[] = {  {&_swigt__p_Filters__ChebyshevILowPassFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Filters__FilterCoefficients[] = {  {&_swigt__p_Filters__FilterCoefficients, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__BesselFilter[] = {  {&_swigt__p_KfrDSP1__BesselFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__Biquad12DB[] = {  {&_swigt__p_KfrDSP1__Biquad12DB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__Biquad6DB[] = {  {&_swigt__p_KfrDSP1__Biquad6DB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__BiquadCascade[] = {  {&_swigt__p_KfrDSP1__BiquadCascade, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__BrowningFilter[] = {  {&_swigt__p_KfrDSP1__BrowningFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__ButterworthFilter[] = {  {&_swigt__p_KfrDSP1__ButterworthFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__Chebyshev1Filter[] = {  {&_swigt__p_KfrDSP1__Chebyshev1Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__Chebyshev2Filter[] = {  {&_swigt__p_KfrDSP1__Chebyshev2Filter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__CombFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__CombFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__ConvolutionFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__ConvolutionFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__DelayLineT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__DelayLineT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__FIRBandpassFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__FIRBandpassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__FIRBandstopFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__FIRBandstopFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__FIRCombFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__FIRCombFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__FIRFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__FIRFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__FIRHighpassFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__FIRHighpassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__FIRLowpassFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__FIRLowpassFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__FilterBase[] = {  {&_swigt__p_KfrDSP1__FilterBase, 0, 0, 0},  {&_swigt__p_KfrDSP1__Biquad12DB, _p_KfrDSP1__Biquad12DBTo_p_KfrDSP1__FilterBase, 0, 0},  {&_swigt__p_KfrDSP1__RbjFilter, _p_KfrDSP1__RbjFilterTo_p_KfrDSP1__FilterBase, 0, 0},  {&_swigt__p_KfrDSP1__Biquad6DB, _p_KfrDSP1__Biquad6DBTo_p_KfrDSP1__FilterBase, 0, 0},  {&_swigt__p_KfrDSP1__BiquadCascade, _p_KfrDSP1__BiquadCascadeTo_p_KfrDSP1__FilterBase, 0, 0},  {&_swigt__p_KfrDSP1__ZolzerBiquad, _p_KfrDSP1__ZolzerBiquadTo_p_KfrDSP1__FilterBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__IIRCombFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__IIRCombFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__MultiTapCombFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__MultiTapCombFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__MultiTapDelayLineT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__MultiTapDelayLineT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__PinkNoise[] = {  {&_swigt__p_KfrDSP1__PinkNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__PinkingFilter[] = {  {&_swigt__p_KfrDSP1__PinkingFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__RbjFilter[] = {  {&_swigt__p_KfrDSP1__RbjFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__StereoConvolutionFilterT_SampleType_t[] = {  {&_swigt__p_KfrDSP1__StereoConvolutionFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KfrDSP1__ZolzerBiquad[] = {  {&_swigt__p_KfrDSP1__ZolzerBiquad, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SampleType[] = {  {&_swigt__p_SampleType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Std__RandomMersenne[] = {  {&_swigt__p_Std__RandomMersenne, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_float__float[] = {  {&_swigt__p_f_float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__float__float[] = {  {&_swigt__p_f_r_q_const__float__float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fenv_t[] = {  {&_swigt__p_fenv_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fexcept_t[] = {  {&_swigt__p_fexcept_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ftype[] = {  {&_swigt__p_ftype, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_itype[] = {  {&_swigt__p_itype, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t[] = {  {&_swigt__p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t[] = {  {&_swigt__p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_format[] = {  {&_swigt__p_kfr__audio_format_and_length, _p_kfr__audio_format_and_lengthTo_p_kfr__audio_format, 0, 0},  {&_swigt__p_kfr__audio_format, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_format_and_length[] = {  {&_swigt__p_kfr__audio_format_and_length, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_reader_flacT_SampleType_t[] = {  {&_swigt__p_kfr__audio_reader_flacT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_reader_mp3T_SampleType_t[] = {  {&_swigt__p_kfr__audio_reader_mp3T_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__audio_writer_wavT_SampleType_t[] = {  {&_swigt__p_kfr__audio_writer_wavT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__biquad_filterT_SampleType_t[] = {  {&_swigt__p_kfr__biquad_filterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__biquad_paramsT_SampleType_t[] = {  {&_swigt__p_kfr__biquad_paramsT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__biquad_paramsT_double_t[] = {  {&_swigt__p_kfr__biquad_paramsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__complexT_SampleType_t[] = {  {&_swigt__p_kfr__complexT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__complexT_double_t[] = {  {&_swigt__p_kfr__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__complexT_float_t[] = {  {&_swigt__p_kfr__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__convolve_filterT_SampleType_t[] = {  {&_swigt__p_kfr__convolve_filterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t[] = {  {&_swigt__p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__dct_planT_SampleType_t[] = {  {&_swigt__p_kfr__dct_planT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__dft_order[] = {  {&_swigt__p_kfr__dft_order, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__dft_planT_SampleType_t[] = {  {&_swigt__p_kfr__dft_planT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__dft_plan_realT_SampleType_t[] = {  {&_swigt__p_kfr__dft_plan_realT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__expression_pointerT_SampleType_t[] = {  {&_swigt__p_kfr__expression_pointerT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__filterT_SampleType_t[] = {  {&_swigt__p_kfr__filterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__fraction[] = {  {&_swigt__p_kfr__fraction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__sample_rate_conversion_quality[] = {  {&_swigt__p_kfr__sample_rate_conversion_quality, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__seek_origin[] = {  {&_swigt__p_kfr__seek_origin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univector2dT_SampleType_t[] = {  {&_swigt__p_kfr__univector2dT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_SampleType_t[] = {  {&_swigt__p_kfr__univectorT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_float_t[] = {  {&_swigt__p_kfr__univectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_kfr__complexT_SampleType_t_t[] = {  {&_swigt__p_kfr__univectorT_kfr__complexT_SampleType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_kfr__complexT_float_t_t[] = {  {&_swigt__p_kfr__univectorT_kfr__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__univectorT_unsigned_char_t[] = {  {&_swigt__p_kfr__univectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__window_symmetry[] = {  {&_swigt__p_kfr__window_symmetry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_kfr__zpkT_SampleType_t[] = {  {&_swigt__p_kfr__zpkT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_double[] = {  {&_swigt__p_long_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_KfrDSP1__ConvolutionFilterT_SampleType_t[] = {  {&_swigt__p_p_KfrDSP1__ConvolutionFilterT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_SampleType[] = {  {&_swigt__p_p_SampleType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__gslice[] = {  {&_swigt__p_std__gslice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__gslice_arrayT_float_t[] = {  {&_swigt__p_std__gslice_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__indirect_arrayT_float_t[] = {  {&_swigt__p_std__indirect_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mask_arrayT_float_t[] = {  {&_swigt__p_std__mask_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_double_t[] = {  {&_swigt__p_std__numeric_limitsT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_float_t[] = {  {&_swigt__p_std__numeric_limitsT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_int_t[] = {  {&_swigt__p_std__numeric_limitsT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_long_t[] = {  {&_swigt__p_std__numeric_limitsT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_short_t[] = {  {&_swigt__p_std__numeric_limitsT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_int_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_long_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__numeric_limitsT_unsigned_short_t[] = {  {&_swigt__p_std__numeric_limitsT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__slice[] = {  {&_swigt__p_std__slice, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__slice_arrayT_float_t[] = {  {&_swigt__p_std__slice_arrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__valarrayT_float_t[] = {  {&_swigt__p_std__valarrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Filters__BiquadSection_t[] = {  {&_swigt__p_std__vectorT_Filters__BiquadSection_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Filters__BiquadTransposedTypeII_t[] = {  {&_swigt__p_std__vectorT_Filters__BiquadTransposedTypeII_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_KfrDSP1__Biquad12DB_p_t[] = {  {&_swigt__p_std__vectorT_KfrDSP1__Biquad12DB_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_KfrDSP1__Biquad12DB_t[] = {  {&_swigt__p_std__vectorT_KfrDSP1__Biquad12DB_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_SampleType_t[] = {  {&_swigt__p_std__vectorT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_t[] = {  {&_swigt__p_std__vectorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t[] = {  {&_swigt__p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_kfr__complexT_double_t_t[] = {  {&_swigt__p_std__vectorT_kfr__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_kfr__complexT_float_t_t[] = {  {&_swigt__p_std__vectorT_kfr__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_long_t[] = {  {&_swigt__p_std__vectorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_short_t[] = {  {&_swigt__p_std__vectorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_signed_char_t[] = {  {&_swigt__p_std__vectorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_size_t_t[] = {  {&_swigt__p_std__vectorT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_long_long_t[] = {  {&_swigt__p_std__vectorT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_double_t[] = {  {&_swigt__p_std__vector_iteratorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_float_t[] = {  {&_swigt__p_std__vector_iteratorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_int_t[] = {  {&_swigt__p_std__vector_iteratorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_kfr__biquad_paramsT_SampleType_t_t[] = {  {&_swigt__p_std__vector_iteratorT_kfr__biquad_paramsT_SampleType_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_kfr__complexT_double_t_t[] = {  {&_swigt__p_std__vector_iteratorT_kfr__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_kfr__complexT_float_t_t[] = {  {&_swigt__p_std__vector_iteratorT_kfr__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_long_long_t[] = {  {&_swigt__p_std__vector_iteratorT_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_short_t[] = {  {&_swigt__p_std__vector_iteratorT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_signed_char_t[] = {  {&_swigt__p_std__vector_iteratorT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_unsigned_char_t[] = {  {&_swigt__p_std__vector_iteratorT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_unsigned_int_t[] = {  {&_swigt__p_std__vector_iteratorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_unsigned_long_long_t[] = {  {&_swigt__p_std__vector_iteratorT_unsigned_long_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vector_iteratorT_unsigned_short_t[] = {  {&_swigt__p_std__vector_iteratorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_subtypeT_SampleType_t[] = {  {&_swigt__p_subtypeT_SampleType_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_DSP__BandPassFilterT_SampleType_t,
  _swigc__p_DSP__BesselBandPassFilterT_SampleType_t,
  _swigc__p_DSP__BesselBandStopFilterT_SampleType_t,
  _swigc__p_DSP__BesselFilterT_SampleType_t,
  _swigc__p_DSP__BesselHighPassFilterT_SampleType_t,
  _swigc__p_DSP__BesselLowPassFilterT_SampleType_t,
  _swigc__p_DSP__BiQuadParamsT_SampleType_t,
  _swigc__p_DSP__BiquadT_SampleType_t,
  _swigc__p_DSP__ButterworthBandPassFilterT_SampleType_t,
  _swigc__p_DSP__ButterworthBandStopFilterT_SampleType_t,
  _swigc__p_DSP__ButterworthFilterT_SampleType_t,
  _swigc__p_DSP__ButterworthHighPassFilterT_SampleType_t,
  _swigc__p_DSP__ButterworthLowPassFilterT_SampleType_t,
  _swigc__p_DSP__Chebyshev1BandPassFilterT_SampleType_t,
  _swigc__p_DSP__Chebyshev1BandStopFilterT_SampleType_t,
  _swigc__p_DSP__Chebyshev1FilterT_SampleType_t,
  _swigc__p_DSP__Chebyshev1HighPassFilterT_SampleType_t,
  _swigc__p_DSP__Chebyshev1LowPassFilterT_SampleType_t,
  _swigc__p_DSP__Chebyshev2BandPassFilterT_SampleType_t,
  _swigc__p_DSP__Chebyshev2BandStopFilterT_SampleType_t,
  _swigc__p_DSP__Chebyshev2FilterT_SampleType_t,
  _swigc__p_DSP__Chebyshev2HighPassFilterT_SampleType_t,
  _swigc__p_DSP__Chebyshev2LowPassFilterT_SampleType_t,
  _swigc__p_DSP__DCTPlanT_SampleType_t,
  _swigc__p_DSP__DFTPlanT_SampleType_t,
  _swigc__p_DSP__DFTRealPlanT_SampleType_t,
  _swigc__p_DSP__FIRBandpassFilterT_SampleType_t,
  _swigc__p_DSP__FIRBandstopFilterT_SampleType_t,
  _swigc__p_DSP__FIRFilterT_SampleType_t,
  _swigc__p_DSP__FIRHighpassFilterT_SampleType_t,
  _swigc__p_DSP__FIRLowpassFilterT_SampleType_t,
  _swigc__p_DSP__FlacReaderT_SampleType_t,
  _swigc__p_DSP__HighPassFilterT_SampleType_t,
  _swigc__p_DSP__HighShelfFilterT_SampleType_t,
  _swigc__p_DSP__LowPassFilterT_SampleType_t,
  _swigc__p_DSP__LowShelfFilterT_SampleType_t,
  _swigc__p_DSP__MP3ReaderT_SampleType_t,
  _swigc__p_DSP__NotchFilterT_SampleType_t,
  _swigc__p_DSP__PeakFilterT_SampleType_t,
  _swigc__p_DSP__WavReaderT_SampleType_t,
  _swigc__p_DSP__WavWriterT_SampleType_t,
  _swigc__p_Filters__BesselBandPassFilter,
  _swigc__p_Filters__BesselBandStopFilter,
  _swigc__p_Filters__BesselHighPassFilter,
  _swigc__p_Filters__BesselLowPassFilter,
  _swigc__p_Filters__BiquadAllpassFilter,
  _swigc__p_Filters__BiquadBandpassFilter,
  _swigc__p_Filters__BiquadFilterBase,
  _swigc__p_Filters__BiquadHighpassFilter,
  _swigc__p_Filters__BiquadHighshelfFilter,
  _swigc__p_Filters__BiquadLowpassFilter,
  _swigc__p_Filters__BiquadLowshelfFilter,
  _swigc__p_Filters__BiquadNotchFilter,
  _swigc__p_Filters__BiquadPeakFilter,
  _swigc__p_Filters__BiquadSection,
  _swigc__p_Filters__BiquadTransposedTypeII,
  _swigc__p_Filters__ButterworthBandPassFilter,
  _swigc__p_Filters__ButterworthBandStopFilter,
  _swigc__p_Filters__ButterworthHighPassFilter,
  _swigc__p_Filters__ButterworthLowPassFilter,
  _swigc__p_Filters__ChebyshevIBandPassFilter,
  _swigc__p_Filters__ChebyshevIBandStopFilter,
  _swigc__p_Filters__ChebyshevIHighPassFilter,
  _swigc__p_Filters__ChebyshevIIBandPassFilter,
  _swigc__p_Filters__ChebyshevIIBandStopFilter,
  _swigc__p_Filters__ChebyshevIIHighPassFilter,
  _swigc__p_Filters__ChebyshevIILowPassFilter,
  _swigc__p_Filters__ChebyshevILowPassFilter,
  _swigc__p_Filters__FilterCoefficients,
  _swigc__p_KfrDSP1__BesselFilter,
  _swigc__p_KfrDSP1__Biquad12DB,
  _swigc__p_KfrDSP1__Biquad6DB,
  _swigc__p_KfrDSP1__BiquadCascade,
  _swigc__p_KfrDSP1__BrowningFilter,
  _swigc__p_KfrDSP1__ButterworthFilter,
  _swigc__p_KfrDSP1__Chebyshev1Filter,
  _swigc__p_KfrDSP1__Chebyshev2Filter,
  _swigc__p_KfrDSP1__CombFilterT_SampleType_t,
  _swigc__p_KfrDSP1__ConvolutionFilterT_SampleType_t,
  _swigc__p_KfrDSP1__DelayLineT_SampleType_t,
  _swigc__p_KfrDSP1__FIRBandpassFilterT_SampleType_t,
  _swigc__p_KfrDSP1__FIRBandstopFilterT_SampleType_t,
  _swigc__p_KfrDSP1__FIRCombFilterT_SampleType_t,
  _swigc__p_KfrDSP1__FIRFilterT_SampleType_t,
  _swigc__p_KfrDSP1__FIRHighpassFilterT_SampleType_t,
  _swigc__p_KfrDSP1__FIRLowpassFilterT_SampleType_t,
  _swigc__p_KfrDSP1__FilterBase,
  _swigc__p_KfrDSP1__IIRCombFilterT_SampleType_t,
  _swigc__p_KfrDSP1__MultiTapCombFilterT_SampleType_t,
  _swigc__p_KfrDSP1__MultiTapDelayLineT_SampleType_t,
  _swigc__p_KfrDSP1__MultiTapFIRCombFilterT_SampleType_t,
  _swigc__p_KfrDSP1__MultiTapIIRCombFilterT_SampleType_t,
  _swigc__p_KfrDSP1__PinkNoise,
  _swigc__p_KfrDSP1__PinkingFilter,
  _swigc__p_KfrDSP1__RbjFilter,
  _swigc__p_KfrDSP1__StereoConvolutionFilterT_SampleType_t,
  _swigc__p_KfrDSP1__ZolzerBiquad,
  _swigc__p_SampleType,
  _swigc__p_Std__RandomMersenne,
  _swigc__p_bool,
  _swigc__p_double,
  _swigc__p_f_float__float,
  _swigc__p_f_r_q_const__float__float,
  _swigc__p_fenv_t,
  _swigc__p_fexcept_t,
  _swigc__p_float,
  _swigc__p_ftype,
  _swigc__p_int,
  _swigc__p_itype,
  _swigc__p_kfr__CMT_ARCH_NAME__biquad_filterT_SampleType_64_t,
  _swigc__p_kfr__CMT_ARCH_NAME__samplerate_converterT_SampleType_t,
  _swigc__p_kfr__audio_format,
  _swigc__p_kfr__audio_format_and_length,
  _swigc__p_kfr__audio_reader_flacT_SampleType_t,
  _swigc__p_kfr__audio_reader_mp3T_SampleType_t,
  _swigc__p_kfr__audio_writer_wavT_SampleType_t,
  _swigc__p_kfr__biquad_filterT_SampleType_t,
  _swigc__p_kfr__biquad_paramsT_SampleType_t,
  _swigc__p_kfr__biquad_paramsT_double_t,
  _swigc__p_kfr__complexT_SampleType_t,
  _swigc__p_kfr__complexT_double_t,
  _swigc__p_kfr__complexT_float_t,
  _swigc__p_kfr__convolve_filterT_SampleType_t,
  _swigc__p_kfr__convolve_filterT_kfr__complexT_SampleType_t_t,
  _swigc__p_kfr__dct_planT_SampleType_t,
  _swigc__p_kfr__dft_order,
  _swigc__p_kfr__dft_planT_SampleType_t,
  _swigc__p_kfr__dft_plan_realT_SampleType_t,
  _swigc__p_kfr__expression_pointerT_SampleType_t,
  _swigc__p_kfr__filterT_SampleType_t,
  _swigc__p_kfr__fraction,
  _swigc__p_kfr__sample_rate_conversion_quality,
  _swigc__p_kfr__seek_origin,
  _swigc__p_kfr__univector2dT_SampleType_t,
  _swigc__p_kfr__univectorT_SampleType_t,
  _swigc__p_kfr__univectorT_float_t,
  _swigc__p_kfr__univectorT_kfr__complexT_SampleType_t_t,
  _swigc__p_kfr__univectorT_kfr__complexT_float_t_t,
  _swigc__p_kfr__univectorT_unsigned_char_t,
  _swigc__p_kfr__window_symmetry,
  _swigc__p_kfr__zpkT_SampleType_t,
  _swigc__p_long,
  _swigc__p_long_double,
  _swigc__p_long_long,
  _swigc__p_p_KfrDSP1__ConvolutionFilterT_SampleType_t,
  _swigc__p_p_SampleType,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_t,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__gslice,
  _swigc__p_std__gslice_arrayT_float_t,
  _swigc__p_std__indirect_arrayT_float_t,
  _swigc__p_std__mask_arrayT_float_t,
  _swigc__p_std__numeric_limitsT_double_t,
  _swigc__p_std__numeric_limitsT_float_t,
  _swigc__p_std__numeric_limitsT_int_t,
  _swigc__p_std__numeric_limitsT_long_long_t,
  _swigc__p_std__numeric_limitsT_long_t,
  _swigc__p_std__numeric_limitsT_short_t,
  _swigc__p_std__numeric_limitsT_unsigned_int_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_long_t,
  _swigc__p_std__numeric_limitsT_unsigned_short_t,
  _swigc__p_std__slice,
  _swigc__p_std__slice_arrayT_float_t,
  _swigc__p_std__string,
  _swigc__p_std__valarrayT_float_t,
  _swigc__p_std__vectorT_Filters__BiquadSection_t,
  _swigc__p_std__vectorT_Filters__BiquadTransposedTypeII_t,
  _swigc__p_std__vectorT_KfrDSP1__Biquad12DB_p_t,
  _swigc__p_std__vectorT_KfrDSP1__Biquad12DB_t,
  _swigc__p_std__vectorT_SampleType_t,
  _swigc__p_std__vectorT_double_t,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_kfr__biquad_paramsT_SampleType_t_t,
  _swigc__p_std__vectorT_kfr__complexT_double_t_t,
  _swigc__p_std__vectorT_kfr__complexT_float_t_t,
  _swigc__p_std__vectorT_long_long_t,
  _swigc__p_std__vectorT_short_t,
  _swigc__p_std__vectorT_signed_char_t,
  _swigc__p_std__vectorT_size_t_t,
  _swigc__p_std__vectorT_unsigned_char_t,
  _swigc__p_std__vectorT_unsigned_int_t,
  _swigc__p_std__vectorT_unsigned_long_long_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__p_std__vector_iteratorT_double_t,
  _swigc__p_std__vector_iteratorT_float_t,
  _swigc__p_std__vector_iteratorT_int_t,
  _swigc__p_std__vector_iteratorT_kfr__biquad_paramsT_SampleType_t_t,
  _swigc__p_std__vector_iteratorT_kfr__complexT_double_t_t,
  _swigc__p_std__vector_iteratorT_kfr__complexT_float_t_t,
  _swigc__p_std__vector_iteratorT_long_long_t,
  _swigc__p_std__vector_iteratorT_short_t,
  _swigc__p_std__vector_iteratorT_signed_char_t,
  _swigc__p_std__vector_iteratorT_unsigned_char_t,
  _swigc__p_std__vector_iteratorT_unsigned_int_t,
  _swigc__p_std__vector_iteratorT_unsigned_long_long_t,
  _swigc__p_std__vector_iteratorT_unsigned_short_t,
  _swigc__p_subtypeT_SampleType_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

